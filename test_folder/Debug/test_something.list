
test_something.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08006b7c  08006b7c  00016b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b98  08006b98  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08006b98  08006b98  00016b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ba0  08006ba0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ba0  08006ba0  00016ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ba4  08006ba4  00016ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006ba8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c8  20000090  08006c38  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000858  08006c38  00020858  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001869e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003533  00000000  00000000  0003875e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001108  00000000  00000000  0003bc98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fa8  00000000  00000000  0003cda0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000238bd  00000000  00000000  0003dd48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011497  00000000  00000000  00061605  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cadce  00000000  00000000  00072a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013d86a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047d0  00000000  00000000  0013d8e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006b64 	.word	0x08006b64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08006b64 	.word	0x08006b64

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fc1a 	bl	8000d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f82e 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f942 	bl	800075c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d8:	f000 f8ac 	bl	8000634 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004dc:	f000 f8d8 	bl	8000690 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e0:	f000 f906 	bl	80006f0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e4:	f005 ff8e 	bl	8006404 <MX_USB_HOST_Init>
  while (1)
  {
    /* USER CODE END WHILE */
    //MX_USB_HOST_Process();

    HAL_Delay(100);
 80004e8:	2064      	movs	r0, #100	; 0x64
 80004ea:	f000 fc7d 	bl	8000de8 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 80004ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f2:	480e      	ldr	r0, [pc, #56]	; (800052c <main+0x64>)
 80004f4:	f000 ff5f 	bl	80013b6 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 80004f8:	2064      	movs	r0, #100	; 0x64
 80004fa:	f000 fc75 	bl	8000de8 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 80004fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000502:	480a      	ldr	r0, [pc, #40]	; (800052c <main+0x64>)
 8000504:	f000 ff57 	bl	80013b6 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8000508:	2064      	movs	r0, #100	; 0x64
 800050a:	f000 fc6d 	bl	8000de8 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 800050e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000512:	4806      	ldr	r0, [pc, #24]	; (800052c <main+0x64>)
 8000514:	f000 ff4f 	bl	80013b6 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8000518:	2064      	movs	r0, #100	; 0x64
 800051a:	f000 fc65 	bl	8000de8 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 800051e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000522:	4802      	ldr	r0, [pc, #8]	; (800052c <main+0x64>)
 8000524:	f000 ff47 	bl	80013b6 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8000528:	e7de      	b.n	80004e8 <main+0x20>
 800052a:	bf00      	nop
 800052c:	40020c00 	.word	0x40020c00

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b098      	sub	sp, #96	; 0x60
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800053a:	2230      	movs	r2, #48	; 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f006 fa4e 	bl	80069e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 031c 	add.w	r3, r7, #28
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	4b31      	ldr	r3, [pc, #196]	; (800062c <SystemClock_Config+0xfc>)
 8000568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056a:	4a30      	ldr	r2, [pc, #192]	; (800062c <SystemClock_Config+0xfc>)
 800056c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000570:	6413      	str	r3, [r2, #64]	; 0x40
 8000572:	4b2e      	ldr	r3, [pc, #184]	; (800062c <SystemClock_Config+0xfc>)
 8000574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057e:	2300      	movs	r3, #0
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	4b2b      	ldr	r3, [pc, #172]	; (8000630 <SystemClock_Config+0x100>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a2a      	ldr	r2, [pc, #168]	; (8000630 <SystemClock_Config+0x100>)
 8000588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058c:	6013      	str	r3, [r2, #0]
 800058e:	4b28      	ldr	r3, [pc, #160]	; (8000630 <SystemClock_Config+0x100>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059a:	2301      	movs	r3, #1
 800059c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800059e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a4:	2302      	movs	r3, #2
 80005a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ae:	2308      	movs	r3, #8
 80005b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b2:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005b6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005bc:	2307      	movs	r3, #7
 80005be:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005c4:	4618      	mov	r0, r3
 80005c6:	f003 f9bf 	bl	8003948 <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005d0:	f000 f9c2 	bl	8000958 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	2302      	movs	r3, #2
 80005da:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005ec:	f107 031c 	add.w	r3, r7, #28
 80005f0:	2105      	movs	r1, #5
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 fc18 	bl	8003e28 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005fe:	f000 f9ab 	bl	8000958 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000602:	2301      	movs	r3, #1
 8000604:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000606:	23c0      	movs	r3, #192	; 0xc0
 8000608:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800060a:	2302      	movs	r3, #2
 800060c:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fde6 	bl	80041e4 <HAL_RCCEx_PeriphCLKConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800061e:	f000 f99b 	bl	8000958 <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3760      	adds	r7, #96	; 0x60
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_I2C1_Init+0x50>)
 800063a:	4a13      	ldr	r2, [pc, #76]	; (8000688 <MX_I2C1_Init+0x54>)
 800063c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_I2C1_Init+0x50>)
 8000640:	4a12      	ldr	r2, [pc, #72]	; (800068c <MX_I2C1_Init+0x58>)
 8000642:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_I2C1_Init+0x50>)
 8000652:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000656:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_I2C1_Init+0x50>)
 800065a:	2200      	movs	r2, #0
 800065c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_I2C1_Init+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_I2C1_Init+0x50>)
 8000672:	f002 fb91 	bl	8002d98 <HAL_I2C_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800067c:	f000 f96c 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200000c0 	.word	0x200000c0
 8000688:	40005400 	.word	0x40005400
 800068c:	000186a0 	.word	0x000186a0

08000690 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <MX_I2S3_Init+0x54>)
 8000696:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <MX_I2S3_Init+0x58>)
 8000698:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_I2S3_Init+0x54>)
 800069c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_I2S3_Init+0x54>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006a8:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_I2S3_Init+0x54>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <MX_I2S3_Init+0x54>)
 80006b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006b4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_I2S3_Init+0x54>)
 80006b8:	4a0c      	ldr	r2, [pc, #48]	; (80006ec <MX_I2S3_Init+0x5c>)
 80006ba:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_I2S3_Init+0x54>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_I2S3_Init+0x54>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_I2S3_Init+0x54>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_I2S3_Init+0x54>)
 80006d0:	f002 fc9a 	bl	8003008 <HAL_I2S_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006da:	f000 f93d 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000016c 	.word	0x2000016c
 80006e8:	40003c00 	.word	0x40003c00
 80006ec:	00017700 	.word	0x00017700

080006f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006f4:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_SPI1_Init+0x64>)
 80006f6:	4a18      	ldr	r2, [pc, #96]	; (8000758 <MX_SPI1_Init+0x68>)
 80006f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006fa:	4b16      	ldr	r3, [pc, #88]	; (8000754 <MX_SPI1_Init+0x64>)
 80006fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000700:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_SPI1_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_SPI1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_SPI1_Init+0x64>)
 800071c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000720:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_SPI1_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <MX_SPI1_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_SPI1_Init+0x64>)
 800073c:	220a      	movs	r2, #10
 800073e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_SPI1_Init+0x64>)
 8000742:	f003 fe8d 	bl	8004460 <HAL_SPI_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800074c:	f000 f904 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000114 	.word	0x20000114
 8000758:	40013000 	.word	0x40013000

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08c      	sub	sp, #48	; 0x30
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
 8000776:	4b71      	ldr	r3, [pc, #452]	; (800093c <MX_GPIO_Init+0x1e0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a70      	ldr	r2, [pc, #448]	; (800093c <MX_GPIO_Init+0x1e0>)
 800077c:	f043 0310 	orr.w	r3, r3, #16
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b6e      	ldr	r3, [pc, #440]	; (800093c <MX_GPIO_Init+0x1e0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0310 	and.w	r3, r3, #16
 800078a:	61bb      	str	r3, [r7, #24]
 800078c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
 8000792:	4b6a      	ldr	r3, [pc, #424]	; (800093c <MX_GPIO_Init+0x1e0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a69      	ldr	r2, [pc, #420]	; (800093c <MX_GPIO_Init+0x1e0>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b67      	ldr	r3, [pc, #412]	; (800093c <MX_GPIO_Init+0x1e0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
 80007ae:	4b63      	ldr	r3, [pc, #396]	; (800093c <MX_GPIO_Init+0x1e0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a62      	ldr	r2, [pc, #392]	; (800093c <MX_GPIO_Init+0x1e0>)
 80007b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b60      	ldr	r3, [pc, #384]	; (800093c <MX_GPIO_Init+0x1e0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	4b5c      	ldr	r3, [pc, #368]	; (800093c <MX_GPIO_Init+0x1e0>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a5b      	ldr	r2, [pc, #364]	; (800093c <MX_GPIO_Init+0x1e0>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b59      	ldr	r3, [pc, #356]	; (800093c <MX_GPIO_Init+0x1e0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	4b55      	ldr	r3, [pc, #340]	; (800093c <MX_GPIO_Init+0x1e0>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a54      	ldr	r2, [pc, #336]	; (800093c <MX_GPIO_Init+0x1e0>)
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b52      	ldr	r3, [pc, #328]	; (800093c <MX_GPIO_Init+0x1e0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0302 	and.w	r3, r3, #2
 80007fa:	60bb      	str	r3, [r7, #8]
 80007fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b4e      	ldr	r3, [pc, #312]	; (800093c <MX_GPIO_Init+0x1e0>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a4d      	ldr	r2, [pc, #308]	; (800093c <MX_GPIO_Init+0x1e0>)
 8000808:	f043 0308 	orr.w	r3, r3, #8
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b4b      	ldr	r3, [pc, #300]	; (800093c <MX_GPIO_Init+0x1e0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0308 	and.w	r3, r3, #8
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2108      	movs	r1, #8
 800081e:	4848      	ldr	r0, [pc, #288]	; (8000940 <MX_GPIO_Init+0x1e4>)
 8000820:	f000 fdb0 	bl	8001384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000824:	2201      	movs	r2, #1
 8000826:	2101      	movs	r1, #1
 8000828:	4846      	ldr	r0, [pc, #280]	; (8000944 <MX_GPIO_Init+0x1e8>)
 800082a:	f000 fdab 	bl	8001384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|GPIO_PIN_15
 800082e:	2200      	movs	r2, #0
 8000830:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000834:	4844      	ldr	r0, [pc, #272]	; (8000948 <MX_GPIO_Init+0x1ec>)
 8000836:	f000 fda5 	bl	8001384 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800083a:	2308      	movs	r3, #8
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	483b      	ldr	r0, [pc, #236]	; (8000940 <MX_GPIO_Init+0x1e4>)
 8000852:	f000 fbfd 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000856:	2301      	movs	r3, #1
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	4835      	ldr	r0, [pc, #212]	; (8000944 <MX_GPIO_Init+0x1e8>)
 800086e:	f000 fbef 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000872:	2308      	movs	r3, #8
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000882:	2305      	movs	r3, #5
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	482d      	ldr	r0, [pc, #180]	; (8000944 <MX_GPIO_Init+0x1e8>)
 800088e:	f000 fbdf 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000892:	2301      	movs	r3, #1
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000896:	4b2d      	ldr	r3, [pc, #180]	; (800094c <MX_GPIO_Init+0x1f0>)
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	482a      	ldr	r0, [pc, #168]	; (8000950 <MX_GPIO_Init+0x1f4>)
 80008a6:	f000 fbd3 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008aa:	2304      	movs	r3, #4
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ae:	2300      	movs	r3, #0
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4825      	ldr	r0, [pc, #148]	; (8000954 <MX_GPIO_Init+0x1f8>)
 80008be:	f000 fbc7 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008d4:	2305      	movs	r3, #5
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008d8:	f107 031c 	add.w	r3, r7, #28
 80008dc:	4619      	mov	r1, r3
 80008de:	481d      	ldr	r0, [pc, #116]	; (8000954 <MX_GPIO_Init+0x1f8>)
 80008e0:	f000 fbb6 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin PD15
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|GPIO_PIN_15
 80008e4:	f24f 0310 	movw	r3, #61456	; 0xf010
 80008e8:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4812      	ldr	r0, [pc, #72]	; (8000948 <MX_GPIO_Init+0x1ec>)
 80008fe:	f000 fba7 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000902:	2320      	movs	r3, #32
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	480c      	ldr	r0, [pc, #48]	; (8000948 <MX_GPIO_Init+0x1ec>)
 8000916:	f000 fb9b 	bl	8001050 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800091a:	2302      	movs	r3, #2
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_GPIO_Init+0x1f0>)
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_GPIO_Init+0x1e4>)
 800092e:	f000 fb8f 	bl	8001050 <HAL_GPIO_Init>

}
 8000932:	bf00      	nop
 8000934:	3730      	adds	r7, #48	; 0x30
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	40021000 	.word	0x40021000
 8000944:	40020800 	.word	0x40020800
 8000948:	40020c00 	.word	0x40020c00
 800094c:	10120000 	.word	0x10120000
 8000950:	40020000 	.word	0x40020000
 8000954:	40020400 	.word	0x40020400

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
	...

08000968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <HAL_MspInit+0x4c>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <HAL_MspInit+0x4c>)
 8000978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097c:	6453      	str	r3, [r2, #68]	; 0x44
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <HAL_MspInit+0x4c>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <HAL_MspInit+0x4c>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <HAL_MspInit+0x4c>)
 8000994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000998:	6413      	str	r3, [r2, #64]	; 0x40
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_MspInit+0x4c>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009a6:	2007      	movs	r0, #7
 80009a8:	f000 fb10 	bl	8000fcc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40023800 	.word	0x40023800

080009b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a19      	ldr	r2, [pc, #100]	; (8000a3c <HAL_I2C_MspInit+0x84>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d12c      	bne.n	8000a34 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <HAL_I2C_MspInit+0x88>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a17      	ldr	r2, [pc, #92]	; (8000a40 <HAL_I2C_MspInit+0x88>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <HAL_I2C_MspInit+0x88>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009f6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009fc:	2312      	movs	r3, #18
 80009fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a08:	2304      	movs	r3, #4
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4619      	mov	r1, r3
 8000a12:	480c      	ldr	r0, [pc, #48]	; (8000a44 <HAL_I2C_MspInit+0x8c>)
 8000a14:	f000 fb1c 	bl	8001050 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <HAL_I2C_MspInit+0x88>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a20:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <HAL_I2C_MspInit+0x88>)
 8000a22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a26:	6413      	str	r3, [r2, #64]	; 0x40
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <HAL_I2C_MspInit+0x88>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a34:	bf00      	nop
 8000a36:	3728      	adds	r7, #40	; 0x28
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40005400 	.word	0x40005400
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020400 	.word	0x40020400

08000a48 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a28      	ldr	r2, [pc, #160]	; (8000b08 <HAL_I2S_MspInit+0xc0>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d14a      	bne.n	8000b00 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b27      	ldr	r3, [pc, #156]	; (8000b0c <HAL_I2S_MspInit+0xc4>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	4a26      	ldr	r2, [pc, #152]	; (8000b0c <HAL_I2S_MspInit+0xc4>)
 8000a74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a78:	6413      	str	r3, [r2, #64]	; 0x40
 8000a7a:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <HAL_I2S_MspInit+0xc4>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b20      	ldr	r3, [pc, #128]	; (8000b0c <HAL_I2S_MspInit+0xc4>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a1f      	ldr	r2, [pc, #124]	; (8000b0c <HAL_I2S_MspInit+0xc4>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b1d      	ldr	r3, [pc, #116]	; (8000b0c <HAL_I2S_MspInit+0xc4>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <HAL_I2S_MspInit+0xc4>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a18      	ldr	r2, [pc, #96]	; (8000b0c <HAL_I2S_MspInit+0xc4>)
 8000aac:	f043 0304 	orr.w	r3, r3, #4
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <HAL_I2S_MspInit+0xc4>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0304 	and.w	r3, r3, #4
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000abe:	2310      	movs	r3, #16
 8000ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ace:	2306      	movs	r3, #6
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480d      	ldr	r0, [pc, #52]	; (8000b10 <HAL_I2S_MspInit+0xc8>)
 8000ada:	f000 fab9 	bl	8001050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ade:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000af0:	2306      	movs	r3, #6
 8000af2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4619      	mov	r1, r3
 8000afa:	4806      	ldr	r0, [pc, #24]	; (8000b14 <HAL_I2S_MspInit+0xcc>)
 8000afc:	f000 faa8 	bl	8001050 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b00:	bf00      	nop
 8000b02:	3728      	adds	r7, #40	; 0x28
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40003c00 	.word	0x40003c00
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020000 	.word	0x40020000
 8000b14:	40020800 	.word	0x40020800

08000b18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08a      	sub	sp, #40	; 0x28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a19      	ldr	r2, [pc, #100]	; (8000b9c <HAL_SPI_MspInit+0x84>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d12b      	bne.n	8000b92 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <HAL_SPI_MspInit+0x88>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	4a17      	ldr	r2, [pc, #92]	; (8000ba0 <HAL_SPI_MspInit+0x88>)
 8000b44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b48:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <HAL_SPI_MspInit+0x88>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <HAL_SPI_MspInit+0x88>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a10      	ldr	r2, [pc, #64]	; (8000ba0 <HAL_SPI_MspInit+0x88>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <HAL_SPI_MspInit+0x88>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b72:	23e0      	movs	r3, #224	; 0xe0
 8000b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b82:	2305      	movs	r3, #5
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <HAL_SPI_MspInit+0x8c>)
 8000b8e:	f000 fa5f 	bl	8001050 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	; 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40013000 	.word	0x40013000
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40020000 	.word	0x40020000

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <HardFault_Handler+0x4>

08000bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <MemManage_Handler+0x4>

08000bc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfc:	f000 f8d4 	bl	8000da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <OTG_FS_IRQHandler+0x10>)
 8000c0a:	f000 fe7f 	bl	800190c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000590 	.word	0x20000590

08000c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c20:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <_sbrk+0x5c>)
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <_sbrk+0x60>)
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c2c:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <_sbrk+0x64>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <_sbrk+0x68>)
 8000c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d207      	bcs.n	8000c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c48:	f005 fe90 	bl	800696c <__errno>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	230c      	movs	r3, #12
 8000c50:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c56:	e009      	b.n	8000c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <_sbrk+0x64>)
 8000c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20020000 	.word	0x20020000
 8000c78:	00000400 	.word	0x00000400
 8000c7c:	200000ac 	.word	0x200000ac
 8000c80:	20000858 	.word	0x20000858

08000c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <SystemInit+0x28>)
 8000c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8e:	4a07      	ldr	r2, [pc, #28]	; (8000cac <SystemInit+0x28>)
 8000c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c98:	4b04      	ldr	r3, [pc, #16]	; (8000cac <SystemInit+0x28>)
 8000c9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c9e:	609a      	str	r2, [r3, #8]
#endif
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000cb4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cb6:	e003      	b.n	8000cc0 <LoopCopyDataInit>

08000cb8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cbc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cbe:	3104      	adds	r1, #4

08000cc0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cc0:	480b      	ldr	r0, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cc4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cc6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cc8:	d3f6      	bcc.n	8000cb8 <CopyDataInit>
  ldr  r2, =_sbss
 8000cca:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ccc:	e002      	b.n	8000cd4 <LoopFillZerobss>

08000cce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000cd0:	f842 3b04 	str.w	r3, [r2], #4

08000cd4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cd6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cd8:	d3f9      	bcc.n	8000cce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cda:	f7ff ffd3 	bl	8000c84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cde:	f005 fe4b 	bl	8006978 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce2:	f7ff fbf1 	bl	80004c8 <main>
  bx  lr    
 8000ce6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ce8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000cec:	08006ba8 	.word	0x08006ba8
  ldr  r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cf4:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000cf8:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000cfc:	20000858 	.word	0x20000858

08000d00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC_IRQHandler>
	...

08000d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d08:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <HAL_Init+0x40>)
 8000d0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <HAL_Init+0x40>)
 8000d1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <HAL_Init+0x40>)
 8000d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f000 f94d 	bl	8000fcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f000 f808 	bl	8000d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d38:	f7ff fe16 	bl	8000968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023c00 	.word	0x40023c00

08000d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <HAL_InitTick+0x54>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_InitTick+0x58>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 f965 	bl	8001036 <HAL_SYSTICK_Config>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00e      	b.n	8000d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b0f      	cmp	r3, #15
 8000d7a:	d80a      	bhi.n	8000d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d84:	f000 f92d 	bl	8000fe2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d88:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <HAL_InitTick+0x5c>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e000      	b.n	8000d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	20000008 	.word	0x20000008
 8000da4:	20000004 	.word	0x20000004

08000da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_IncTick+0x20>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x24>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <HAL_IncTick+0x24>)
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	200001b4 	.word	0x200001b4

08000dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <HAL_GetTick+0x14>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	200001b4 	.word	0x200001b4

08000de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df0:	f7ff ffee 	bl	8000dd0 <HAL_GetTick>
 8000df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e00:	d005      	beq.n	8000e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <HAL_Delay+0x40>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e0e:	bf00      	nop
 8000e10:	f7ff ffde 	bl	8000dd0 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d8f7      	bhi.n	8000e10 <HAL_Delay+0x28>
  {
  }
}
 8000e20:	bf00      	nop
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000008 	.word	0x20000008

08000e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5e:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	60d3      	str	r3, [r2, #12]
}
 8000e64:	bf00      	nop
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <__NVIC_GetPriorityGrouping+0x18>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	f003 0307 	and.w	r3, r3, #7
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	db0b      	blt.n	8000eba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	f003 021f 	and.w	r2, r3, #31
 8000ea8:	4907      	ldr	r1, [pc, #28]	; (8000ec8 <__NVIC_EnableIRQ+0x38>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	095b      	lsrs	r3, r3, #5
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000e100 	.word	0xe000e100

08000ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	db0a      	blt.n	8000ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	490c      	ldr	r1, [pc, #48]	; (8000f18 <__NVIC_SetPriority+0x4c>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	0112      	lsls	r2, r2, #4
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	440b      	add	r3, r1
 8000ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef4:	e00a      	b.n	8000f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4908      	ldr	r1, [pc, #32]	; (8000f1c <__NVIC_SetPriority+0x50>)
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	f003 030f 	and.w	r3, r3, #15
 8000f02:	3b04      	subs	r3, #4
 8000f04:	0112      	lsls	r2, r2, #4
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	440b      	add	r3, r1
 8000f0a:	761a      	strb	r2, [r3, #24]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000e100 	.word	0xe000e100
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	; 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f1c3 0307 	rsb	r3, r3, #7
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	bf28      	it	cs
 8000f3e:	2304      	movcs	r3, #4
 8000f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3304      	adds	r3, #4
 8000f46:	2b06      	cmp	r3, #6
 8000f48:	d902      	bls.n	8000f50 <NVIC_EncodePriority+0x30>
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3b03      	subs	r3, #3
 8000f4e:	e000      	b.n	8000f52 <NVIC_EncodePriority+0x32>
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	401a      	ands	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f72:	43d9      	mvns	r1, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	4313      	orrs	r3, r2
         );
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3724      	adds	r7, #36	; 0x24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f98:	d301      	bcc.n	8000f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00f      	b.n	8000fbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <SysTick_Config+0x40>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fa6:	210f      	movs	r1, #15
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fac:	f7ff ff8e 	bl	8000ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <SysTick_Config+0x40>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb6:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <SysTick_Config+0x40>)
 8000fb8:	2207      	movs	r2, #7
 8000fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	e000e010 	.word	0xe000e010

08000fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ff29 	bl	8000e2c <__NVIC_SetPriorityGrouping>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b086      	sub	sp, #24
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4603      	mov	r3, r0
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	607a      	str	r2, [r7, #4]
 8000fee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff4:	f7ff ff3e 	bl	8000e74 <__NVIC_GetPriorityGrouping>
 8000ff8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	68b9      	ldr	r1, [r7, #8]
 8000ffe:	6978      	ldr	r0, [r7, #20]
 8001000:	f7ff ff8e 	bl	8000f20 <NVIC_EncodePriority>
 8001004:	4602      	mov	r2, r0
 8001006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff5d 	bl	8000ecc <__NVIC_SetPriority>
}
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff31 	bl	8000e90 <__NVIC_EnableIRQ>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff ffa2 	bl	8000f88 <SysTick_Config>
 8001044:	4603      	mov	r3, r0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	; 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
 800106a:	e16b      	b.n	8001344 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800106c:	2201      	movs	r2, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	429a      	cmp	r2, r3
 8001086:	f040 815a 	bne.w	800133e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d00b      	beq.n	80010aa <HAL_GPIO_Init+0x5a>
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	2b02      	cmp	r3, #2
 8001098:	d007      	beq.n	80010aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800109e:	2b11      	cmp	r3, #17
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b12      	cmp	r3, #18
 80010a8:	d130      	bne.n	800110c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	2203      	movs	r2, #3
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	68da      	ldr	r2, [r3, #12]
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010e0:	2201      	movs	r2, #1
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	091b      	lsrs	r3, r3, #4
 80010f6:	f003 0201 	and.w	r2, r3, #1
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	2203      	movs	r2, #3
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	689a      	ldr	r2, [r3, #8]
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2b02      	cmp	r3, #2
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0xfc>
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b12      	cmp	r3, #18
 800114a:	d123      	bne.n	8001194 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	08da      	lsrs	r2, r3, #3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3208      	adds	r2, #8
 8001154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	f003 0307 	and.w	r3, r3, #7
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	220f      	movs	r2, #15
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	691a      	ldr	r2, [r3, #16]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	08da      	lsrs	r2, r3, #3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3208      	adds	r2, #8
 800118e:	69b9      	ldr	r1, [r7, #24]
 8001190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	2203      	movs	r2, #3
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0203 	and.w	r2, r3, #3
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 80b4 	beq.w	800133e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	4b5f      	ldr	r3, [pc, #380]	; (8001358 <HAL_GPIO_Init+0x308>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	4a5e      	ldr	r2, [pc, #376]	; (8001358 <HAL_GPIO_Init+0x308>)
 80011e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e4:	6453      	str	r3, [r2, #68]	; 0x44
 80011e6:	4b5c      	ldr	r3, [pc, #368]	; (8001358 <HAL_GPIO_Init+0x308>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011f2:	4a5a      	ldr	r2, [pc, #360]	; (800135c <HAL_GPIO_Init+0x30c>)
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	3302      	adds	r3, #2
 80011fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	220f      	movs	r2, #15
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a51      	ldr	r2, [pc, #324]	; (8001360 <HAL_GPIO_Init+0x310>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d02b      	beq.n	8001276 <HAL_GPIO_Init+0x226>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a50      	ldr	r2, [pc, #320]	; (8001364 <HAL_GPIO_Init+0x314>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d025      	beq.n	8001272 <HAL_GPIO_Init+0x222>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a4f      	ldr	r2, [pc, #316]	; (8001368 <HAL_GPIO_Init+0x318>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d01f      	beq.n	800126e <HAL_GPIO_Init+0x21e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a4e      	ldr	r2, [pc, #312]	; (800136c <HAL_GPIO_Init+0x31c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d019      	beq.n	800126a <HAL_GPIO_Init+0x21a>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4d      	ldr	r2, [pc, #308]	; (8001370 <HAL_GPIO_Init+0x320>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d013      	beq.n	8001266 <HAL_GPIO_Init+0x216>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4c      	ldr	r2, [pc, #304]	; (8001374 <HAL_GPIO_Init+0x324>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d00d      	beq.n	8001262 <HAL_GPIO_Init+0x212>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4b      	ldr	r2, [pc, #300]	; (8001378 <HAL_GPIO_Init+0x328>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d007      	beq.n	800125e <HAL_GPIO_Init+0x20e>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4a      	ldr	r2, [pc, #296]	; (800137c <HAL_GPIO_Init+0x32c>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d101      	bne.n	800125a <HAL_GPIO_Init+0x20a>
 8001256:	2307      	movs	r3, #7
 8001258:	e00e      	b.n	8001278 <HAL_GPIO_Init+0x228>
 800125a:	2308      	movs	r3, #8
 800125c:	e00c      	b.n	8001278 <HAL_GPIO_Init+0x228>
 800125e:	2306      	movs	r3, #6
 8001260:	e00a      	b.n	8001278 <HAL_GPIO_Init+0x228>
 8001262:	2305      	movs	r3, #5
 8001264:	e008      	b.n	8001278 <HAL_GPIO_Init+0x228>
 8001266:	2304      	movs	r3, #4
 8001268:	e006      	b.n	8001278 <HAL_GPIO_Init+0x228>
 800126a:	2303      	movs	r3, #3
 800126c:	e004      	b.n	8001278 <HAL_GPIO_Init+0x228>
 800126e:	2302      	movs	r3, #2
 8001270:	e002      	b.n	8001278 <HAL_GPIO_Init+0x228>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <HAL_GPIO_Init+0x228>
 8001276:	2300      	movs	r3, #0
 8001278:	69fa      	ldr	r2, [r7, #28]
 800127a:	f002 0203 	and.w	r2, r2, #3
 800127e:	0092      	lsls	r2, r2, #2
 8001280:	4093      	lsls	r3, r2
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001288:	4934      	ldr	r1, [pc, #208]	; (800135c <HAL_GPIO_Init+0x30c>)
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	089b      	lsrs	r3, r3, #2
 800128e:	3302      	adds	r3, #2
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001296:	4b3a      	ldr	r3, [pc, #232]	; (8001380 <HAL_GPIO_Init+0x330>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	43db      	mvns	r3, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4013      	ands	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ba:	4a31      	ldr	r2, [pc, #196]	; (8001380 <HAL_GPIO_Init+0x330>)
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012c0:	4b2f      	ldr	r3, [pc, #188]	; (8001380 <HAL_GPIO_Init+0x330>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012e4:	4a26      	ldr	r2, [pc, #152]	; (8001380 <HAL_GPIO_Init+0x330>)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ea:	4b25      	ldr	r3, [pc, #148]	; (8001380 <HAL_GPIO_Init+0x330>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800130e:	4a1c      	ldr	r2, [pc, #112]	; (8001380 <HAL_GPIO_Init+0x330>)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001314:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <HAL_GPIO_Init+0x330>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001338:	4a11      	ldr	r2, [pc, #68]	; (8001380 <HAL_GPIO_Init+0x330>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3301      	adds	r3, #1
 8001342:	61fb      	str	r3, [r7, #28]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	2b0f      	cmp	r3, #15
 8001348:	f67f ae90 	bls.w	800106c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800134c:	bf00      	nop
 800134e:	3724      	adds	r7, #36	; 0x24
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	40023800 	.word	0x40023800
 800135c:	40013800 	.word	0x40013800
 8001360:	40020000 	.word	0x40020000
 8001364:	40020400 	.word	0x40020400
 8001368:	40020800 	.word	0x40020800
 800136c:	40020c00 	.word	0x40020c00
 8001370:	40021000 	.word	0x40021000
 8001374:	40021400 	.word	0x40021400
 8001378:	40021800 	.word	0x40021800
 800137c:	40021c00 	.word	0x40021c00
 8001380:	40013c00 	.word	0x40013c00

08001384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	807b      	strh	r3, [r7, #2]
 8001390:	4613      	mov	r3, r2
 8001392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001394:	787b      	ldrb	r3, [r7, #1]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800139a:	887a      	ldrh	r2, [r7, #2]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013a0:	e003      	b.n	80013aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013a2:	887b      	ldrh	r3, [r7, #2]
 80013a4:	041a      	lsls	r2, r3, #16
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	619a      	str	r2, [r3, #24]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	460b      	mov	r3, r1
 80013c0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695a      	ldr	r2, [r3, #20]
 80013c6:	887b      	ldrh	r3, [r7, #2]
 80013c8:	401a      	ands	r2, r3
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d104      	bne.n	80013da <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80013d0:	887b      	ldrh	r3, [r7, #2]
 80013d2:	041a      	lsls	r2, r3, #16
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80013d8:	e002      	b.n	80013e0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80013da:	887a      	ldrh	r2, [r7, #2]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	619a      	str	r2, [r3, #24]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80013ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ee:	b08f      	sub	sp, #60	; 0x3c
 80013f0:	af0a      	add	r7, sp, #40	; 0x28
 80013f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e054      	b.n	80014a8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b00      	cmp	r3, #0
 800140e:	d106      	bne.n	800141e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f005 f847 	bl	80064ac <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2203      	movs	r2, #3
 8001422:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800142a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142e:	2b00      	cmp	r3, #0
 8001430:	d102      	bne.n	8001438 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f003 f8e5 	bl	800460c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	687e      	ldr	r6, [r7, #4]
 800144a:	466d      	mov	r5, sp
 800144c:	f106 0410 	add.w	r4, r6, #16
 8001450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001456:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001458:	e894 0003 	ldmia.w	r4, {r0, r1}
 800145c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001460:	1d33      	adds	r3, r6, #4
 8001462:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001464:	6838      	ldr	r0, [r7, #0]
 8001466:	f003 f85f 	bl	8004528 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2101      	movs	r1, #1
 8001470:	4618      	mov	r0, r3
 8001472:	f003 f8dc 	bl	800462e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	603b      	str	r3, [r7, #0]
 800147c:	687e      	ldr	r6, [r7, #4]
 800147e:	466d      	mov	r5, sp
 8001480:	f106 0410 	add.w	r4, r6, #16
 8001484:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001486:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800148a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800148c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001490:	e885 0003 	stmia.w	r5, {r0, r1}
 8001494:	1d33      	adds	r3, r6, #4
 8001496:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001498:	6838      	ldr	r0, [r7, #0]
 800149a:	f003 f9ef 	bl	800487c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2201      	movs	r2, #1
 80014a2:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014b0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b089      	sub	sp, #36	; 0x24
 80014b4:	af04      	add	r7, sp, #16
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	4608      	mov	r0, r1
 80014ba:	4611      	mov	r1, r2
 80014bc:	461a      	mov	r2, r3
 80014be:	4603      	mov	r3, r0
 80014c0:	70fb      	strb	r3, [r7, #3]
 80014c2:	460b      	mov	r3, r1
 80014c4:	70bb      	strb	r3, [r7, #2]
 80014c6:	4613      	mov	r3, r2
 80014c8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d101      	bne.n	80014d8 <HAL_HCD_HC_Init+0x28>
 80014d4:	2302      	movs	r3, #2
 80014d6:	e07f      	b.n	80015d8 <HAL_HCD_HC_Init+0x128>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80014e0:	78fa      	ldrb	r2, [r7, #3]
 80014e2:	6879      	ldr	r1, [r7, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	440b      	add	r3, r1
 80014ee:	333d      	adds	r3, #61	; 0x3d
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80014f4:	78fa      	ldrb	r2, [r7, #3]
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	00db      	lsls	r3, r3, #3
 8001500:	440b      	add	r3, r1
 8001502:	3338      	adds	r3, #56	; 0x38
 8001504:	787a      	ldrb	r2, [r7, #1]
 8001506:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001508:	78fa      	ldrb	r2, [r7, #3]
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	440b      	add	r3, r1
 8001516:	3340      	adds	r3, #64	; 0x40
 8001518:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800151a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800151c:	78fa      	ldrb	r2, [r7, #3]
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	4613      	mov	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	440b      	add	r3, r1
 800152a:	3339      	adds	r3, #57	; 0x39
 800152c:	78fa      	ldrb	r2, [r7, #3]
 800152e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001530:	78fa      	ldrb	r2, [r7, #3]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	440b      	add	r3, r1
 800153e:	333f      	adds	r3, #63	; 0x3f
 8001540:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001544:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001546:	78fa      	ldrb	r2, [r7, #3]
 8001548:	78bb      	ldrb	r3, [r7, #2]
 800154a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800154e:	b2d8      	uxtb	r0, r3
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	440b      	add	r3, r1
 800155c:	333a      	adds	r3, #58	; 0x3a
 800155e:	4602      	mov	r2, r0
 8001560:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001562:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001566:	2b00      	cmp	r3, #0
 8001568:	da0a      	bge.n	8001580 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800156a:	78fa      	ldrb	r2, [r7, #3]
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	440b      	add	r3, r1
 8001578:	333b      	adds	r3, #59	; 0x3b
 800157a:	2201      	movs	r2, #1
 800157c:	701a      	strb	r2, [r3, #0]
 800157e:	e009      	b.n	8001594 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001580:	78fa      	ldrb	r2, [r7, #3]
 8001582:	6879      	ldr	r1, [r7, #4]
 8001584:	4613      	mov	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	4413      	add	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	440b      	add	r3, r1
 800158e:	333b      	adds	r3, #59	; 0x3b
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001594:	78fa      	ldrb	r2, [r7, #3]
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	440b      	add	r3, r1
 80015a2:	333c      	adds	r3, #60	; 0x3c
 80015a4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015a8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6818      	ldr	r0, [r3, #0]
 80015ae:	787c      	ldrb	r4, [r7, #1]
 80015b0:	78ba      	ldrb	r2, [r7, #2]
 80015b2:	78f9      	ldrb	r1, [r7, #3]
 80015b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015b6:	9302      	str	r3, [sp, #8]
 80015b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015bc:	9301      	str	r3, [sp, #4]
 80015be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	4623      	mov	r3, r4
 80015c6:	f003 fa99 	bl	8004afc <USB_HC_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd90      	pop	{r4, r7, pc}

080015e0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d101      	bne.n	80015fe <HAL_HCD_HC_Halt+0x1e>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e00f      	b.n	800161e <HAL_HCD_HC_Halt+0x3e>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	78fa      	ldrb	r2, [r7, #3]
 800160c:	4611      	mov	r1, r2
 800160e:	4618      	mov	r0, r3
 8001610:	f003 fcd5 	bl	8004fbe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800161c:	7bfb      	ldrb	r3, [r7, #15]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	4608      	mov	r0, r1
 8001632:	4611      	mov	r1, r2
 8001634:	461a      	mov	r2, r3
 8001636:	4603      	mov	r3, r0
 8001638:	70fb      	strb	r3, [r7, #3]
 800163a:	460b      	mov	r3, r1
 800163c:	70bb      	strb	r3, [r7, #2]
 800163e:	4613      	mov	r3, r2
 8001640:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001642:	78fa      	ldrb	r2, [r7, #3]
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	440b      	add	r3, r1
 8001650:	333b      	adds	r3, #59	; 0x3b
 8001652:	78ba      	ldrb	r2, [r7, #2]
 8001654:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001656:	78fa      	ldrb	r2, [r7, #3]
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	440b      	add	r3, r1
 8001664:	333f      	adds	r3, #63	; 0x3f
 8001666:	787a      	ldrb	r2, [r7, #1]
 8001668:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800166a:	7c3b      	ldrb	r3, [r7, #16]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d114      	bne.n	800169a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001670:	78fa      	ldrb	r2, [r7, #3]
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	440b      	add	r3, r1
 800167e:	3342      	adds	r3, #66	; 0x42
 8001680:	2203      	movs	r2, #3
 8001682:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001684:	78fa      	ldrb	r2, [r7, #3]
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	440b      	add	r3, r1
 8001692:	333d      	adds	r3, #61	; 0x3d
 8001694:	7f3a      	ldrb	r2, [r7, #28]
 8001696:	701a      	strb	r2, [r3, #0]
 8001698:	e009      	b.n	80016ae <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800169a:	78fa      	ldrb	r2, [r7, #3]
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	440b      	add	r3, r1
 80016a8:	3342      	adds	r3, #66	; 0x42
 80016aa:	2202      	movs	r2, #2
 80016ac:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80016ae:	787b      	ldrb	r3, [r7, #1]
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	f200 80d6 	bhi.w	8001862 <HAL_HCD_HC_SubmitRequest+0x23a>
 80016b6:	a201      	add	r2, pc, #4	; (adr r2, 80016bc <HAL_HCD_HC_SubmitRequest+0x94>)
 80016b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016bc:	080016cd 	.word	0x080016cd
 80016c0:	0800184d 	.word	0x0800184d
 80016c4:	08001739 	.word	0x08001739
 80016c8:	080017c3 	.word	0x080017c3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80016cc:	7c3b      	ldrb	r3, [r7, #16]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	f040 80c9 	bne.w	8001866 <HAL_HCD_HC_SubmitRequest+0x23e>
 80016d4:	78bb      	ldrb	r3, [r7, #2]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f040 80c5 	bne.w	8001866 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80016dc:	8b3b      	ldrh	r3, [r7, #24]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d109      	bne.n	80016f6 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80016e2:	78fa      	ldrb	r2, [r7, #3]
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	440b      	add	r3, r1
 80016f0:	3351      	adds	r3, #81	; 0x51
 80016f2:	2201      	movs	r2, #1
 80016f4:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016f6:	78fa      	ldrb	r2, [r7, #3]
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	440b      	add	r3, r1
 8001704:	3351      	adds	r3, #81	; 0x51
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10a      	bne.n	8001722 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800170c:	78fa      	ldrb	r2, [r7, #3]
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	440b      	add	r3, r1
 800171a:	3342      	adds	r3, #66	; 0x42
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001720:	e0a1      	b.n	8001866 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001722:	78fa      	ldrb	r2, [r7, #3]
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	4613      	mov	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	440b      	add	r3, r1
 8001730:	3342      	adds	r3, #66	; 0x42
 8001732:	2202      	movs	r2, #2
 8001734:	701a      	strb	r2, [r3, #0]
      break;
 8001736:	e096      	b.n	8001866 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001738:	78bb      	ldrb	r3, [r7, #2]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d120      	bne.n	8001780 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800173e:	78fa      	ldrb	r2, [r7, #3]
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	440b      	add	r3, r1
 800174c:	3351      	adds	r3, #81	; 0x51
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10a      	bne.n	800176a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001754:	78fa      	ldrb	r2, [r7, #3]
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	440b      	add	r3, r1
 8001762:	3342      	adds	r3, #66	; 0x42
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001768:	e07e      	b.n	8001868 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800176a:	78fa      	ldrb	r2, [r7, #3]
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	440b      	add	r3, r1
 8001778:	3342      	adds	r3, #66	; 0x42
 800177a:	2202      	movs	r2, #2
 800177c:	701a      	strb	r2, [r3, #0]
      break;
 800177e:	e073      	b.n	8001868 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001780:	78fa      	ldrb	r2, [r7, #3]
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	440b      	add	r3, r1
 800178e:	3350      	adds	r3, #80	; 0x50
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10a      	bne.n	80017ac <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001796:	78fa      	ldrb	r2, [r7, #3]
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	440b      	add	r3, r1
 80017a4:	3342      	adds	r3, #66	; 0x42
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
      break;
 80017aa:	e05d      	b.n	8001868 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017ac:	78fa      	ldrb	r2, [r7, #3]
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	440b      	add	r3, r1
 80017ba:	3342      	adds	r3, #66	; 0x42
 80017bc:	2202      	movs	r2, #2
 80017be:	701a      	strb	r2, [r3, #0]
      break;
 80017c0:	e052      	b.n	8001868 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80017c2:	78bb      	ldrb	r3, [r7, #2]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d120      	bne.n	800180a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017c8:	78fa      	ldrb	r2, [r7, #3]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	440b      	add	r3, r1
 80017d6:	3351      	adds	r3, #81	; 0x51
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10a      	bne.n	80017f4 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017de:	78fa      	ldrb	r2, [r7, #3]
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	440b      	add	r3, r1
 80017ec:	3342      	adds	r3, #66	; 0x42
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017f2:	e039      	b.n	8001868 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017f4:	78fa      	ldrb	r2, [r7, #3]
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	440b      	add	r3, r1
 8001802:	3342      	adds	r3, #66	; 0x42
 8001804:	2202      	movs	r2, #2
 8001806:	701a      	strb	r2, [r3, #0]
      break;
 8001808:	e02e      	b.n	8001868 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800180a:	78fa      	ldrb	r2, [r7, #3]
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	440b      	add	r3, r1
 8001818:	3350      	adds	r3, #80	; 0x50
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d10a      	bne.n	8001836 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001820:	78fa      	ldrb	r2, [r7, #3]
 8001822:	6879      	ldr	r1, [r7, #4]
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	440b      	add	r3, r1
 800182e:	3342      	adds	r3, #66	; 0x42
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]
      break;
 8001834:	e018      	b.n	8001868 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001836:	78fa      	ldrb	r2, [r7, #3]
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	440b      	add	r3, r1
 8001844:	3342      	adds	r3, #66	; 0x42
 8001846:	2202      	movs	r2, #2
 8001848:	701a      	strb	r2, [r3, #0]
      break;
 800184a:	e00d      	b.n	8001868 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800184c:	78fa      	ldrb	r2, [r7, #3]
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	440b      	add	r3, r1
 800185a:	3342      	adds	r3, #66	; 0x42
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
      break;
 8001860:	e002      	b.n	8001868 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001862:	bf00      	nop
 8001864:	e000      	b.n	8001868 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001866:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001868:	78fa      	ldrb	r2, [r7, #3]
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	440b      	add	r3, r1
 8001876:	3344      	adds	r3, #68	; 0x44
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800187c:	78fa      	ldrb	r2, [r7, #3]
 800187e:	8b39      	ldrh	r1, [r7, #24]
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	4403      	add	r3, r0
 800188c:	3348      	adds	r3, #72	; 0x48
 800188e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001890:	78fa      	ldrb	r2, [r7, #3]
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	00db      	lsls	r3, r3, #3
 800189c:	440b      	add	r3, r1
 800189e:	335c      	adds	r3, #92	; 0x5c
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80018a4:	78fa      	ldrb	r2, [r7, #3]
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	440b      	add	r3, r1
 80018b2:	334c      	adds	r3, #76	; 0x4c
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018b8:	78fa      	ldrb	r2, [r7, #3]
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	440b      	add	r3, r1
 80018c6:	3339      	adds	r3, #57	; 0x39
 80018c8:	78fa      	ldrb	r2, [r7, #3]
 80018ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80018cc:	78fa      	ldrb	r2, [r7, #3]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	440b      	add	r3, r1
 80018da:	335d      	adds	r3, #93	; 0x5d
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6818      	ldr	r0, [r3, #0]
 80018e4:	78fa      	ldrb	r2, [r7, #3]
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	3338      	adds	r3, #56	; 0x38
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	18d1      	adds	r1, r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	461a      	mov	r2, r3
 80018fc:	f003 fa08 	bl	8004d10 <USB_HC_StartXfer>
 8001900:	4603      	mov	r3, r0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop

0800190c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f002 ff67 	bl	80047f6 <USB_GetMode>
 8001928:	4603      	mov	r3, r0
 800192a:	2b01      	cmp	r3, #1
 800192c:	f040 80ef 	bne.w	8001b0e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f002 ff4b 	bl	80047d0 <USB_ReadInterrupts>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 80e5 	beq.w	8001b0c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f002 ff42 	bl	80047d0 <USB_ReadInterrupts>
 800194c:	4603      	mov	r3, r0
 800194e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001952:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001956:	d104      	bne.n	8001962 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001960:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f002 ff32 	bl	80047d0 <USB_ReadInterrupts>
 800196c:	4603      	mov	r3, r0
 800196e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001972:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001976:	d104      	bne.n	8001982 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001980:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f002 ff22 	bl	80047d0 <USB_ReadInterrupts>
 800198c:	4603      	mov	r3, r0
 800198e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001992:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001996:	d104      	bne.n	80019a2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f002 ff12 	bl	80047d0 <USB_ReadInterrupts>
 80019ac:	4603      	mov	r3, r0
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d103      	bne.n	80019be <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2202      	movs	r2, #2
 80019bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f002 ff04 	bl	80047d0 <USB_ReadInterrupts>
 80019c8:	4603      	mov	r3, r0
 80019ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019d2:	d115      	bne.n	8001a00 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019dc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d108      	bne.n	8001a00 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f004 fdda 	bl	80065a8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2101      	movs	r1, #1
 80019fa:	4618      	mov	r0, r3
 80019fc:	f002 fffa 	bl	80049f4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f002 fee3 	bl	80047d0 <USB_ReadInterrupts>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a14:	d102      	bne.n	8001a1c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f001 f94a 	bl	8002cb0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f002 fed5 	bl	80047d0 <USB_ReadInterrupts>
 8001a26:	4603      	mov	r3, r0
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	d106      	bne.n	8001a3e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f004 fd9d 	bl	8006570 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2208      	movs	r2, #8
 8001a3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f002 fec4 	bl	80047d0 <USB_ReadInterrupts>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a52:	d138      	bne.n	8001ac6 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f003 fa9f 	bl	8004f9c <USB_HC_ReadInterrupt>
 8001a5e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	e025      	b.n	8001ab2 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	f003 030f 	and.w	r3, r3, #15
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d018      	beq.n	8001aac <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	015a      	lsls	r2, r3, #5
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4413      	add	r3, r2
 8001a82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a90:	d106      	bne.n	8001aa0 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	4619      	mov	r1, r3
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 f8b3 	bl	8001c04 <HCD_HC_IN_IRQHandler>
 8001a9e:	e005      	b.n	8001aac <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 fce1 	bl	800246e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d3d4      	bcc.n	8001a66 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ac4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f002 fe80 	bl	80047d0 <USB_ReadInterrupts>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	2b10      	cmp	r3, #16
 8001ad8:	d101      	bne.n	8001ade <HAL_HCD_IRQHandler+0x1d2>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_HCD_IRQHandler+0x1d4>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d014      	beq.n	8001b0e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	699a      	ldr	r2, [r3, #24]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0210 	bic.w	r2, r2, #16
 8001af2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f001 f82f 	bl	8002b58 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	699a      	ldr	r2, [r3, #24]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f042 0210 	orr.w	r2, r2, #16
 8001b08:	619a      	str	r2, [r3, #24]
 8001b0a:	e000      	b.n	8001b0e <HAL_HCD_IRQHandler+0x202>
      return;
 8001b0c:	bf00      	nop
    }
  }
}
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d101      	bne.n	8001b2a <HAL_HCD_Start+0x16>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e013      	b.n	8001b52 <HAL_HCD_Start+0x3e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f002 fd57 	bl	80045ea <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2101      	movs	r1, #1
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 ff90 	bl	8004a68 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d101      	bne.n	8001b70 <HAL_HCD_Stop+0x16>
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	e00d      	b.n	8001b8c <HAL_HCD_Stop+0x32>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f003 fb59 	bl	8005234 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2200      	movs	r2, #0
 8001b86:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ba0:	78fa      	ldrb	r2, [r7, #3]
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	440b      	add	r3, r1
 8001bae:	335c      	adds	r3, #92	; 0x5c
 8001bb0:	781b      	ldrb	r3, [r3, #0]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001bca:	78fa      	ldrb	r2, [r7, #3]
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	440b      	add	r3, r1
 8001bd8:	334c      	adds	r3, #76	; 0x4c
 8001bda:	681b      	ldr	r3, [r3, #0]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f002 ff70 	bl	8004ada <USB_GetCurrentFrame>
 8001bfa:	4603      	mov	r3, r0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c1a:	78fb      	ldrb	r3, [r7, #3]
 8001c1c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	015a      	lsls	r2, r3, #5
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	4413      	add	r3, r2
 8001c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d119      	bne.n	8001c68 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	015a      	lsls	r2, r3, #5
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c40:	461a      	mov	r2, r3
 8001c42:	2304      	movs	r3, #4
 8001c44:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	015a      	lsls	r2, r3, #5
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	0151      	lsls	r1, r2, #5
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	440a      	add	r2, r1
 8001c5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c60:	f043 0302 	orr.w	r3, r3, #2
 8001c64:	60d3      	str	r3, [r2, #12]
 8001c66:	e0ce      	b.n	8001e06 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	015a      	lsls	r2, r3, #5
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4413      	add	r3, r2
 8001c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c7e:	d12c      	bne.n	8001cda <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	015a      	lsls	r2, r3, #5
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4413      	add	r3, r2
 8001c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c92:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	440b      	add	r3, r1
 8001ca2:	335d      	adds	r3, #93	; 0x5d
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	015a      	lsls	r2, r3, #5
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4413      	add	r3, r2
 8001cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	0151      	lsls	r1, r2, #5
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	440a      	add	r2, r1
 8001cbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cc2:	f043 0302 	orr.w	r3, r3, #2
 8001cc6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f003 f973 	bl	8004fbe <USB_HC_Halt>
 8001cd8:	e095      	b.n	8001e06 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	015a      	lsls	r2, r3, #5
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0320 	and.w	r3, r3, #32
 8001cec:	2b20      	cmp	r3, #32
 8001cee:	d109      	bne.n	8001d04 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	015a      	lsls	r2, r3, #5
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	2320      	movs	r3, #32
 8001d00:	6093      	str	r3, [r2, #8]
 8001d02:	e080      	b.n	8001e06 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	015a      	lsls	r2, r3, #5
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d134      	bne.n	8001d84 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	015a      	lsls	r2, r3, #5
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4413      	add	r3, r2
 8001d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	0151      	lsls	r1, r2, #5
 8001d2c:	693a      	ldr	r2, [r7, #16]
 8001d2e:	440a      	add	r2, r1
 8001d30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d34:	f043 0302 	orr.w	r3, r3, #2
 8001d38:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	00db      	lsls	r3, r3, #3
 8001d46:	440b      	add	r3, r1
 8001d48:	335d      	adds	r3, #93	; 0x5d
 8001d4a:	2205      	movs	r2, #5
 8001d4c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	015a      	lsls	r2, r3, #5
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4413      	add	r3, r2
 8001d56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	2310      	movs	r3, #16
 8001d5e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	015a      	lsls	r2, r3, #5
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	4413      	add	r3, r2
 8001d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	2308      	movs	r3, #8
 8001d70:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f003 f91e 	bl	8004fbe <USB_HC_Halt>
 8001d82:	e040      	b.n	8001e06 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	015a      	lsls	r2, r3, #5
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d9a:	d134      	bne.n	8001e06 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	015a      	lsls	r2, r3, #5
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	4413      	add	r3, r2
 8001da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	0151      	lsls	r1, r2, #5
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	440a      	add	r2, r1
 8001db2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001db6:	f043 0302 	orr.w	r3, r3, #2
 8001dba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f003 f8f9 	bl	8004fbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	015a      	lsls	r2, r3, #5
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd8:	461a      	mov	r2, r3
 8001dda:	2310      	movs	r3, #16
 8001ddc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	440b      	add	r3, r1
 8001dec:	335d      	adds	r3, #93	; 0x5d
 8001dee:	2208      	movs	r2, #8
 8001df0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	015a      	lsls	r2, r3, #5
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4413      	add	r3, r2
 8001dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dfe:	461a      	mov	r2, r3
 8001e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e04:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	015a      	lsls	r2, r3, #5
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e1c:	d122      	bne.n	8001e64 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	015a      	lsls	r2, r3, #5
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4413      	add	r3, r2
 8001e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	0151      	lsls	r1, r2, #5
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	440a      	add	r2, r1
 8001e34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e38:	f043 0302 	orr.w	r3, r3, #2
 8001e3c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f003 f8b8 	bl	8004fbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	015a      	lsls	r2, r3, #5
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4413      	add	r3, r2
 8001e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e60:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e62:	e300      	b.n	8002466 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	015a      	lsls	r2, r3, #5
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	f040 80fd 	bne.w	8002076 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d01b      	beq.n	8001ebc <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001e84:	6879      	ldr	r1, [r7, #4]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	440b      	add	r3, r1
 8001e92:	3348      	adds	r3, #72	; 0x48
 8001e94:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	0159      	lsls	r1, r3, #5
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	440b      	add	r3, r1
 8001e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001ea8:	1ad1      	subs	r1, r2, r3
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	4403      	add	r3, r0
 8001eb8:	334c      	adds	r3, #76	; 0x4c
 8001eba:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	440b      	add	r3, r1
 8001eca:	335d      	adds	r3, #93	; 0x5d
 8001ecc:	2201      	movs	r2, #1
 8001ece:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4413      	add	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	440b      	add	r3, r1
 8001ede:	3358      	adds	r3, #88	; 0x58
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	015a      	lsls	r2, r3, #5
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4413      	add	r3, r2
 8001eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	440b      	add	r3, r1
 8001f04:	333f      	adds	r3, #63	; 0x3f
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00a      	beq.n	8001f22 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	440b      	add	r3, r1
 8001f1a:	333f      	adds	r3, #63	; 0x3f
 8001f1c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d121      	bne.n	8001f66 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	0151      	lsls	r1, r2, #5
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	440a      	add	r2, r1
 8001f38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f003 f836 	bl	8004fbe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	015a      	lsls	r2, r3, #5
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4413      	add	r3, r2
 8001f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5e:	461a      	mov	r2, r3
 8001f60:	2310      	movs	r3, #16
 8001f62:	6093      	str	r3, [r2, #8]
 8001f64:	e070      	b.n	8002048 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	440b      	add	r3, r1
 8001f74:	333f      	adds	r3, #63	; 0x3f
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b03      	cmp	r3, #3
 8001f7a:	d12a      	bne.n	8001fd2 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	015a      	lsls	r2, r3, #5
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4413      	add	r3, r2
 8001f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	0151      	lsls	r1, r2, #5
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	440a      	add	r2, r1
 8001f92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f9a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	440b      	add	r3, r1
 8001faa:	335c      	adds	r3, #92	; 0x5c
 8001fac:	2201      	movs	r2, #1
 8001fae:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	b2d8      	uxtb	r0, r3
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	440b      	add	r3, r1
 8001fc2:	335c      	adds	r3, #92	; 0x5c
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4601      	mov	r1, r0
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f004 fafa 	bl	80065c4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001fd0:	e03a      	b.n	8002048 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	440b      	add	r3, r1
 8001fe0:	333f      	adds	r3, #63	; 0x3f
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d12f      	bne.n	8002048 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	440b      	add	r3, r1
 8001ff6:	335c      	adds	r3, #92	; 0x5c
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	440b      	add	r3, r1
 800200a:	3350      	adds	r3, #80	; 0x50
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	f083 0301 	eor.w	r3, r3, #1
 8002012:	b2d8      	uxtb	r0, r3
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	440b      	add	r3, r1
 8002022:	3350      	adds	r3, #80	; 0x50
 8002024:	4602      	mov	r2, r0
 8002026:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	b2d8      	uxtb	r0, r3
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	440b      	add	r3, r1
 800203a:	335c      	adds	r3, #92	; 0x5c
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	4601      	mov	r1, r0
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f004 fabe 	bl	80065c4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	440b      	add	r3, r1
 8002056:	3350      	adds	r3, #80	; 0x50
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	f083 0301 	eor.w	r3, r3, #1
 800205e:	b2d8      	uxtb	r0, r3
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	440b      	add	r3, r1
 800206e:	3350      	adds	r3, #80	; 0x50
 8002070:	4602      	mov	r2, r0
 8002072:	701a      	strb	r2, [r3, #0]
}
 8002074:	e1f7      	b.n	8002466 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	015a      	lsls	r2, r3, #5
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4413      	add	r3, r2
 800207e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b02      	cmp	r3, #2
 800208a:	f040 811a 	bne.w	80022c2 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	015a      	lsls	r2, r3, #5
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4413      	add	r3, r2
 8002096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	0151      	lsls	r1, r2, #5
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	440a      	add	r2, r1
 80020a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020a8:	f023 0302 	bic.w	r3, r3, #2
 80020ac:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80020ae:	6879      	ldr	r1, [r7, #4]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	440b      	add	r3, r1
 80020bc:	335d      	adds	r3, #93	; 0x5d
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d10a      	bne.n	80020da <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	440b      	add	r3, r1
 80020d2:	335c      	adds	r3, #92	; 0x5c
 80020d4:	2201      	movs	r2, #1
 80020d6:	701a      	strb	r2, [r3, #0]
 80020d8:	e0d9      	b.n	800228e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	440b      	add	r3, r1
 80020e8:	335d      	adds	r3, #93	; 0x5d
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b05      	cmp	r3, #5
 80020ee:	d10a      	bne.n	8002106 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	440b      	add	r3, r1
 80020fe:	335c      	adds	r3, #92	; 0x5c
 8002100:	2205      	movs	r2, #5
 8002102:	701a      	strb	r2, [r3, #0]
 8002104:	e0c3      	b.n	800228e <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	440b      	add	r3, r1
 8002114:	335d      	adds	r3, #93	; 0x5d
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b06      	cmp	r3, #6
 800211a:	d00a      	beq.n	8002132 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	440b      	add	r3, r1
 800212a:	335d      	adds	r3, #93	; 0x5d
 800212c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800212e:	2b08      	cmp	r3, #8
 8002130:	d156      	bne.n	80021e0 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	440b      	add	r3, r1
 8002140:	3358      	adds	r3, #88	; 0x58
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	1c59      	adds	r1, r3, #1
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4403      	add	r3, r0
 8002154:	3358      	adds	r3, #88	; 0x58
 8002156:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	440b      	add	r3, r1
 8002166:	3358      	adds	r3, #88	; 0x58
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b03      	cmp	r3, #3
 800216c:	d914      	bls.n	8002198 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	440b      	add	r3, r1
 800217c:	3358      	adds	r3, #88	; 0x58
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	440b      	add	r3, r1
 8002190:	335c      	adds	r3, #92	; 0x5c
 8002192:	2204      	movs	r2, #4
 8002194:	701a      	strb	r2, [r3, #0]
 8002196:	e009      	b.n	80021ac <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	440b      	add	r3, r1
 80021a6:	335c      	adds	r3, #92	; 0x5c
 80021a8:	2202      	movs	r2, #2
 80021aa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	015a      	lsls	r2, r3, #5
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4413      	add	r3, r2
 80021b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021c2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021ca:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d8:	461a      	mov	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	6013      	str	r3, [r2, #0]
 80021de:	e056      	b.n	800228e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	4613      	mov	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4413      	add	r3, r2
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	440b      	add	r3, r1
 80021ee:	335d      	adds	r3, #93	; 0x5d
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d123      	bne.n	800223e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	440b      	add	r3, r1
 8002204:	335c      	adds	r3, #92	; 0x5c
 8002206:	2202      	movs	r2, #2
 8002208:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4413      	add	r3, r2
 8002212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002220:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002228:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	015a      	lsls	r2, r3, #5
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4413      	add	r3, r2
 8002232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002236:	461a      	mov	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	6013      	str	r3, [r2, #0]
 800223c:	e027      	b.n	800228e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	68fa      	ldr	r2, [r7, #12]
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	440b      	add	r3, r1
 800224c:	335d      	adds	r3, #93	; 0x5d
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b07      	cmp	r3, #7
 8002252:	d11c      	bne.n	800228e <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	440b      	add	r3, r1
 8002262:	3358      	adds	r3, #88	; 0x58
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	1c59      	adds	r1, r3, #1
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	4403      	add	r3, r0
 8002276:	3358      	adds	r3, #88	; 0x58
 8002278:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	440b      	add	r3, r1
 8002288:	335c      	adds	r3, #92	; 0x5c
 800228a:	2204      	movs	r2, #4
 800228c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4413      	add	r3, r2
 8002296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229a:	461a      	mov	r2, r3
 800229c:	2302      	movs	r3, #2
 800229e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	b2d8      	uxtb	r0, r3
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	440b      	add	r3, r1
 80022b2:	335c      	adds	r3, #92	; 0x5c
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	461a      	mov	r2, r3
 80022b8:	4601      	mov	r1, r0
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f004 f982 	bl	80065c4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80022c0:	e0d1      	b.n	8002466 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	015a      	lsls	r2, r3, #5
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d4:	2b80      	cmp	r3, #128	; 0x80
 80022d6:	d13e      	bne.n	8002356 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	015a      	lsls	r2, r3, #5
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	0151      	lsls	r1, r2, #5
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	440a      	add	r2, r1
 80022ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022f2:	f043 0302 	orr.w	r3, r3, #2
 80022f6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	440b      	add	r3, r1
 8002306:	3358      	adds	r3, #88	; 0x58
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	1c59      	adds	r1, r3, #1
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	4613      	mov	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4413      	add	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4403      	add	r3, r0
 800231a:	3358      	adds	r3, #88	; 0x58
 800231c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	440b      	add	r3, r1
 800232c:	335d      	adds	r3, #93	; 0x5d
 800232e:	2206      	movs	r2, #6
 8002330:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	4611      	mov	r1, r2
 800233c:	4618      	mov	r0, r3
 800233e:	f002 fe3e 	bl	8004fbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	015a      	lsls	r2, r3, #5
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	4413      	add	r3, r2
 800234a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800234e:	461a      	mov	r2, r3
 8002350:	2380      	movs	r3, #128	; 0x80
 8002352:	6093      	str	r3, [r2, #8]
}
 8002354:	e087      	b.n	8002466 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	015a      	lsls	r2, r3, #5
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4413      	add	r3, r2
 800235e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 0310 	and.w	r3, r3, #16
 8002368:	2b10      	cmp	r3, #16
 800236a:	d17c      	bne.n	8002466 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	4613      	mov	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	440b      	add	r3, r1
 800237a:	333f      	adds	r3, #63	; 0x3f
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b03      	cmp	r3, #3
 8002380:	d122      	bne.n	80023c8 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	440b      	add	r3, r1
 8002390:	3358      	adds	r3, #88	; 0x58
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	015a      	lsls	r2, r3, #5
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4413      	add	r3, r2
 800239e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	0151      	lsls	r1, r2, #5
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	440a      	add	r2, r1
 80023ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	4611      	mov	r1, r2
 80023c0:	4618      	mov	r0, r3
 80023c2:	f002 fdfc 	bl	8004fbe <USB_HC_Halt>
 80023c6:	e045      	b.n	8002454 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	440b      	add	r3, r1
 80023d6:	333f      	adds	r3, #63	; 0x3f
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00a      	beq.n	80023f4 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	4613      	mov	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	440b      	add	r3, r1
 80023ec:	333f      	adds	r3, #63	; 0x3f
 80023ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d12f      	bne.n	8002454 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	4613      	mov	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	4413      	add	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	440b      	add	r3, r1
 8002402:	3358      	adds	r3, #88	; 0x58
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d121      	bne.n	8002454 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	440b      	add	r3, r1
 800241e:	335d      	adds	r3, #93	; 0x5d
 8002420:	2203      	movs	r2, #3
 8002422:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	015a      	lsls	r2, r3, #5
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4413      	add	r3, r2
 800242c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	0151      	lsls	r1, r2, #5
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	440a      	add	r2, r1
 800243a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800243e:	f043 0302 	orr.w	r3, r3, #2
 8002442:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	4611      	mov	r1, r2
 800244e:	4618      	mov	r0, r3
 8002450:	f002 fdb5 	bl	8004fbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	015a      	lsls	r2, r3, #5
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4413      	add	r3, r2
 800245c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002460:	461a      	mov	r2, r3
 8002462:	2310      	movs	r3, #16
 8002464:	6093      	str	r3, [r2, #8]
}
 8002466:	bf00      	nop
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b086      	sub	sp, #24
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	460b      	mov	r3, r1
 8002478:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002484:	78fb      	ldrb	r3, [r7, #3]
 8002486:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	015a      	lsls	r2, r3, #5
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4413      	add	r3, r2
 8002490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b04      	cmp	r3, #4
 800249c:	d119      	bne.n	80024d2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	015a      	lsls	r2, r3, #5
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4413      	add	r3, r2
 80024a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024aa:	461a      	mov	r2, r3
 80024ac:	2304      	movs	r3, #4
 80024ae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	0151      	lsls	r1, r2, #5
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	440a      	add	r2, r1
 80024c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024ca:	f043 0302 	orr.w	r3, r3, #2
 80024ce:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80024d0:	e33e      	b.n	8002b50 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	015a      	lsls	r2, r3, #5
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	4413      	add	r3, r2
 80024da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 0320 	and.w	r3, r3, #32
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	d141      	bne.n	800256c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f4:	461a      	mov	r2, r3
 80024f6:	2320      	movs	r3, #32
 80024f8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	440b      	add	r3, r1
 8002508:	333d      	adds	r3, #61	; 0x3d
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b01      	cmp	r3, #1
 800250e:	f040 831f 	bne.w	8002b50 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	440b      	add	r3, r1
 8002520:	333d      	adds	r3, #61	; 0x3d
 8002522:	2200      	movs	r2, #0
 8002524:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	440b      	add	r3, r1
 8002534:	335c      	adds	r3, #92	; 0x5c
 8002536:	2202      	movs	r2, #2
 8002538:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	015a      	lsls	r2, r3, #5
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4413      	add	r3, r2
 8002542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	0151      	lsls	r1, r2, #5
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	440a      	add	r2, r1
 8002550:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	4611      	mov	r1, r2
 8002564:	4618      	mov	r0, r3
 8002566:	f002 fd2a 	bl	8004fbe <USB_HC_Halt>
}
 800256a:	e2f1      	b.n	8002b50 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	015a      	lsls	r2, r3, #5
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4413      	add	r3, r2
 8002574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257e:	2b40      	cmp	r3, #64	; 0x40
 8002580:	d13f      	bne.n	8002602 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	4613      	mov	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	440b      	add	r3, r1
 8002590:	335d      	adds	r3, #93	; 0x5d
 8002592:	2204      	movs	r2, #4
 8002594:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	440b      	add	r3, r1
 80025a4:	333d      	adds	r3, #61	; 0x3d
 80025a6:	2201      	movs	r2, #1
 80025a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	440b      	add	r3, r1
 80025b8:	3358      	adds	r3, #88	; 0x58
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	015a      	lsls	r2, r3, #5
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4413      	add	r3, r2
 80025c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	68fa      	ldr	r2, [r7, #12]
 80025ce:	0151      	lsls	r1, r2, #5
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	440a      	add	r2, r1
 80025d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025d8:	f043 0302 	orr.w	r3, r3, #2
 80025dc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f002 fce8 	bl	8004fbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	015a      	lsls	r2, r3, #5
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4413      	add	r3, r2
 80025f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fa:	461a      	mov	r2, r3
 80025fc:	2340      	movs	r3, #64	; 0x40
 80025fe:	6093      	str	r3, [r2, #8]
}
 8002600:	e2a6      	b.n	8002b50 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	015a      	lsls	r2, r3, #5
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4413      	add	r3, r2
 800260a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002618:	d122      	bne.n	8002660 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	015a      	lsls	r2, r3, #5
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	4413      	add	r3, r2
 8002622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	0151      	lsls	r1, r2, #5
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	440a      	add	r2, r1
 8002630:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002634:	f043 0302 	orr.w	r3, r3, #2
 8002638:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	4611      	mov	r1, r2
 8002644:	4618      	mov	r0, r3
 8002646:	f002 fcba 	bl	8004fbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4413      	add	r3, r2
 8002652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002656:	461a      	mov	r2, r3
 8002658:	f44f 7300 	mov.w	r3, #512	; 0x200
 800265c:	6093      	str	r3, [r2, #8]
}
 800265e:	e277      	b.n	8002b50 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4413      	add	r3, r2
 8002668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b01      	cmp	r3, #1
 8002674:	d135      	bne.n	80026e2 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	440b      	add	r3, r1
 8002684:	3358      	adds	r3, #88	; 0x58
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4413      	add	r3, r2
 8002692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	0151      	lsls	r1, r2, #5
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	440a      	add	r2, r1
 80026a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026a4:	f043 0302 	orr.w	r3, r3, #2
 80026a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f002 fc82 	bl	8004fbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	015a      	lsls	r2, r3, #5
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4413      	add	r3, r2
 80026c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c6:	461a      	mov	r2, r3
 80026c8:	2301      	movs	r3, #1
 80026ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	440b      	add	r3, r1
 80026da:	335d      	adds	r3, #93	; 0x5d
 80026dc:	2201      	movs	r2, #1
 80026de:	701a      	strb	r2, [r3, #0]
}
 80026e0:	e236      	b.n	8002b50 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d12b      	bne.n	8002750 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	015a      	lsls	r2, r3, #5
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4413      	add	r3, r2
 8002700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002704:	461a      	mov	r2, r3
 8002706:	2308      	movs	r3, #8
 8002708:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4413      	add	r3, r2
 8002712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	0151      	lsls	r1, r2, #5
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	440a      	add	r2, r1
 8002720:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002724:	f043 0302 	orr.w	r3, r3, #2
 8002728:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	4611      	mov	r1, r2
 8002734:	4618      	mov	r0, r3
 8002736:	f002 fc42 	bl	8004fbe <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	440b      	add	r3, r1
 8002748:	335d      	adds	r3, #93	; 0x5d
 800274a:	2205      	movs	r2, #5
 800274c:	701a      	strb	r2, [r3, #0]
}
 800274e:	e1ff      	b.n	8002b50 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4413      	add	r3, r2
 8002758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	2b10      	cmp	r3, #16
 8002764:	d155      	bne.n	8002812 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	440b      	add	r3, r1
 8002774:	3358      	adds	r3, #88	; 0x58
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	4613      	mov	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	4413      	add	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	440b      	add	r3, r1
 8002788:	335d      	adds	r3, #93	; 0x5d
 800278a:	2203      	movs	r2, #3
 800278c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	440b      	add	r3, r1
 800279c:	333d      	adds	r3, #61	; 0x3d
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d114      	bne.n	80027ce <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	440b      	add	r3, r1
 80027b2:	333c      	adds	r3, #60	; 0x3c
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d109      	bne.n	80027ce <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	440b      	add	r3, r1
 80027c8:	333d      	adds	r3, #61	; 0x3d
 80027ca:	2201      	movs	r2, #1
 80027cc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	0151      	lsls	r1, r2, #5
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	440a      	add	r2, r1
 80027e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027e8:	f043 0302 	orr.w	r3, r3, #2
 80027ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f002 fbe0 	bl	8004fbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4413      	add	r3, r2
 8002806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280a:	461a      	mov	r2, r3
 800280c:	2310      	movs	r3, #16
 800280e:	6093      	str	r3, [r2, #8]
}
 8002810:	e19e      	b.n	8002b50 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	015a      	lsls	r2, r3, #5
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	4413      	add	r3, r2
 800281a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002824:	2b80      	cmp	r3, #128	; 0x80
 8002826:	d12b      	bne.n	8002880 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4413      	add	r3, r2
 8002830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	0151      	lsls	r1, r2, #5
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	440a      	add	r2, r1
 800283e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002842:	f043 0302 	orr.w	r3, r3, #2
 8002846:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	4611      	mov	r1, r2
 8002852:	4618      	mov	r0, r3
 8002854:	f002 fbb3 	bl	8004fbe <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002858:	6879      	ldr	r1, [r7, #4]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	440b      	add	r3, r1
 8002866:	335d      	adds	r3, #93	; 0x5d
 8002868:	2206      	movs	r2, #6
 800286a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4413      	add	r3, r2
 8002874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002878:	461a      	mov	r2, r3
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	6093      	str	r3, [r2, #8]
}
 800287e:	e167      	b.n	8002b50 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	015a      	lsls	r2, r3, #5
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4413      	add	r3, r2
 8002888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002896:	d135      	bne.n	8002904 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	015a      	lsls	r2, r3, #5
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4413      	add	r3, r2
 80028a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	0151      	lsls	r1, r2, #5
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	440a      	add	r2, r1
 80028ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028b2:	f043 0302 	orr.w	r3, r3, #2
 80028b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	4611      	mov	r1, r2
 80028c2:	4618      	mov	r0, r3
 80028c4:	f002 fb7b 	bl	8004fbe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	015a      	lsls	r2, r3, #5
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	4413      	add	r3, r2
 80028d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d4:	461a      	mov	r2, r3
 80028d6:	2310      	movs	r3, #16
 80028d8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e6:	461a      	mov	r2, r3
 80028e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	440b      	add	r3, r1
 80028fc:	335d      	adds	r3, #93	; 0x5d
 80028fe:	2208      	movs	r2, #8
 8002900:	701a      	strb	r2, [r3, #0]
}
 8002902:	e125      	b.n	8002b50 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	015a      	lsls	r2, r3, #5
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	4413      	add	r3, r2
 800290c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b02      	cmp	r3, #2
 8002918:	f040 811a 	bne.w	8002b50 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4413      	add	r3, r2
 8002924:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	0151      	lsls	r1, r2, #5
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	440a      	add	r2, r1
 8002932:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002936:	f023 0302 	bic.w	r3, r3, #2
 800293a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	440b      	add	r3, r1
 800294a:	335d      	adds	r3, #93	; 0x5d
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d137      	bne.n	80029c2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	440b      	add	r3, r1
 8002960:	335c      	adds	r3, #92	; 0x5c
 8002962:	2201      	movs	r2, #1
 8002964:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	440b      	add	r3, r1
 8002974:	333f      	adds	r3, #63	; 0x3f
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d00b      	beq.n	8002994 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	440b      	add	r3, r1
 800298a:	333f      	adds	r3, #63	; 0x3f
 800298c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800298e:	2b03      	cmp	r3, #3
 8002990:	f040 80c5 	bne.w	8002b1e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	440b      	add	r3, r1
 80029a2:	3351      	adds	r3, #81	; 0x51
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	f083 0301 	eor.w	r3, r3, #1
 80029aa:	b2d8      	uxtb	r0, r3
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	440b      	add	r3, r1
 80029ba:	3351      	adds	r3, #81	; 0x51
 80029bc:	4602      	mov	r2, r0
 80029be:	701a      	strb	r2, [r3, #0]
 80029c0:	e0ad      	b.n	8002b1e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	4613      	mov	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	440b      	add	r3, r1
 80029d0:	335d      	adds	r3, #93	; 0x5d
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d10a      	bne.n	80029ee <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	440b      	add	r3, r1
 80029e6:	335c      	adds	r3, #92	; 0x5c
 80029e8:	2202      	movs	r2, #2
 80029ea:	701a      	strb	r2, [r3, #0]
 80029ec:	e097      	b.n	8002b1e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	440b      	add	r3, r1
 80029fc:	335d      	adds	r3, #93	; 0x5d
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d10a      	bne.n	8002a1a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	440b      	add	r3, r1
 8002a12:	335c      	adds	r3, #92	; 0x5c
 8002a14:	2202      	movs	r2, #2
 8002a16:	701a      	strb	r2, [r3, #0]
 8002a18:	e081      	b.n	8002b1e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	440b      	add	r3, r1
 8002a28:	335d      	adds	r3, #93	; 0x5d
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b05      	cmp	r3, #5
 8002a2e:	d10a      	bne.n	8002a46 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	440b      	add	r3, r1
 8002a3e:	335c      	adds	r3, #92	; 0x5c
 8002a40:	2205      	movs	r2, #5
 8002a42:	701a      	strb	r2, [r3, #0]
 8002a44:	e06b      	b.n	8002b1e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	68fa      	ldr	r2, [r7, #12]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	440b      	add	r3, r1
 8002a54:	335d      	adds	r3, #93	; 0x5d
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b06      	cmp	r3, #6
 8002a5a:	d00a      	beq.n	8002a72 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	440b      	add	r3, r1
 8002a6a:	335d      	adds	r3, #93	; 0x5d
 8002a6c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d155      	bne.n	8002b1e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	440b      	add	r3, r1
 8002a80:	3358      	adds	r3, #88	; 0x58
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	1c59      	adds	r1, r3, #1
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	4403      	add	r3, r0
 8002a94:	3358      	adds	r3, #88	; 0x58
 8002a96:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	440b      	add	r3, r1
 8002aa6:	3358      	adds	r3, #88	; 0x58
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	d914      	bls.n	8002ad8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	00db      	lsls	r3, r3, #3
 8002aba:	440b      	add	r3, r1
 8002abc:	3358      	adds	r3, #88	; 0x58
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	440b      	add	r3, r1
 8002ad0:	335c      	adds	r3, #92	; 0x5c
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	701a      	strb	r2, [r3, #0]
 8002ad6:	e009      	b.n	8002aec <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	440b      	add	r3, r1
 8002ae6:	335c      	adds	r3, #92	; 0x5c
 8002ae8:	2202      	movs	r2, #2
 8002aea:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b02:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b0a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	015a      	lsls	r2, r3, #5
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4413      	add	r3, r2
 8002b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b18:	461a      	mov	r2, r3
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	b2d8      	uxtb	r0, r3
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	440b      	add	r3, r1
 8002b42:	335c      	adds	r3, #92	; 0x5c
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	461a      	mov	r2, r3
 8002b48:	4601      	mov	r1, r0
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f003 fd3a 	bl	80065c4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b50:	bf00      	nop
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08a      	sub	sp, #40	; 0x28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	f003 030f 	and.w	r3, r3, #15
 8002b78:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	0c5b      	lsrs	r3, r3, #17
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	091b      	lsrs	r3, r3, #4
 8002b88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b8c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d003      	beq.n	8002b9c <HCD_RXQLVL_IRQHandler+0x44>
 8002b94:	2b05      	cmp	r3, #5
 8002b96:	f000 8082 	beq.w	8002c9e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b9a:	e083      	b.n	8002ca4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d07f      	beq.n	8002ca2 <HCD_RXQLVL_IRQHandler+0x14a>
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	440b      	add	r3, r1
 8002bb0:	3344      	adds	r3, #68	; 0x44
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d074      	beq.n	8002ca2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6818      	ldr	r0, [r3, #0]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	440b      	add	r3, r1
 8002bca:	3344      	adds	r3, #68	; 0x44
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	b292      	uxth	r2, r2
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	f001 fdd3 	bl	800477e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	440b      	add	r3, r1
 8002be6:	3344      	adds	r3, #68	; 0x44
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	18d1      	adds	r1, r2, r3
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4403      	add	r3, r0
 8002bfc:	3344      	adds	r3, #68	; 0x44
 8002bfe:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	440b      	add	r3, r1
 8002c0e:	334c      	adds	r3, #76	; 0x4c
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	18d1      	adds	r1, r2, r3
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	4403      	add	r3, r0
 8002c24:	334c      	adds	r3, #76	; 0x4c
 8002c26:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	015a      	lsls	r2, r3, #5
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c34:	691a      	ldr	r2, [r3, #16]
 8002c36:	4b1d      	ldr	r3, [pc, #116]	; (8002cac <HCD_RXQLVL_IRQHandler+0x154>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d031      	beq.n	8002ca2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c54:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c5c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	015a      	lsls	r2, r3, #5
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4613      	mov	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	440b      	add	r3, r1
 8002c7e:	3350      	adds	r3, #80	; 0x50
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	f083 0301 	eor.w	r3, r3, #1
 8002c86:	b2d8      	uxtb	r0, r3
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	440b      	add	r3, r1
 8002c96:	3350      	adds	r3, #80	; 0x50
 8002c98:	4602      	mov	r2, r0
 8002c9a:	701a      	strb	r2, [r3, #0]
      break;
 8002c9c:	e001      	b.n	8002ca2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002c9e:	bf00      	nop
 8002ca0:	e000      	b.n	8002ca4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002ca2:	bf00      	nop
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	3728      	adds	r7, #40	; 0x28
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	1ff80000 	.word	0x1ff80000

08002cb0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002cdc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d10b      	bne.n	8002d00 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d102      	bne.n	8002cf8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f003 fc4a 	bl	800658c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f043 0302 	orr.w	r3, r3, #2
 8002cfe:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d132      	bne.n	8002d70 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f043 0308 	orr.w	r3, r3, #8
 8002d10:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d126      	bne.n	8002d6a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d113      	bne.n	8002d4c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d2e:	d106      	bne.n	8002d3e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2102      	movs	r1, #2
 8002d36:	4618      	mov	r0, r3
 8002d38:	f001 fe5c 	bl	80049f4 <USB_InitFSLSPClkSel>
 8002d3c:	e011      	b.n	8002d62 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2101      	movs	r1, #1
 8002d44:	4618      	mov	r0, r3
 8002d46:	f001 fe55 	bl	80049f4 <USB_InitFSLSPClkSel>
 8002d4a:	e00a      	b.n	8002d62 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d106      	bne.n	8002d62 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d60:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f003 fc3c 	bl	80065e0 <HAL_HCD_PortEnabled_Callback>
 8002d68:	e002      	b.n	8002d70 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f003 fc46 	bl	80065fc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f003 0320 	and.w	r3, r3, #32
 8002d76:	2b20      	cmp	r3, #32
 8002d78:	d103      	bne.n	8002d82 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	f043 0320 	orr.w	r3, r3, #32
 8002d80:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d88:	461a      	mov	r2, r3
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	6013      	str	r3, [r2, #0]
}
 8002d8e:	bf00      	nop
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e11f      	b.n	8002fea <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d106      	bne.n	8002dc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7fd fdfa 	bl	80009b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2224      	movs	r2, #36	; 0x24
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0201 	bic.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dfc:	f001 f9de 	bl	80041bc <HAL_RCC_GetPCLK1Freq>
 8002e00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4a7b      	ldr	r2, [pc, #492]	; (8002ff4 <HAL_I2C_Init+0x25c>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d807      	bhi.n	8002e1c <HAL_I2C_Init+0x84>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4a7a      	ldr	r2, [pc, #488]	; (8002ff8 <HAL_I2C_Init+0x260>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	bf94      	ite	ls
 8002e14:	2301      	movls	r3, #1
 8002e16:	2300      	movhi	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	e006      	b.n	8002e2a <HAL_I2C_Init+0x92>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4a77      	ldr	r2, [pc, #476]	; (8002ffc <HAL_I2C_Init+0x264>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	bf94      	ite	ls
 8002e24:	2301      	movls	r3, #1
 8002e26:	2300      	movhi	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e0db      	b.n	8002fea <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	4a72      	ldr	r2, [pc, #456]	; (8003000 <HAL_I2C_Init+0x268>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	0c9b      	lsrs	r3, r3, #18
 8002e3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	4a64      	ldr	r2, [pc, #400]	; (8002ff4 <HAL_I2C_Init+0x25c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d802      	bhi.n	8002e6c <HAL_I2C_Init+0xd4>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	e009      	b.n	8002e80 <HAL_I2C_Init+0xe8>
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e72:	fb02 f303 	mul.w	r3, r2, r3
 8002e76:	4a63      	ldr	r2, [pc, #396]	; (8003004 <HAL_I2C_Init+0x26c>)
 8002e78:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7c:	099b      	lsrs	r3, r3, #6
 8002e7e:	3301      	adds	r3, #1
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	430b      	orrs	r3, r1
 8002e86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	4956      	ldr	r1, [pc, #344]	; (8002ff4 <HAL_I2C_Init+0x25c>)
 8002e9c:	428b      	cmp	r3, r1
 8002e9e:	d80d      	bhi.n	8002ebc <HAL_I2C_Init+0x124>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	1e59      	subs	r1, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eae:	3301      	adds	r3, #1
 8002eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	bf38      	it	cc
 8002eb8:	2304      	movcc	r3, #4
 8002eba:	e04f      	b.n	8002f5c <HAL_I2C_Init+0x1c4>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d111      	bne.n	8002ee8 <HAL_I2C_Init+0x150>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	1e58      	subs	r0, r3, #1
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6859      	ldr	r1, [r3, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	440b      	add	r3, r1
 8002ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	bf0c      	ite	eq
 8002ee0:	2301      	moveq	r3, #1
 8002ee2:	2300      	movne	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	e012      	b.n	8002f0e <HAL_I2C_Init+0x176>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	1e58      	subs	r0, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6859      	ldr	r1, [r3, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	0099      	lsls	r1, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002efe:	3301      	adds	r3, #1
 8002f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	bf0c      	ite	eq
 8002f08:	2301      	moveq	r3, #1
 8002f0a:	2300      	movne	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_I2C_Init+0x17e>
 8002f12:	2301      	movs	r3, #1
 8002f14:	e022      	b.n	8002f5c <HAL_I2C_Init+0x1c4>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10e      	bne.n	8002f3c <HAL_I2C_Init+0x1a4>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1e58      	subs	r0, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6859      	ldr	r1, [r3, #4]
 8002f26:	460b      	mov	r3, r1
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	440b      	add	r3, r1
 8002f2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f30:	3301      	adds	r3, #1
 8002f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f3a:	e00f      	b.n	8002f5c <HAL_I2C_Init+0x1c4>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	1e58      	subs	r0, r3, #1
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6859      	ldr	r1, [r3, #4]
 8002f44:	460b      	mov	r3, r1
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	0099      	lsls	r1, r3, #2
 8002f4c:	440b      	add	r3, r1
 8002f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f52:	3301      	adds	r3, #1
 8002f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	6809      	ldr	r1, [r1, #0]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69da      	ldr	r2, [r3, #28]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6911      	ldr	r1, [r2, #16]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	68d2      	ldr	r2, [r2, #12]
 8002f96:	4311      	orrs	r1, r2
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	430b      	orrs	r3, r1
 8002f9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695a      	ldr	r2, [r3, #20]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f042 0201 	orr.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	000186a0 	.word	0x000186a0
 8002ff8:	001e847f 	.word	0x001e847f
 8002ffc:	003d08ff 	.word	0x003d08ff
 8003000:	431bde83 	.word	0x431bde83
 8003004:	10624dd3 	.word	0x10624dd3

08003008 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e128      	b.n	800326c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a90      	ldr	r2, [pc, #576]	; (8003274 <HAL_I2S_Init+0x26c>)
 8003032:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7fd fd07 	bl	8000a48 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2202      	movs	r2, #2
 800303e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003050:	f023 030f 	bic.w	r3, r3, #15
 8003054:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2202      	movs	r2, #2
 800305c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d060      	beq.n	8003128 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d102      	bne.n	8003074 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800306e:	2310      	movs	r3, #16
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	e001      	b.n	8003078 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003074:	2320      	movs	r3, #32
 8003076:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b20      	cmp	r3, #32
 800307e:	d802      	bhi.n	8003086 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003086:	2001      	movs	r0, #1
 8003088:	f001 f98e 	bl	80043a8 <HAL_RCCEx_GetPeriphCLKFreq>
 800308c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003096:	d125      	bne.n	80030e4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d010      	beq.n	80030c2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	461a      	mov	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030bc:	3305      	adds	r3, #5
 80030be:	613b      	str	r3, [r7, #16]
 80030c0:	e01f      	b.n	8003102 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	461a      	mov	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	fbb2 f3f3 	udiv	r3, r2, r3
 80030de:	3305      	adds	r3, #5
 80030e0:	613b      	str	r3, [r7, #16]
 80030e2:	e00e      	b.n	8003102 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	461a      	mov	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80030fe:	3305      	adds	r3, #5
 8003100:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4a5c      	ldr	r2, [pc, #368]	; (8003278 <HAL_I2S_Init+0x270>)
 8003106:	fba2 2303 	umull	r2, r3, r2, r3
 800310a:	08db      	lsrs	r3, r3, #3
 800310c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	085b      	lsrs	r3, r3, #1
 800311e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	021b      	lsls	r3, r3, #8
 8003124:	61bb      	str	r3, [r7, #24]
 8003126:	e003      	b.n	8003130 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003128:	2302      	movs	r3, #2
 800312a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d902      	bls.n	800313c <HAL_I2S_Init+0x134>
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	2bff      	cmp	r3, #255	; 0xff
 800313a:	d907      	bls.n	800314c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003140:	f043 0210 	orr.w	r2, r3, #16
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e08f      	b.n	800326c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	ea42 0103 	orr.w	r1, r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	69fa      	ldr	r2, [r7, #28]
 800315c:	430a      	orrs	r2, r1
 800315e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800316a:	f023 030f 	bic.w	r3, r3, #15
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6851      	ldr	r1, [r2, #4]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6892      	ldr	r2, [r2, #8]
 8003176:	4311      	orrs	r1, r2
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	68d2      	ldr	r2, [r2, #12]
 800317c:	4311      	orrs	r1, r2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6992      	ldr	r2, [r2, #24]
 8003182:	430a      	orrs	r2, r1
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800318e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d161      	bne.n	800325c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a38      	ldr	r2, [pc, #224]	; (800327c <HAL_I2S_Init+0x274>)
 800319c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a37      	ldr	r2, [pc, #220]	; (8003280 <HAL_I2S_Init+0x278>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d101      	bne.n	80031ac <HAL_I2S_Init+0x1a4>
 80031a8:	4b36      	ldr	r3, [pc, #216]	; (8003284 <HAL_I2S_Init+0x27c>)
 80031aa:	e001      	b.n	80031b0 <HAL_I2S_Init+0x1a8>
 80031ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	4932      	ldr	r1, [pc, #200]	; (8003280 <HAL_I2S_Init+0x278>)
 80031b8:	428a      	cmp	r2, r1
 80031ba:	d101      	bne.n	80031c0 <HAL_I2S_Init+0x1b8>
 80031bc:	4a31      	ldr	r2, [pc, #196]	; (8003284 <HAL_I2S_Init+0x27c>)
 80031be:	e001      	b.n	80031c4 <HAL_I2S_Init+0x1bc>
 80031c0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80031c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031c8:	f023 030f 	bic.w	r3, r3, #15
 80031cc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a2b      	ldr	r2, [pc, #172]	; (8003280 <HAL_I2S_Init+0x278>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d101      	bne.n	80031dc <HAL_I2S_Init+0x1d4>
 80031d8:	4b2a      	ldr	r3, [pc, #168]	; (8003284 <HAL_I2S_Init+0x27c>)
 80031da:	e001      	b.n	80031e0 <HAL_I2S_Init+0x1d8>
 80031dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031e0:	2202      	movs	r2, #2
 80031e2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a25      	ldr	r2, [pc, #148]	; (8003280 <HAL_I2S_Init+0x278>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d101      	bne.n	80031f2 <HAL_I2S_Init+0x1ea>
 80031ee:	4b25      	ldr	r3, [pc, #148]	; (8003284 <HAL_I2S_Init+0x27c>)
 80031f0:	e001      	b.n	80031f6 <HAL_I2S_Init+0x1ee>
 80031f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003202:	d003      	beq.n	800320c <HAL_I2S_Init+0x204>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d103      	bne.n	8003214 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800320c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	e001      	b.n	8003218 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003214:	2300      	movs	r3, #0
 8003216:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	b299      	uxth	r1, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800322e:	4303      	orrs	r3, r0
 8003230:	b29b      	uxth	r3, r3
 8003232:	430b      	orrs	r3, r1
 8003234:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003236:	4313      	orrs	r3, r2
 8003238:	b29a      	uxth	r2, r3
 800323a:	897b      	ldrh	r3, [r7, #10]
 800323c:	4313      	orrs	r3, r2
 800323e:	b29b      	uxth	r3, r3
 8003240:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003244:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a0d      	ldr	r2, [pc, #52]	; (8003280 <HAL_I2S_Init+0x278>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d101      	bne.n	8003254 <HAL_I2S_Init+0x24c>
 8003250:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <HAL_I2S_Init+0x27c>)
 8003252:	e001      	b.n	8003258 <HAL_I2S_Init+0x250>
 8003254:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003258:	897a      	ldrh	r2, [r7, #10]
 800325a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3720      	adds	r7, #32
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	0800337f 	.word	0x0800337f
 8003278:	cccccccd 	.word	0xcccccccd
 800327c:	08003495 	.word	0x08003495
 8003280:	40003800 	.word	0x40003800
 8003284:	40003400 	.word	0x40003400

08003288 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	881a      	ldrh	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	1c9a      	adds	r2, r3, #2
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10e      	bne.n	8003318 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003308:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7ff ffb8 	bl	8003288 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003318:	bf00      	nop
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003332:	b292      	uxth	r2, r2
 8003334:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	1c9a      	adds	r2, r3, #2
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003344:	b29b      	uxth	r3, r3
 8003346:	3b01      	subs	r3, #1
 8003348:	b29a      	uxth	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003352:	b29b      	uxth	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10e      	bne.n	8003376 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003366:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7ff ff93 	bl	800329c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003376:	bf00      	nop
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b086      	sub	sp, #24
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b04      	cmp	r3, #4
 8003398:	d13a      	bne.n	8003410 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d109      	bne.n	80033b8 <I2S_IRQHandler+0x3a>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ae:	2b40      	cmp	r3, #64	; 0x40
 80033b0:	d102      	bne.n	80033b8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7ff ffb4 	bl	8003320 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033be:	2b40      	cmp	r3, #64	; 0x40
 80033c0:	d126      	bne.n	8003410 <I2S_IRQHandler+0x92>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f003 0320 	and.w	r3, r3, #32
 80033cc:	2b20      	cmp	r3, #32
 80033ce:	d11f      	bne.n	8003410 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033de:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80033e0:	2300      	movs	r3, #0
 80033e2:	613b      	str	r3, [r7, #16]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003402:	f043 0202 	orr.w	r2, r3, #2
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7ff ff50 	bl	80032b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b03      	cmp	r3, #3
 800341a:	d136      	bne.n	800348a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b02      	cmp	r3, #2
 8003424:	d109      	bne.n	800343a <I2S_IRQHandler+0xbc>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003430:	2b80      	cmp	r3, #128	; 0x80
 8003432:	d102      	bne.n	800343a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7ff ff45 	bl	80032c4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f003 0308 	and.w	r3, r3, #8
 8003440:	2b08      	cmp	r3, #8
 8003442:	d122      	bne.n	800348a <I2S_IRQHandler+0x10c>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b20      	cmp	r3, #32
 8003450:	d11b      	bne.n	800348a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003460:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003462:	2300      	movs	r3, #0
 8003464:	60fb      	str	r3, [r7, #12]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347c:	f043 0204 	orr.w	r2, r3, #4
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7ff ff13 	bl	80032b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800348a:	bf00      	nop
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4aa2      	ldr	r2, [pc, #648]	; (8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d101      	bne.n	80034b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80034ae:	4ba2      	ldr	r3, [pc, #648]	; (8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034b0:	e001      	b.n	80034b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80034b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a9b      	ldr	r2, [pc, #620]	; (8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d101      	bne.n	80034d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80034cc:	4b9a      	ldr	r3, [pc, #616]	; (8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034ce:	e001      	b.n	80034d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80034d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e0:	d004      	beq.n	80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f040 8099 	bne.w	800361e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d107      	bne.n	8003506 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f925 	bl	8003750 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b01      	cmp	r3, #1
 800350e:	d107      	bne.n	8003520 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f9c8 	bl	80038b0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003526:	2b40      	cmp	r3, #64	; 0x40
 8003528:	d13a      	bne.n	80035a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b00      	cmp	r3, #0
 8003532:	d035      	beq.n	80035a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a7e      	ldr	r2, [pc, #504]	; (8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d101      	bne.n	8003542 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800353e:	4b7e      	ldr	r3, [pc, #504]	; (8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003540:	e001      	b.n	8003546 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003542:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4979      	ldr	r1, [pc, #484]	; (8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800354e:	428b      	cmp	r3, r1
 8003550:	d101      	bne.n	8003556 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003552:	4b79      	ldr	r3, [pc, #484]	; (8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003554:	e001      	b.n	800355a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003556:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800355a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800355e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800356e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003592:	f043 0202 	orr.w	r2, r3, #2
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff fe88 	bl	80032b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	f040 80be 	bne.w	8003728 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f003 0320 	and.w	r3, r3, #32
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 80b8 	beq.w	8003728 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035c6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a59      	ldr	r2, [pc, #356]	; (8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d101      	bne.n	80035d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80035d2:	4b59      	ldr	r3, [pc, #356]	; (8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035d4:	e001      	b.n	80035da <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80035d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4954      	ldr	r1, [pc, #336]	; (8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035e2:	428b      	cmp	r3, r1
 80035e4:	d101      	bne.n	80035ea <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80035e6:	4b54      	ldr	r3, [pc, #336]	; (8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035e8:	e001      	b.n	80035ee <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80035ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035f2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80035f4:	2300      	movs	r3, #0
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	60bb      	str	r3, [r7, #8]
 8003600:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360e:	f043 0204 	orr.w	r2, r3, #4
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7ff fe4a 	bl	80032b0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800361c:	e084      	b.n	8003728 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b02      	cmp	r3, #2
 8003626:	d107      	bne.n	8003638 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f8be 	bl	80037b4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b01      	cmp	r3, #1
 8003640:	d107      	bne.n	8003652 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f8fd 	bl	800384c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003658:	2b40      	cmp	r3, #64	; 0x40
 800365a:	d12f      	bne.n	80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b00      	cmp	r3, #0
 8003664:	d02a      	beq.n	80036bc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003674:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a2e      	ldr	r2, [pc, #184]	; (8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d101      	bne.n	8003684 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003680:	4b2d      	ldr	r3, [pc, #180]	; (8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003682:	e001      	b.n	8003688 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003684:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4929      	ldr	r1, [pc, #164]	; (8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003690:	428b      	cmp	r3, r1
 8003692:	d101      	bne.n	8003698 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003694:	4b28      	ldr	r3, [pc, #160]	; (8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003696:	e001      	b.n	800369c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003698:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800369c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036a0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	f043 0202 	orr.w	r2, r3, #2
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff fdfa 	bl	80032b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b08      	cmp	r3, #8
 80036c4:	d131      	bne.n	800372a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d02c      	beq.n	800372a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a17      	ldr	r2, [pc, #92]	; (8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d101      	bne.n	80036de <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80036da:	4b17      	ldr	r3, [pc, #92]	; (8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036dc:	e001      	b.n	80036e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80036de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4912      	ldr	r1, [pc, #72]	; (8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036ea:	428b      	cmp	r3, r1
 80036ec:	d101      	bne.n	80036f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80036ee:	4b12      	ldr	r3, [pc, #72]	; (8003738 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036f0:	e001      	b.n	80036f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80036f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036fa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800370a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003718:	f043 0204 	orr.w	r2, r3, #4
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f7ff fdc5 	bl	80032b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003726:	e000      	b.n	800372a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003728:	bf00      	nop
}
 800372a:	bf00      	nop
 800372c:	3720      	adds	r7, #32
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40003800 	.word	0x40003800
 8003738:	40003400 	.word	0x40003400

0800373c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	1c99      	adds	r1, r3, #2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6251      	str	r1, [r2, #36]	; 0x24
 8003762:	881a      	ldrh	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376e:	b29b      	uxth	r3, r3
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d113      	bne.n	80037aa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003790:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003796:	b29b      	uxth	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d106      	bne.n	80037aa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f7ff ffc9 	bl	800373c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037aa:	bf00      	nop
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	1c99      	adds	r1, r3, #2
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6251      	str	r1, [r2, #36]	; 0x24
 80037c6:	8819      	ldrh	r1, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a1d      	ldr	r2, [pc, #116]	; (8003844 <I2SEx_TxISR_I2SExt+0x90>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d101      	bne.n	80037d6 <I2SEx_TxISR_I2SExt+0x22>
 80037d2:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <I2SEx_TxISR_I2SExt+0x94>)
 80037d4:	e001      	b.n	80037da <I2SEx_TxISR_I2SExt+0x26>
 80037d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037da:	460a      	mov	r2, r1
 80037dc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d121      	bne.n	800383a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a12      	ldr	r2, [pc, #72]	; (8003844 <I2SEx_TxISR_I2SExt+0x90>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d101      	bne.n	8003804 <I2SEx_TxISR_I2SExt+0x50>
 8003800:	4b11      	ldr	r3, [pc, #68]	; (8003848 <I2SEx_TxISR_I2SExt+0x94>)
 8003802:	e001      	b.n	8003808 <I2SEx_TxISR_I2SExt+0x54>
 8003804:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	490d      	ldr	r1, [pc, #52]	; (8003844 <I2SEx_TxISR_I2SExt+0x90>)
 8003810:	428b      	cmp	r3, r1
 8003812:	d101      	bne.n	8003818 <I2SEx_TxISR_I2SExt+0x64>
 8003814:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <I2SEx_TxISR_I2SExt+0x94>)
 8003816:	e001      	b.n	800381c <I2SEx_TxISR_I2SExt+0x68>
 8003818:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800381c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003820:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003826:	b29b      	uxth	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d106      	bne.n	800383a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff ff81 	bl	800373c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800383a:	bf00      	nop
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40003800 	.word	0x40003800
 8003848:	40003400 	.word	0x40003400

0800384c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68d8      	ldr	r0, [r3, #12]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385e:	1c99      	adds	r1, r3, #2
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003864:	b282      	uxth	r2, r0
 8003866:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b01      	subs	r3, #1
 8003870:	b29a      	uxth	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800387a:	b29b      	uxth	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d113      	bne.n	80038a8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800388e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003894:	b29b      	uxth	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d106      	bne.n	80038a8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff ff4a 	bl	800373c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038a8:	bf00      	nop
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a20      	ldr	r2, [pc, #128]	; (8003940 <I2SEx_RxISR_I2SExt+0x90>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d101      	bne.n	80038c6 <I2SEx_RxISR_I2SExt+0x16>
 80038c2:	4b20      	ldr	r3, [pc, #128]	; (8003944 <I2SEx_RxISR_I2SExt+0x94>)
 80038c4:	e001      	b.n	80038ca <I2SEx_RxISR_I2SExt+0x1a>
 80038c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ca:	68d8      	ldr	r0, [r3, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	1c99      	adds	r1, r3, #2
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80038d6:	b282      	uxth	r2, r0
 80038d8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038de:	b29b      	uxth	r3, r3
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d121      	bne.n	8003936 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a12      	ldr	r2, [pc, #72]	; (8003940 <I2SEx_RxISR_I2SExt+0x90>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d101      	bne.n	8003900 <I2SEx_RxISR_I2SExt+0x50>
 80038fc:	4b11      	ldr	r3, [pc, #68]	; (8003944 <I2SEx_RxISR_I2SExt+0x94>)
 80038fe:	e001      	b.n	8003904 <I2SEx_RxISR_I2SExt+0x54>
 8003900:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	490d      	ldr	r1, [pc, #52]	; (8003940 <I2SEx_RxISR_I2SExt+0x90>)
 800390c:	428b      	cmp	r3, r1
 800390e:	d101      	bne.n	8003914 <I2SEx_RxISR_I2SExt+0x64>
 8003910:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <I2SEx_RxISR_I2SExt+0x94>)
 8003912:	e001      	b.n	8003918 <I2SEx_RxISR_I2SExt+0x68>
 8003914:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003918:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800391c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003922:	b29b      	uxth	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d106      	bne.n	8003936 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7ff ff03 	bl	800373c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003936:	bf00      	nop
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40003800 	.word	0x40003800
 8003944:	40003400 	.word	0x40003400

08003948 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e25b      	b.n	8003e12 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d075      	beq.n	8003a52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003966:	4ba3      	ldr	r3, [pc, #652]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 030c 	and.w	r3, r3, #12
 800396e:	2b04      	cmp	r3, #4
 8003970:	d00c      	beq.n	800398c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003972:	4ba0      	ldr	r3, [pc, #640]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800397a:	2b08      	cmp	r3, #8
 800397c:	d112      	bne.n	80039a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800397e:	4b9d      	ldr	r3, [pc, #628]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003986:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800398a:	d10b      	bne.n	80039a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800398c:	4b99      	ldr	r3, [pc, #612]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d05b      	beq.n	8003a50 <HAL_RCC_OscConfig+0x108>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d157      	bne.n	8003a50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e236      	b.n	8003e12 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ac:	d106      	bne.n	80039bc <HAL_RCC_OscConfig+0x74>
 80039ae:	4b91      	ldr	r3, [pc, #580]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a90      	ldr	r2, [pc, #576]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 80039b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	e01d      	b.n	80039f8 <HAL_RCC_OscConfig+0xb0>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039c4:	d10c      	bne.n	80039e0 <HAL_RCC_OscConfig+0x98>
 80039c6:	4b8b      	ldr	r3, [pc, #556]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a8a      	ldr	r2, [pc, #552]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 80039cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	4b88      	ldr	r3, [pc, #544]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a87      	ldr	r2, [pc, #540]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 80039d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	e00b      	b.n	80039f8 <HAL_RCC_OscConfig+0xb0>
 80039e0:	4b84      	ldr	r3, [pc, #528]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a83      	ldr	r2, [pc, #524]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 80039e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ea:	6013      	str	r3, [r2, #0]
 80039ec:	4b81      	ldr	r3, [pc, #516]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a80      	ldr	r2, [pc, #512]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 80039f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d013      	beq.n	8003a28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a00:	f7fd f9e6 	bl	8000dd0 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a08:	f7fd f9e2 	bl	8000dd0 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b64      	cmp	r3, #100	; 0x64
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e1fb      	b.n	8003e12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1a:	4b76      	ldr	r3, [pc, #472]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d0f0      	beq.n	8003a08 <HAL_RCC_OscConfig+0xc0>
 8003a26:	e014      	b.n	8003a52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a28:	f7fd f9d2 	bl	8000dd0 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a30:	f7fd f9ce 	bl	8000dd0 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b64      	cmp	r3, #100	; 0x64
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e1e7      	b.n	8003e12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a42:	4b6c      	ldr	r3, [pc, #432]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1f0      	bne.n	8003a30 <HAL_RCC_OscConfig+0xe8>
 8003a4e:	e000      	b.n	8003a52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d063      	beq.n	8003b26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a5e:	4b65      	ldr	r3, [pc, #404]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 030c 	and.w	r3, r3, #12
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00b      	beq.n	8003a82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a6a:	4b62      	ldr	r3, [pc, #392]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d11c      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a76:	4b5f      	ldr	r3, [pc, #380]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d116      	bne.n	8003ab0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a82:	4b5c      	ldr	r3, [pc, #368]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d005      	beq.n	8003a9a <HAL_RCC_OscConfig+0x152>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d001      	beq.n	8003a9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e1bb      	b.n	8003e12 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a9a:	4b56      	ldr	r3, [pc, #344]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4952      	ldr	r1, [pc, #328]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aae:	e03a      	b.n	8003b26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d020      	beq.n	8003afa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ab8:	4b4f      	ldr	r3, [pc, #316]	; (8003bf8 <HAL_RCC_OscConfig+0x2b0>)
 8003aba:	2201      	movs	r2, #1
 8003abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abe:	f7fd f987 	bl	8000dd0 <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ac6:	f7fd f983 	bl	8000dd0 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e19c      	b.n	8003e12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad8:	4b46      	ldr	r3, [pc, #280]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f0      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae4:	4b43      	ldr	r3, [pc, #268]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	00db      	lsls	r3, r3, #3
 8003af2:	4940      	ldr	r1, [pc, #256]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	600b      	str	r3, [r1, #0]
 8003af8:	e015      	b.n	8003b26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003afa:	4b3f      	ldr	r3, [pc, #252]	; (8003bf8 <HAL_RCC_OscConfig+0x2b0>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b00:	f7fd f966 	bl	8000dd0 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b08:	f7fd f962 	bl	8000dd0 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e17b      	b.n	8003e12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b1a:	4b36      	ldr	r3, [pc, #216]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f0      	bne.n	8003b08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d030      	beq.n	8003b94 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d016      	beq.n	8003b68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b3a:	4b30      	ldr	r3, [pc, #192]	; (8003bfc <HAL_RCC_OscConfig+0x2b4>)
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b40:	f7fd f946 	bl	8000dd0 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b48:	f7fd f942 	bl	8000dd0 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e15b      	b.n	8003e12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b5a:	4b26      	ldr	r3, [pc, #152]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 8003b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0x200>
 8003b66:	e015      	b.n	8003b94 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b68:	4b24      	ldr	r3, [pc, #144]	; (8003bfc <HAL_RCC_OscConfig+0x2b4>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b6e:	f7fd f92f 	bl	8000dd0 <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b76:	f7fd f92b 	bl	8000dd0 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e144      	b.n	8003e12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b88:	4b1a      	ldr	r3, [pc, #104]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 8003b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1f0      	bne.n	8003b76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 80a0 	beq.w	8003ce2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ba6:	4b13      	ldr	r3, [pc, #76]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10f      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	4b0f      	ldr	r3, [pc, #60]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	4a0e      	ldr	r2, [pc, #56]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 8003bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bc2:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bca:	60bb      	str	r3, [r7, #8]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd2:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <HAL_RCC_OscConfig+0x2b8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d121      	bne.n	8003c22 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bde:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <HAL_RCC_OscConfig+0x2b8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a07      	ldr	r2, [pc, #28]	; (8003c00 <HAL_RCC_OscConfig+0x2b8>)
 8003be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bea:	f7fd f8f1 	bl	8000dd0 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf0:	e011      	b.n	8003c16 <HAL_RCC_OscConfig+0x2ce>
 8003bf2:	bf00      	nop
 8003bf4:	40023800 	.word	0x40023800
 8003bf8:	42470000 	.word	0x42470000
 8003bfc:	42470e80 	.word	0x42470e80
 8003c00:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c04:	f7fd f8e4 	bl	8000dd0 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e0fd      	b.n	8003e12 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c16:	4b81      	ldr	r3, [pc, #516]	; (8003e1c <HAL_RCC_OscConfig+0x4d4>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0f0      	beq.n	8003c04 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d106      	bne.n	8003c38 <HAL_RCC_OscConfig+0x2f0>
 8003c2a:	4b7d      	ldr	r3, [pc, #500]	; (8003e20 <HAL_RCC_OscConfig+0x4d8>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2e:	4a7c      	ldr	r2, [pc, #496]	; (8003e20 <HAL_RCC_OscConfig+0x4d8>)
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	6713      	str	r3, [r2, #112]	; 0x70
 8003c36:	e01c      	b.n	8003c72 <HAL_RCC_OscConfig+0x32a>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b05      	cmp	r3, #5
 8003c3e:	d10c      	bne.n	8003c5a <HAL_RCC_OscConfig+0x312>
 8003c40:	4b77      	ldr	r3, [pc, #476]	; (8003e20 <HAL_RCC_OscConfig+0x4d8>)
 8003c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c44:	4a76      	ldr	r2, [pc, #472]	; (8003e20 <HAL_RCC_OscConfig+0x4d8>)
 8003c46:	f043 0304 	orr.w	r3, r3, #4
 8003c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c4c:	4b74      	ldr	r3, [pc, #464]	; (8003e20 <HAL_RCC_OscConfig+0x4d8>)
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c50:	4a73      	ldr	r2, [pc, #460]	; (8003e20 <HAL_RCC_OscConfig+0x4d8>)
 8003c52:	f043 0301 	orr.w	r3, r3, #1
 8003c56:	6713      	str	r3, [r2, #112]	; 0x70
 8003c58:	e00b      	b.n	8003c72 <HAL_RCC_OscConfig+0x32a>
 8003c5a:	4b71      	ldr	r3, [pc, #452]	; (8003e20 <HAL_RCC_OscConfig+0x4d8>)
 8003c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5e:	4a70      	ldr	r2, [pc, #448]	; (8003e20 <HAL_RCC_OscConfig+0x4d8>)
 8003c60:	f023 0301 	bic.w	r3, r3, #1
 8003c64:	6713      	str	r3, [r2, #112]	; 0x70
 8003c66:	4b6e      	ldr	r3, [pc, #440]	; (8003e20 <HAL_RCC_OscConfig+0x4d8>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6a:	4a6d      	ldr	r2, [pc, #436]	; (8003e20 <HAL_RCC_OscConfig+0x4d8>)
 8003c6c:	f023 0304 	bic.w	r3, r3, #4
 8003c70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d015      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7a:	f7fd f8a9 	bl	8000dd0 <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c80:	e00a      	b.n	8003c98 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c82:	f7fd f8a5 	bl	8000dd0 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e0bc      	b.n	8003e12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c98:	4b61      	ldr	r3, [pc, #388]	; (8003e20 <HAL_RCC_OscConfig+0x4d8>)
 8003c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0ee      	beq.n	8003c82 <HAL_RCC_OscConfig+0x33a>
 8003ca4:	e014      	b.n	8003cd0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca6:	f7fd f893 	bl	8000dd0 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cac:	e00a      	b.n	8003cc4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cae:	f7fd f88f 	bl	8000dd0 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e0a6      	b.n	8003e12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc4:	4b56      	ldr	r3, [pc, #344]	; (8003e20 <HAL_RCC_OscConfig+0x4d8>)
 8003cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1ee      	bne.n	8003cae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cd0:	7dfb      	ldrb	r3, [r7, #23]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d105      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd6:	4b52      	ldr	r3, [pc, #328]	; (8003e20 <HAL_RCC_OscConfig+0x4d8>)
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	4a51      	ldr	r2, [pc, #324]	; (8003e20 <HAL_RCC_OscConfig+0x4d8>)
 8003cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 8092 	beq.w	8003e10 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cec:	4b4c      	ldr	r3, [pc, #304]	; (8003e20 <HAL_RCC_OscConfig+0x4d8>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 030c 	and.w	r3, r3, #12
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d05c      	beq.n	8003db2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d141      	bne.n	8003d84 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d00:	4b48      	ldr	r3, [pc, #288]	; (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d06:	f7fd f863 	bl	8000dd0 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d0e:	f7fd f85f 	bl	8000dd0 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e078      	b.n	8003e12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d20:	4b3f      	ldr	r3, [pc, #252]	; (8003e20 <HAL_RCC_OscConfig+0x4d8>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1f0      	bne.n	8003d0e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69da      	ldr	r2, [r3, #28]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	019b      	lsls	r3, r3, #6
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d42:	085b      	lsrs	r3, r3, #1
 8003d44:	3b01      	subs	r3, #1
 8003d46:	041b      	lsls	r3, r3, #16
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4e:	061b      	lsls	r3, r3, #24
 8003d50:	4933      	ldr	r1, [pc, #204]	; (8003e20 <HAL_RCC_OscConfig+0x4d8>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d56:	4b33      	ldr	r3, [pc, #204]	; (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003d58:	2201      	movs	r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5c:	f7fd f838 	bl	8000dd0 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d64:	f7fd f834 	bl	8000dd0 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e04d      	b.n	8003e12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d76:	4b2a      	ldr	r3, [pc, #168]	; (8003e20 <HAL_RCC_OscConfig+0x4d8>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0f0      	beq.n	8003d64 <HAL_RCC_OscConfig+0x41c>
 8003d82:	e045      	b.n	8003e10 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d84:	4b27      	ldr	r3, [pc, #156]	; (8003e24 <HAL_RCC_OscConfig+0x4dc>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8a:	f7fd f821 	bl	8000dd0 <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d92:	f7fd f81d 	bl	8000dd0 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e036      	b.n	8003e12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da4:	4b1e      	ldr	r3, [pc, #120]	; (8003e20 <HAL_RCC_OscConfig+0x4d8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1f0      	bne.n	8003d92 <HAL_RCC_OscConfig+0x44a>
 8003db0:	e02e      	b.n	8003e10 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d101      	bne.n	8003dbe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e029      	b.n	8003e12 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dbe:	4b18      	ldr	r3, [pc, #96]	; (8003e20 <HAL_RCC_OscConfig+0x4d8>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d11c      	bne.n	8003e0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d115      	bne.n	8003e0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003de6:	4013      	ands	r3, r2
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d10d      	bne.n	8003e0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d106      	bne.n	8003e0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e000      	b.n	8003e12 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	40007000 	.word	0x40007000
 8003e20:	40023800 	.word	0x40023800
 8003e24:	42470060 	.word	0x42470060

08003e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e0cc      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e3c:	4b68      	ldr	r3, [pc, #416]	; (8003fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 030f 	and.w	r3, r3, #15
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d90c      	bls.n	8003e64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4a:	4b65      	ldr	r3, [pc, #404]	; (8003fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e52:	4b63      	ldr	r3, [pc, #396]	; (8003fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d001      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0b8      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d020      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0304 	and.w	r3, r3, #4
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d005      	beq.n	8003e88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e7c:	4b59      	ldr	r3, [pc, #356]	; (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	4a58      	ldr	r2, [pc, #352]	; (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d005      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e94:	4b53      	ldr	r3, [pc, #332]	; (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	4a52      	ldr	r2, [pc, #328]	; (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ea0:	4b50      	ldr	r3, [pc, #320]	; (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	494d      	ldr	r1, [pc, #308]	; (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d044      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d107      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ec6:	4b47      	ldr	r3, [pc, #284]	; (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d119      	bne.n	8003f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e07f      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d003      	beq.n	8003ee6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ee2:	2b03      	cmp	r3, #3
 8003ee4:	d107      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ee6:	4b3f      	ldr	r3, [pc, #252]	; (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d109      	bne.n	8003f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e06f      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ef6:	4b3b      	ldr	r3, [pc, #236]	; (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e067      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f06:	4b37      	ldr	r3, [pc, #220]	; (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f023 0203 	bic.w	r2, r3, #3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	4934      	ldr	r1, [pc, #208]	; (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f18:	f7fc ff5a 	bl	8000dd0 <HAL_GetTick>
 8003f1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f1e:	e00a      	b.n	8003f36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f20:	f7fc ff56 	bl	8000dd0 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d901      	bls.n	8003f36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e04f      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f36:	4b2b      	ldr	r3, [pc, #172]	; (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 020c 	and.w	r2, r3, #12
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d1eb      	bne.n	8003f20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f48:	4b25      	ldr	r3, [pc, #148]	; (8003fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d20c      	bcs.n	8003f70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f56:	4b22      	ldr	r3, [pc, #136]	; (8003fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f5e:	4b20      	ldr	r3, [pc, #128]	; (8003fe0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d001      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e032      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d008      	beq.n	8003f8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f7c:	4b19      	ldr	r3, [pc, #100]	; (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	4916      	ldr	r1, [pc, #88]	; (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d009      	beq.n	8003fae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f9a:	4b12      	ldr	r3, [pc, #72]	; (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	490e      	ldr	r1, [pc, #56]	; (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fae:	f000 f821 	bl	8003ff4 <HAL_RCC_GetSysClockFreq>
 8003fb2:	4601      	mov	r1, r0
 8003fb4:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	091b      	lsrs	r3, r3, #4
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	4a0a      	ldr	r2, [pc, #40]	; (8003fe8 <HAL_RCC_ClockConfig+0x1c0>)
 8003fc0:	5cd3      	ldrb	r3, [r2, r3]
 8003fc2:	fa21 f303 	lsr.w	r3, r1, r3
 8003fc6:	4a09      	ldr	r2, [pc, #36]	; (8003fec <HAL_RCC_ClockConfig+0x1c4>)
 8003fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fca:	4b09      	ldr	r3, [pc, #36]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fc feba 	bl	8000d48 <HAL_InitTick>

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40023c00 	.word	0x40023c00
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	08006b80 	.word	0x08006b80
 8003fec:	20000000 	.word	0x20000000
 8003ff0:	20000004 	.word	0x20000004

08003ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	607b      	str	r3, [r7, #4]
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	2300      	movs	r3, #0
 8004004:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800400a:	4b63      	ldr	r3, [pc, #396]	; (8004198 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 030c 	and.w	r3, r3, #12
 8004012:	2b04      	cmp	r3, #4
 8004014:	d007      	beq.n	8004026 <HAL_RCC_GetSysClockFreq+0x32>
 8004016:	2b08      	cmp	r3, #8
 8004018:	d008      	beq.n	800402c <HAL_RCC_GetSysClockFreq+0x38>
 800401a:	2b00      	cmp	r3, #0
 800401c:	f040 80b4 	bne.w	8004188 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004020:	4b5e      	ldr	r3, [pc, #376]	; (800419c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004022:	60bb      	str	r3, [r7, #8]
       break;
 8004024:	e0b3      	b.n	800418e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004026:	4b5e      	ldr	r3, [pc, #376]	; (80041a0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004028:	60bb      	str	r3, [r7, #8]
      break;
 800402a:	e0b0      	b.n	800418e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800402c:	4b5a      	ldr	r3, [pc, #360]	; (8004198 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004034:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004036:	4b58      	ldr	r3, [pc, #352]	; (8004198 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d04a      	beq.n	80040d8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004042:	4b55      	ldr	r3, [pc, #340]	; (8004198 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	099b      	lsrs	r3, r3, #6
 8004048:	f04f 0400 	mov.w	r4, #0
 800404c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	ea03 0501 	and.w	r5, r3, r1
 8004058:	ea04 0602 	and.w	r6, r4, r2
 800405c:	4629      	mov	r1, r5
 800405e:	4632      	mov	r2, r6
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	f04f 0400 	mov.w	r4, #0
 8004068:	0154      	lsls	r4, r2, #5
 800406a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800406e:	014b      	lsls	r3, r1, #5
 8004070:	4619      	mov	r1, r3
 8004072:	4622      	mov	r2, r4
 8004074:	1b49      	subs	r1, r1, r5
 8004076:	eb62 0206 	sbc.w	r2, r2, r6
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	f04f 0400 	mov.w	r4, #0
 8004082:	0194      	lsls	r4, r2, #6
 8004084:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004088:	018b      	lsls	r3, r1, #6
 800408a:	1a5b      	subs	r3, r3, r1
 800408c:	eb64 0402 	sbc.w	r4, r4, r2
 8004090:	f04f 0100 	mov.w	r1, #0
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	00e2      	lsls	r2, r4, #3
 800409a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800409e:	00d9      	lsls	r1, r3, #3
 80040a0:	460b      	mov	r3, r1
 80040a2:	4614      	mov	r4, r2
 80040a4:	195b      	adds	r3, r3, r5
 80040a6:	eb44 0406 	adc.w	r4, r4, r6
 80040aa:	f04f 0100 	mov.w	r1, #0
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	0262      	lsls	r2, r4, #9
 80040b4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80040b8:	0259      	lsls	r1, r3, #9
 80040ba:	460b      	mov	r3, r1
 80040bc:	4614      	mov	r4, r2
 80040be:	4618      	mov	r0, r3
 80040c0:	4621      	mov	r1, r4
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f04f 0400 	mov.w	r4, #0
 80040c8:	461a      	mov	r2, r3
 80040ca:	4623      	mov	r3, r4
 80040cc:	f7fc f87c 	bl	80001c8 <__aeabi_uldivmod>
 80040d0:	4603      	mov	r3, r0
 80040d2:	460c      	mov	r4, r1
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	e049      	b.n	800416c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040d8:	4b2f      	ldr	r3, [pc, #188]	; (8004198 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	099b      	lsrs	r3, r3, #6
 80040de:	f04f 0400 	mov.w	r4, #0
 80040e2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	ea03 0501 	and.w	r5, r3, r1
 80040ee:	ea04 0602 	and.w	r6, r4, r2
 80040f2:	4629      	mov	r1, r5
 80040f4:	4632      	mov	r2, r6
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	f04f 0400 	mov.w	r4, #0
 80040fe:	0154      	lsls	r4, r2, #5
 8004100:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004104:	014b      	lsls	r3, r1, #5
 8004106:	4619      	mov	r1, r3
 8004108:	4622      	mov	r2, r4
 800410a:	1b49      	subs	r1, r1, r5
 800410c:	eb62 0206 	sbc.w	r2, r2, r6
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	f04f 0400 	mov.w	r4, #0
 8004118:	0194      	lsls	r4, r2, #6
 800411a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800411e:	018b      	lsls	r3, r1, #6
 8004120:	1a5b      	subs	r3, r3, r1
 8004122:	eb64 0402 	sbc.w	r4, r4, r2
 8004126:	f04f 0100 	mov.w	r1, #0
 800412a:	f04f 0200 	mov.w	r2, #0
 800412e:	00e2      	lsls	r2, r4, #3
 8004130:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004134:	00d9      	lsls	r1, r3, #3
 8004136:	460b      	mov	r3, r1
 8004138:	4614      	mov	r4, r2
 800413a:	195b      	adds	r3, r3, r5
 800413c:	eb44 0406 	adc.w	r4, r4, r6
 8004140:	f04f 0100 	mov.w	r1, #0
 8004144:	f04f 0200 	mov.w	r2, #0
 8004148:	02a2      	lsls	r2, r4, #10
 800414a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800414e:	0299      	lsls	r1, r3, #10
 8004150:	460b      	mov	r3, r1
 8004152:	4614      	mov	r4, r2
 8004154:	4618      	mov	r0, r3
 8004156:	4621      	mov	r1, r4
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f04f 0400 	mov.w	r4, #0
 800415e:	461a      	mov	r2, r3
 8004160:	4623      	mov	r3, r4
 8004162:	f7fc f831 	bl	80001c8 <__aeabi_uldivmod>
 8004166:	4603      	mov	r3, r0
 8004168:	460c      	mov	r4, r1
 800416a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800416c:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	0c1b      	lsrs	r3, r3, #16
 8004172:	f003 0303 	and.w	r3, r3, #3
 8004176:	3301      	adds	r3, #1
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	fbb2 f3f3 	udiv	r3, r2, r3
 8004184:	60bb      	str	r3, [r7, #8]
      break;
 8004186:	e002      	b.n	800418e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004188:	4b04      	ldr	r3, [pc, #16]	; (800419c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800418a:	60bb      	str	r3, [r7, #8]
      break;
 800418c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800418e:	68bb      	ldr	r3, [r7, #8]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004198:	40023800 	.word	0x40023800
 800419c:	00f42400 	.word	0x00f42400
 80041a0:	007a1200 	.word	0x007a1200

080041a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041a4:	b480      	push	{r7}
 80041a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041a8:	4b03      	ldr	r3, [pc, #12]	; (80041b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041aa:	681b      	ldr	r3, [r3, #0]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	20000000 	.word	0x20000000

080041bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041c0:	f7ff fff0 	bl	80041a4 <HAL_RCC_GetHCLKFreq>
 80041c4:	4601      	mov	r1, r0
 80041c6:	4b05      	ldr	r3, [pc, #20]	; (80041dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	0a9b      	lsrs	r3, r3, #10
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	4a03      	ldr	r2, [pc, #12]	; (80041e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041d2:	5cd3      	ldrb	r3, [r2, r3]
 80041d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80041d8:	4618      	mov	r0, r3
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	40023800 	.word	0x40023800
 80041e0:	08006b90 	.word	0x08006b90

080041e4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d105      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004208:	2b00      	cmp	r3, #0
 800420a:	d035      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800420c:	4b62      	ldr	r3, [pc, #392]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004212:	f7fc fddd 	bl	8000dd0 <HAL_GetTick>
 8004216:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004218:	e008      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800421a:	f7fc fdd9 	bl	8000dd0 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d901      	bls.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e0b0      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800422c:	4b5b      	ldr	r3, [pc, #364]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1f0      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	019a      	lsls	r2, r3, #6
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	071b      	lsls	r3, r3, #28
 8004244:	4955      	ldr	r1, [pc, #340]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004246:	4313      	orrs	r3, r2
 8004248:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800424c:	4b52      	ldr	r3, [pc, #328]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800424e:	2201      	movs	r2, #1
 8004250:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004252:	f7fc fdbd 	bl	8000dd0 <HAL_GetTick>
 8004256:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004258:	e008      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800425a:	f7fc fdb9 	bl	8000dd0 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e090      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800426c:	4b4b      	ldr	r3, [pc, #300]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0f0      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 8083 	beq.w	800438c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	4b44      	ldr	r3, [pc, #272]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	4a43      	ldr	r2, [pc, #268]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004294:	6413      	str	r3, [r2, #64]	; 0x40
 8004296:	4b41      	ldr	r3, [pc, #260]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80042a2:	4b3f      	ldr	r3, [pc, #252]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a3e      	ldr	r2, [pc, #248]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042ae:	f7fc fd8f 	bl	8000dd0 <HAL_GetTick>
 80042b2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042b4:	e008      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80042b6:	f7fc fd8b 	bl	8000dd0 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e062      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042c8:	4b35      	ldr	r3, [pc, #212]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0f0      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042d4:	4b31      	ldr	r3, [pc, #196]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042dc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d02f      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d028      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042f2:	4b2a      	ldr	r3, [pc, #168]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042fa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042fc:	4b29      	ldr	r3, [pc, #164]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042fe:	2201      	movs	r2, #1
 8004300:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004302:	4b28      	ldr	r3, [pc, #160]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004308:	4a24      	ldr	r2, [pc, #144]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800430e:	4b23      	ldr	r3, [pc, #140]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b01      	cmp	r3, #1
 8004318:	d114      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800431a:	f7fc fd59 	bl	8000dd0 <HAL_GetTick>
 800431e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004320:	e00a      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004322:	f7fc fd55 	bl	8000dd0 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004330:	4293      	cmp	r3, r2
 8004332:	d901      	bls.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e02a      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004338:	4b18      	ldr	r3, [pc, #96]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800433a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0ee      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800434c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004350:	d10d      	bne.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004352:	4b12      	ldr	r3, [pc, #72]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004366:	490d      	ldr	r1, [pc, #52]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004368:	4313      	orrs	r3, r2
 800436a:	608b      	str	r3, [r1, #8]
 800436c:	e005      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800436e:	4b0b      	ldr	r3, [pc, #44]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	4a0a      	ldr	r2, [pc, #40]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004374:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004378:	6093      	str	r3, [r2, #8]
 800437a:	4b08      	ldr	r3, [pc, #32]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800437c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004386:	4905      	ldr	r1, [pc, #20]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004388:	4313      	orrs	r3, r2
 800438a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	42470068 	.word	0x42470068
 800439c:	40023800 	.word	0x40023800
 80043a0:	40007000 	.word	0x40007000
 80043a4:	42470e40 	.word	0x42470e40

080043a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80043b4:	2300      	movs	r3, #0
 80043b6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d13d      	bne.n	8004442 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80043c6:	4b22      	ldr	r3, [pc, #136]	; (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043ce:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d004      	beq.n	80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d12f      	bne.n	800443a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80043da:	4b1e      	ldr	r3, [pc, #120]	; (8004454 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043dc:	617b      	str	r3, [r7, #20]
          break;
 80043de:	e02f      	b.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80043e0:	4b1b      	ldr	r3, [pc, #108]	; (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ec:	d108      	bne.n	8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043ee:	4b18      	ldr	r3, [pc, #96]	; (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043f6:	4a18      	ldr	r2, [pc, #96]	; (8004458 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80043f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	e007      	b.n	8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004400:	4b13      	ldr	r3, [pc, #76]	; (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004408:	4a14      	ldr	r2, [pc, #80]	; (800445c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800440a:	fbb2 f3f3 	udiv	r3, r2, r3
 800440e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004410:	4b0f      	ldr	r3, [pc, #60]	; (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004416:	099b      	lsrs	r3, r3, #6
 8004418:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	fb02 f303 	mul.w	r3, r2, r3
 8004422:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004424:	4b0a      	ldr	r3, [pc, #40]	; (8004450 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800442a:	0f1b      	lsrs	r3, r3, #28
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	fbb2 f3f3 	udiv	r3, r2, r3
 8004436:	617b      	str	r3, [r7, #20]
          break;
 8004438:	e002      	b.n	8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	617b      	str	r3, [r7, #20]
          break;
 800443e:	bf00      	nop
        }
      }
      break;
 8004440:	bf00      	nop
    }
  }
  return frequency;
 8004442:	697b      	ldr	r3, [r7, #20]
}
 8004444:	4618      	mov	r0, r3
 8004446:	371c      	adds	r7, #28
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	40023800 	.word	0x40023800
 8004454:	00bb8000 	.word	0x00bb8000
 8004458:	007a1200 	.word	0x007a1200
 800445c:	00f42400 	.word	0x00f42400

08004460 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e056      	b.n	8004520 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d106      	bne.n	8004492 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f7fc fb43 	bl	8000b18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2202      	movs	r2, #2
 8004496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044a8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	431a      	orrs	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	431a      	orrs	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	ea42 0103 	orr.w	r1, r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	0c1b      	lsrs	r3, r3, #16
 80044f0:	f003 0104 	and.w	r1, r3, #4
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	69da      	ldr	r2, [r3, #28]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800450e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004528:	b084      	sub	sp, #16
 800452a:	b580      	push	{r7, lr}
 800452c:	b084      	sub	sp, #16
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
 8004532:	f107 001c 	add.w	r0, r7, #28
 8004536:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800453a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453c:	2b01      	cmp	r3, #1
 800453e:	d122      	bne.n	8004586 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004544:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004568:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800456a:	2b01      	cmp	r3, #1
 800456c:	d105      	bne.n	800457a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f94a 	bl	8004814 <USB_CoreReset>
 8004580:	4603      	mov	r3, r0
 8004582:	73fb      	strb	r3, [r7, #15]
 8004584:	e01a      	b.n	80045bc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f93e 	bl	8004814 <USB_CoreReset>
 8004598:	4603      	mov	r3, r0
 800459a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800459c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d106      	bne.n	80045b0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	639a      	str	r2, [r3, #56]	; 0x38
 80045ae:	e005      	b.n	80045bc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80045bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d10b      	bne.n	80045da <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f043 0206 	orr.w	r2, r3, #6
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f043 0220 	orr.w	r2, r3, #32
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80045da:	7bfb      	ldrb	r3, [r7, #15]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045e6:	b004      	add	sp, #16
 80045e8:	4770      	bx	lr

080045ea <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f043 0201 	orr.w	r2, r3, #1
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f023 0201 	bic.w	r2, r3, #1
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	460b      	mov	r3, r1
 8004638:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004646:	78fb      	ldrb	r3, [r7, #3]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d106      	bne.n	800465a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	60da      	str	r2, [r3, #12]
 8004658:	e00b      	b.n	8004672 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800465a:	78fb      	ldrb	r3, [r7, #3]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d106      	bne.n	800466e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	60da      	str	r2, [r3, #12]
 800466c:	e001      	b.n	8004672 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e003      	b.n	800467a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004672:	2032      	movs	r0, #50	; 0x32
 8004674:	f7fc fbb8 	bl	8000de8 <HAL_Delay>

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
	...

08004684 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	019b      	lsls	r3, r3, #6
 8004696:	f043 0220 	orr.w	r2, r3, #32
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3301      	adds	r3, #1
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4a09      	ldr	r2, [pc, #36]	; (80046cc <USB_FlushTxFifo+0x48>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d901      	bls.n	80046b0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e006      	b.n	80046be <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	f003 0320 	and.w	r3, r3, #32
 80046b8:	2b20      	cmp	r3, #32
 80046ba:	d0f0      	beq.n	800469e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	00030d40 	.word	0x00030d40

080046d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2210      	movs	r2, #16
 80046e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	3301      	adds	r3, #1
 80046e6:	60fb      	str	r3, [r7, #12]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4a09      	ldr	r2, [pc, #36]	; (8004710 <USB_FlushRxFifo+0x40>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d901      	bls.n	80046f4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e006      	b.n	8004702 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	f003 0310 	and.w	r3, r3, #16
 80046fc:	2b10      	cmp	r3, #16
 80046fe:	d0f0      	beq.n	80046e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	00030d40 	.word	0x00030d40

08004714 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004714:	b480      	push	{r7}
 8004716:	b089      	sub	sp, #36	; 0x24
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	4611      	mov	r1, r2
 8004720:	461a      	mov	r2, r3
 8004722:	460b      	mov	r3, r1
 8004724:	71fb      	strb	r3, [r7, #7]
 8004726:	4613      	mov	r3, r2
 8004728:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004732:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004736:	2b00      	cmp	r3, #0
 8004738:	d11a      	bne.n	8004770 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800473a:	88bb      	ldrh	r3, [r7, #4]
 800473c:	3303      	adds	r3, #3
 800473e:	089b      	lsrs	r3, r3, #2
 8004740:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004742:	2300      	movs	r3, #0
 8004744:	61bb      	str	r3, [r7, #24]
 8004746:	e00f      	b.n	8004768 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004748:	79fb      	ldrb	r3, [r7, #7]
 800474a:	031a      	lsls	r2, r3, #12
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	4413      	add	r3, r2
 8004750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004754:	461a      	mov	r2, r3
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	3304      	adds	r3, #4
 8004760:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	3301      	adds	r3, #1
 8004766:	61bb      	str	r3, [r7, #24]
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	429a      	cmp	r2, r3
 800476e:	d3eb      	bcc.n	8004748 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3724      	adds	r7, #36	; 0x24
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800477e:	b480      	push	{r7}
 8004780:	b089      	sub	sp, #36	; 0x24
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	4613      	mov	r3, r2
 800478a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004794:	88fb      	ldrh	r3, [r7, #6]
 8004796:	3303      	adds	r3, #3
 8004798:	089b      	lsrs	r3, r3, #2
 800479a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800479c:	2300      	movs	r3, #0
 800479e:	61bb      	str	r3, [r7, #24]
 80047a0:	e00b      	b.n	80047ba <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	601a      	str	r2, [r3, #0]
    pDest++;
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	3304      	adds	r3, #4
 80047b2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	3301      	adds	r3, #1
 80047b8:	61bb      	str	r3, [r7, #24]
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d3ef      	bcc.n	80047a2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80047c2:	69fb      	ldr	r3, [r7, #28]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3724      	adds	r7, #36	; 0x24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4013      	ands	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80047e8:	68fb      	ldr	r3, [r7, #12]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b083      	sub	sp, #12
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	f003 0301 	and.w	r3, r3, #1
}
 8004806:	4618      	mov	r0, r3
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
	...

08004814 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800481c:	2300      	movs	r3, #0
 800481e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	3301      	adds	r3, #1
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4a13      	ldr	r2, [pc, #76]	; (8004878 <USB_CoreReset+0x64>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d901      	bls.n	8004832 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e01b      	b.n	800486a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	2b00      	cmp	r3, #0
 8004838:	daf2      	bge.n	8004820 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800483a:	2300      	movs	r3, #0
 800483c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f043 0201 	orr.w	r2, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	3301      	adds	r3, #1
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4a09      	ldr	r2, [pc, #36]	; (8004878 <USB_CoreReset+0x64>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d901      	bls.n	800485c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e006      	b.n	800486a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b01      	cmp	r3, #1
 8004866:	d0f0      	beq.n	800484a <USB_CoreReset+0x36>

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	00030d40 	.word	0x00030d40

0800487c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800487c:	b084      	sub	sp, #16
 800487e:	b580      	push	{r7, lr}
 8004880:	b084      	sub	sp, #16
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	f107 001c 	add.w	r0, r7, #28
 800488a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004898:	461a      	mov	r2, r3
 800489a:	2300      	movs	r3, #0
 800489c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ae:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ba:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d018      	beq.n	8004900 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d10a      	bne.n	80048ea <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048e2:	f043 0304 	orr.w	r3, r3, #4
 80048e6:	6013      	str	r3, [r2, #0]
 80048e8:	e014      	b.n	8004914 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048f8:	f023 0304 	bic.w	r3, r3, #4
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	e009      	b.n	8004914 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800490e:	f023 0304 	bic.w	r3, r3, #4
 8004912:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004914:	2110      	movs	r1, #16
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7ff feb4 	bl	8004684 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7ff fed7 	bl	80046d0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004922:	2300      	movs	r3, #0
 8004924:	60fb      	str	r3, [r7, #12]
 8004926:	e015      	b.n	8004954 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	4413      	add	r3, r2
 8004930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004934:	461a      	mov	r2, r3
 8004936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800493a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	4413      	add	r3, r2
 8004944:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004948:	461a      	mov	r2, r3
 800494a:	2300      	movs	r3, #0
 800494c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	3301      	adds	r3, #1
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	6a3b      	ldr	r3, [r7, #32]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	429a      	cmp	r2, r3
 800495a:	d3e5      	bcc.n	8004928 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800495c:	2101      	movs	r1, #1
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f882 	bl	8004a68 <USB_DriveVbus>

  HAL_Delay(200U);
 8004964:	20c8      	movs	r0, #200	; 0xc8
 8004966:	f7fc fa3f 	bl	8000de8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004976:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00b      	beq.n	800499c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800498a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a14      	ldr	r2, [pc, #80]	; (80049e0 <USB_HostInit+0x164>)
 8004990:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a13      	ldr	r2, [pc, #76]	; (80049e4 <USB_HostInit+0x168>)
 8004996:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800499a:	e009      	b.n	80049b0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2280      	movs	r2, #128	; 0x80
 80049a0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a10      	ldr	r2, [pc, #64]	; (80049e8 <USB_HostInit+0x16c>)
 80049a6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a10      	ldr	r2, [pc, #64]	; (80049ec <USB_HostInit+0x170>)
 80049ac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80049b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d105      	bne.n	80049c2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	f043 0210 	orr.w	r2, r3, #16
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	4b0a      	ldr	r3, [pc, #40]	; (80049f0 <USB_HostInit+0x174>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049da:	b004      	add	sp, #16
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	01000200 	.word	0x01000200
 80049e4:	00e00300 	.word	0x00e00300
 80049e8:	00600080 	.word	0x00600080
 80049ec:	004000e0 	.word	0x004000e0
 80049f0:	a3200008 	.word	0xa3200008

080049f4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	460b      	mov	r3, r1
 80049fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a12:	f023 0303 	bic.w	r3, r3, #3
 8004a16:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	78fb      	ldrb	r3, [r7, #3]
 8004a22:	f003 0303 	and.w	r3, r3, #3
 8004a26:	68f9      	ldr	r1, [r7, #12]
 8004a28:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004a30:	78fb      	ldrb	r3, [r7, #3]
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d107      	bne.n	8004a46 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004a42:	6053      	str	r3, [r2, #4]
 8004a44:	e009      	b.n	8004a5a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004a46:	78fb      	ldrb	r3, [r7, #3]
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d106      	bne.n	8004a5a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a52:	461a      	mov	r2, r3
 8004a54:	f241 7370 	movw	r3, #6000	; 0x1770
 8004a58:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	460b      	mov	r3, r1
 8004a72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004a8c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d109      	bne.n	8004aac <USB_DriveVbus+0x44>
 8004a98:	78fb      	ldrb	r3, [r7, #3]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d106      	bne.n	8004aac <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004aa6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004aaa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab6:	d109      	bne.n	8004acc <USB_DriveVbus+0x64>
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d106      	bne.n	8004acc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004ac6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004aca:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b085      	sub	sp, #20
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	b29b      	uxth	r3, r3
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	4608      	mov	r0, r1
 8004b06:	4611      	mov	r1, r2
 8004b08:	461a      	mov	r2, r3
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	70fb      	strb	r3, [r7, #3]
 8004b0e:	460b      	mov	r3, r1
 8004b10:	70bb      	strb	r3, [r7, #2]
 8004b12:	4613      	mov	r3, r2
 8004b14:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004b1e:	78fb      	ldrb	r3, [r7, #3]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b30:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004b32:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b36:	2b03      	cmp	r3, #3
 8004b38:	d87e      	bhi.n	8004c38 <USB_HC_Init+0x13c>
 8004b3a:	a201      	add	r2, pc, #4	; (adr r2, 8004b40 <USB_HC_Init+0x44>)
 8004b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b40:	08004b51 	.word	0x08004b51
 8004b44:	08004bfb 	.word	0x08004bfb
 8004b48:	08004b51 	.word	0x08004b51
 8004b4c:	08004bbd 	.word	0x08004bbd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004b50:	78fb      	ldrb	r3, [r7, #3]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	f240 439d 	movw	r3, #1181	; 0x49d
 8004b62:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004b64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	da10      	bge.n	8004b8e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004b6c:	78fb      	ldrb	r3, [r7, #3]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	78fa      	ldrb	r2, [r7, #3]
 8004b7c:	0151      	lsls	r1, r2, #5
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	440a      	add	r2, r1
 8004b82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b8a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004b8c:	e057      	b.n	8004c3e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d051      	beq.n	8004c3e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	015a      	lsls	r2, r3, #5
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	78fa      	ldrb	r2, [r7, #3]
 8004baa:	0151      	lsls	r1, r2, #5
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	440a      	add	r2, r1
 8004bb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bb4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004bb8:	60d3      	str	r3, [r2, #12]
      break;
 8004bba:	e040      	b.n	8004c3e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004bbc:	78fb      	ldrb	r3, [r7, #3]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bc8:	461a      	mov	r2, r3
 8004bca:	f240 639d 	movw	r3, #1693	; 0x69d
 8004bce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004bd0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	da34      	bge.n	8004c42 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004bd8:	78fb      	ldrb	r3, [r7, #3]
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	78fa      	ldrb	r2, [r7, #3]
 8004be8:	0151      	lsls	r1, r2, #5
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	440a      	add	r2, r1
 8004bee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004bf8:	e023      	b.n	8004c42 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004bfa:	78fb      	ldrb	r3, [r7, #3]
 8004bfc:	015a      	lsls	r2, r3, #5
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	4413      	add	r3, r2
 8004c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c06:	461a      	mov	r2, r3
 8004c08:	f240 2325 	movw	r3, #549	; 0x225
 8004c0c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004c0e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	da17      	bge.n	8004c46 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004c16:	78fb      	ldrb	r3, [r7, #3]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	78fa      	ldrb	r2, [r7, #3]
 8004c26:	0151      	lsls	r1, r2, #5
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	440a      	add	r2, r1
 8004c2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c30:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004c34:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004c36:	e006      	b.n	8004c46 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c3c:	e004      	b.n	8004c48 <USB_HC_Init+0x14c>
      break;
 8004c3e:	bf00      	nop
 8004c40:	e002      	b.n	8004c48 <USB_HC_Init+0x14c>
      break;
 8004c42:	bf00      	nop
 8004c44:	e000      	b.n	8004c48 <USB_HC_Init+0x14c>
      break;
 8004c46:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c4e:	699a      	ldr	r2, [r3, #24]
 8004c50:	78fb      	ldrb	r3, [r7, #3]
 8004c52:	f003 030f 	and.w	r3, r3, #15
 8004c56:	2101      	movs	r1, #1
 8004c58:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5c:	68b9      	ldr	r1, [r7, #8]
 8004c5e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c62:	4313      	orrs	r3, r2
 8004c64:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004c72:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	da03      	bge.n	8004c82 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c7e:	613b      	str	r3, [r7, #16]
 8004c80:	e001      	b.n	8004c86 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004c82:	2300      	movs	r3, #0
 8004c84:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004c86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d103      	bne.n	8004c96 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004c8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	e001      	b.n	8004c9a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004c9a:	787b      	ldrb	r3, [r7, #1]
 8004c9c:	059b      	lsls	r3, r3, #22
 8004c9e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004ca2:	78bb      	ldrb	r3, [r7, #2]
 8004ca4:	02db      	lsls	r3, r3, #11
 8004ca6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004caa:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004cac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004cb0:	049b      	lsls	r3, r3, #18
 8004cb2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004cb6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004cb8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004cba:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004cbe:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004cc4:	78fb      	ldrb	r3, [r7, #3]
 8004cc6:	0159      	lsls	r1, r3, #5
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	440b      	add	r3, r1
 8004ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004cd6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004cd8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004cdc:	2b03      	cmp	r3, #3
 8004cde:	d10f      	bne.n	8004d00 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004ce0:	78fb      	ldrb	r3, [r7, #3]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	78fa      	ldrb	r2, [r7, #3]
 8004cf0:	0151      	lsls	r1, r2, #5
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	440a      	add	r2, r1
 8004cf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cfa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cfe:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	371c      	adds	r7, #28
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop

08004d10 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b08c      	sub	sp, #48	; 0x30
 8004d14:	af02      	add	r7, sp, #8
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	785b      	ldrb	r3, [r3, #1]
 8004d26:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004d28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d2c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d028      	beq.n	8004d8c <USB_HC_StartXfer+0x7c>
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	791b      	ldrb	r3, [r3, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d124      	bne.n	8004d8c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004d42:	79fb      	ldrb	r3, [r7, #7]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10b      	bne.n	8004d60 <USB_HC_StartXfer+0x50>
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	795b      	ldrb	r3, [r3, #5]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d107      	bne.n	8004d60 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	785b      	ldrb	r3, [r3, #1]
 8004d54:	4619      	mov	r1, r3
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f000 fa30 	bl	80051bc <USB_DoPing>
      return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	e114      	b.n	8004f8a <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8004d60:	79fb      	ldrb	r3, [r7, #7]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d112      	bne.n	8004d8c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	69fa      	ldr	r2, [r7, #28]
 8004d76:	0151      	lsls	r1, r2, #5
 8004d78:	6a3a      	ldr	r2, [r7, #32]
 8004d7a:	440a      	add	r2, r1
 8004d7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d80:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004d84:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d018      	beq.n	8004dc6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	8912      	ldrh	r2, [r2, #8]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	8912      	ldrh	r2, [r2, #8]
 8004da4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004da8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004daa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004dac:	8b7b      	ldrh	r3, [r7, #26]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d90b      	bls.n	8004dca <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004db2:	8b7b      	ldrh	r3, [r7, #26]
 8004db4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004db6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	8912      	ldrh	r2, [r2, #8]
 8004dbc:	fb02 f203 	mul.w	r2, r2, r3
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	611a      	str	r2, [r3, #16]
 8004dc4:	e001      	b.n	8004dca <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	78db      	ldrb	r3, [r3, #3]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d006      	beq.n	8004de0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004dd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004dd4:	68ba      	ldr	r2, [r7, #8]
 8004dd6:	8912      	ldrh	r2, [r2, #8]
 8004dd8:	fb02 f203 	mul.w	r2, r2, r3
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004de8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004dea:	04d9      	lsls	r1, r3, #19
 8004dec:	4b69      	ldr	r3, [pc, #420]	; (8004f94 <USB_HC_StartXfer+0x284>)
 8004dee:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004df0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	7a9b      	ldrb	r3, [r3, #10]
 8004df6:	075b      	lsls	r3, r3, #29
 8004df8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004dfc:	69f9      	ldr	r1, [r7, #28]
 8004dfe:	0148      	lsls	r0, r1, #5
 8004e00:	6a39      	ldr	r1, [r7, #32]
 8004e02:	4401      	add	r1, r0
 8004e04:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004e08:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004e0a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004e0c:	79fb      	ldrb	r3, [r7, #7]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d009      	beq.n	8004e26 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	68d9      	ldr	r1, [r3, #12]
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e22:	460a      	mov	r2, r1
 8004e24:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	bf0c      	ite	eq
 8004e36:	2301      	moveq	r3, #1
 8004e38:	2300      	movne	r3, #0
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	69fa      	ldr	r2, [r7, #28]
 8004e4e:	0151      	lsls	r1, r2, #5
 8004e50:	6a3a      	ldr	r2, [r7, #32]
 8004e52:	440a      	add	r2, r1
 8004e54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e58:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004e5c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	7e7b      	ldrb	r3, [r7, #25]
 8004e6e:	075b      	lsls	r3, r3, #29
 8004e70:	69f9      	ldr	r1, [r7, #28]
 8004e72:	0148      	lsls	r0, r1, #5
 8004e74:	6a39      	ldr	r1, [r7, #32]
 8004e76:	4401      	add	r1, r0
 8004e78:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a42      	ldr	r2, [pc, #264]	; (8004f98 <USB_HC_StartXfer+0x288>)
 8004e90:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e92:	4b41      	ldr	r3, [pc, #260]	; (8004f98 <USB_HC_StartXfer+0x288>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e9a:	4a3f      	ldr	r2, [pc, #252]	; (8004f98 <USB_HC_StartXfer+0x288>)
 8004e9c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	78db      	ldrb	r3, [r3, #3]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d006      	beq.n	8004eb4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004ea6:	4b3c      	ldr	r3, [pc, #240]	; (8004f98 <USB_HC_StartXfer+0x288>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eae:	4a3a      	ldr	r2, [pc, #232]	; (8004f98 <USB_HC_StartXfer+0x288>)
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	e005      	b.n	8004ec0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004eb4:	4b38      	ldr	r3, [pc, #224]	; (8004f98 <USB_HC_StartXfer+0x288>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ebc:	4a36      	ldr	r2, [pc, #216]	; (8004f98 <USB_HC_StartXfer+0x288>)
 8004ebe:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ec0:	4b35      	ldr	r3, [pc, #212]	; (8004f98 <USB_HC_StartXfer+0x288>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ec8:	4a33      	ldr	r2, [pc, #204]	; (8004f98 <USB_HC_StartXfer+0x288>)
 8004eca:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed8:	461a      	mov	r2, r3
 8004eda:	4b2f      	ldr	r3, [pc, #188]	; (8004f98 <USB_HC_StartXfer+0x288>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004ee0:	79fb      	ldrb	r3, [r7, #7]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	e04f      	b.n	8004f8a <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	78db      	ldrb	r3, [r3, #3]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d14a      	bne.n	8004f88 <USB_HC_StartXfer+0x278>
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d046      	beq.n	8004f88 <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	79db      	ldrb	r3, [r3, #7]
 8004efe:	2b03      	cmp	r3, #3
 8004f00:	d830      	bhi.n	8004f64 <USB_HC_StartXfer+0x254>
 8004f02:	a201      	add	r2, pc, #4	; (adr r2, 8004f08 <USB_HC_StartXfer+0x1f8>)
 8004f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f08:	08004f19 	.word	0x08004f19
 8004f0c:	08004f3d 	.word	0x08004f3d
 8004f10:	08004f19 	.word	0x08004f19
 8004f14:	08004f3d 	.word	0x08004f3d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	3303      	adds	r3, #3
 8004f1e:	089b      	lsrs	r3, r3, #2
 8004f20:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004f22:	8afa      	ldrh	r2, [r7, #22]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d91c      	bls.n	8004f68 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	f043 0220 	orr.w	r2, r3, #32
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	619a      	str	r2, [r3, #24]
        }
        break;
 8004f3a:	e015      	b.n	8004f68 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	3303      	adds	r3, #3
 8004f42:	089b      	lsrs	r3, r3, #2
 8004f44:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004f46:	8afa      	ldrh	r2, [r7, #22]
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d90a      	bls.n	8004f6c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	619a      	str	r2, [r3, #24]
        }
        break;
 8004f62:	e003      	b.n	8004f6c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8004f64:	bf00      	nop
 8004f66:	e002      	b.n	8004f6e <USB_HC_StartXfer+0x25e>
        break;
 8004f68:	bf00      	nop
 8004f6a:	e000      	b.n	8004f6e <USB_HC_StartXfer+0x25e>
        break;
 8004f6c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	68d9      	ldr	r1, [r3, #12]
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	785a      	ldrb	r2, [r3, #1]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	b298      	uxth	r0, r3
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	4603      	mov	r3, r0
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f7ff fbc6 	bl	8004714 <USB_WritePacket>
  }

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3728      	adds	r7, #40	; 0x28
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	1ff80000 	.word	0x1ff80000
 8004f98:	200000b0 	.word	0x200000b0

08004f9c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	b29b      	uxth	r3, r3
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3714      	adds	r7, #20
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b087      	sub	sp, #28
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004fce:	78fb      	ldrb	r3, [r7, #3]
 8004fd0:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	0c9b      	lsrs	r3, r3, #18
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d002      	beq.n	8004ff8 <USB_HC_Halt+0x3a>
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d16c      	bne.n	80050d2 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	015a      	lsls	r2, r3, #5
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	4413      	add	r3, r2
 8005000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	0151      	lsls	r1, r2, #5
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	440a      	add	r2, r1
 800500e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005012:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005016:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d143      	bne.n	80050ac <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	4413      	add	r3, r2
 800502c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	0151      	lsls	r1, r2, #5
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	440a      	add	r2, r1
 800503a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800503e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005042:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	4413      	add	r3, r2
 800504c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	0151      	lsls	r1, r2, #5
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	440a      	add	r2, r1
 800505a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800505e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005062:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	4413      	add	r3, r2
 800506c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	0151      	lsls	r1, r2, #5
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	440a      	add	r2, r1
 800507a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800507e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005082:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	3301      	adds	r3, #1
 8005088:	617b      	str	r3, [r7, #20]
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005090:	d81d      	bhi.n	80050ce <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	015a      	lsls	r2, r3, #5
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	4413      	add	r3, r2
 800509a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050a8:	d0ec      	beq.n	8005084 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80050aa:	e080      	b.n	80051ae <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	0151      	lsls	r1, r2, #5
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	440a      	add	r2, r1
 80050c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050ca:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80050cc:	e06f      	b.n	80051ae <USB_HC_Halt+0x1f0>
          break;
 80050ce:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80050d0:	e06d      	b.n	80051ae <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	0151      	lsls	r1, r2, #5
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	440a      	add	r2, r1
 80050e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050f0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d143      	bne.n	800518a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	015a      	lsls	r2, r3, #5
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	4413      	add	r3, r2
 800510a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	0151      	lsls	r1, r2, #5
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	440a      	add	r2, r1
 8005118:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800511c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005120:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	4413      	add	r3, r2
 800512a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	0151      	lsls	r1, r2, #5
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	440a      	add	r2, r1
 8005138:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800513c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005140:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	4413      	add	r3, r2
 800514a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	0151      	lsls	r1, r2, #5
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	440a      	add	r2, r1
 8005158:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800515c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005160:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	3301      	adds	r3, #1
 8005166:	617b      	str	r3, [r7, #20]
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800516e:	d81d      	bhi.n	80051ac <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	4413      	add	r3, r2
 8005178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005182:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005186:	d0ec      	beq.n	8005162 <USB_HC_Halt+0x1a4>
 8005188:	e011      	b.n	80051ae <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	015a      	lsls	r2, r3, #5
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	4413      	add	r3, r2
 8005192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	0151      	lsls	r1, r2, #5
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	440a      	add	r2, r1
 80051a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	e000      	b.n	80051ae <USB_HC_Halt+0x1f0>
          break;
 80051ac:	bf00      	nop
    }
  }

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	371c      	adds	r7, #28
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	460b      	mov	r3, r1
 80051c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80051cc:	78fb      	ldrb	r3, [r7, #3]
 80051ce:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80051d0:	2301      	movs	r3, #1
 80051d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	04da      	lsls	r2, r3, #19
 80051d8:	4b15      	ldr	r3, [pc, #84]	; (8005230 <USB_DoPing+0x74>)
 80051da:	4013      	ands	r3, r2
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	0151      	lsls	r1, r2, #5
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	440a      	add	r2, r1
 80051e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051ec:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005204:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800520c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	4413      	add	r3, r2
 8005216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800521a:	461a      	mov	r2, r3
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	371c      	adds	r7, #28
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	1ff80000 	.word	0x1ff80000

08005234 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7ff f9e1 	bl	800460c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800524a:	2110      	movs	r1, #16
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff fa19 	bl	8004684 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7ff fa3c 	bl	80046d0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005258:	2300      	movs	r3, #0
 800525a:	613b      	str	r3, [r7, #16]
 800525c:	e01f      	b.n	800529e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4413      	add	r3, r2
 8005266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005274:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800527c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005284:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	4413      	add	r3, r2
 800528e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005292:	461a      	mov	r2, r3
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	3301      	adds	r3, #1
 800529c:	613b      	str	r3, [r7, #16]
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b0f      	cmp	r3, #15
 80052a2:	d9dc      	bls.n	800525e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80052a4:	2300      	movs	r3, #0
 80052a6:	613b      	str	r3, [r7, #16]
 80052a8:	e034      	b.n	8005314 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052c0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052c8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052d0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052de:	461a      	mov	r2, r3
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	3301      	adds	r3, #1
 80052e8:	617b      	str	r3, [r7, #20]
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052f0:	d80c      	bhi.n	800530c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005304:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005308:	d0ec      	beq.n	80052e4 <USB_StopHost+0xb0>
 800530a:	e000      	b.n	800530e <USB_StopHost+0xda>
        break;
 800530c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	3301      	adds	r3, #1
 8005312:	613b      	str	r3, [r7, #16]
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	2b0f      	cmp	r3, #15
 8005318:	d9c7      	bls.n	80052aa <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005320:	461a      	mov	r2, r3
 8005322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005326:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800532e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7ff f95a 	bl	80045ea <USB_EnableGlobalInt>

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3718      	adds	r7, #24
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005340:	b590      	push	{r4, r7, lr}
 8005342:	b089      	sub	sp, #36	; 0x24
 8005344:	af04      	add	r7, sp, #16
 8005346:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005348:	2301      	movs	r3, #1
 800534a:	2202      	movs	r2, #2
 800534c:	2102      	movs	r1, #2
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fc68 	bl	8005c24 <USBH_FindInterface>
 8005354:	4603      	mov	r3, r0
 8005356:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005358:	7bfb      	ldrb	r3, [r7, #15]
 800535a:	2bff      	cmp	r3, #255	; 0xff
 800535c:	d002      	beq.n	8005364 <USBH_CDC_InterfaceInit+0x24>
 800535e:	7bfb      	ldrb	r3, [r7, #15]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d901      	bls.n	8005368 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005364:	2302      	movs	r3, #2
 8005366:	e13d      	b.n	80055e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005368:	7bfb      	ldrb	r3, [r7, #15]
 800536a:	4619      	mov	r1, r3
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 fc3d 	bl	8005bec <USBH_SelectInterface>
 8005372:	4603      	mov	r3, r0
 8005374:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005376:	7bbb      	ldrb	r3, [r7, #14]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800537c:	2302      	movs	r3, #2
 800537e:	e131      	b.n	80055e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005386:	2050      	movs	r0, #80	; 0x50
 8005388:	f001 fb1a 	bl	80069c0 <malloc>
 800538c:	4603      	mov	r3, r0
 800538e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80053a0:	2302      	movs	r3, #2
 80053a2:	e11f      	b.n	80055e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80053a4:	2250      	movs	r2, #80	; 0x50
 80053a6:	2100      	movs	r1, #0
 80053a8:	68b8      	ldr	r0, [r7, #8]
 80053aa:	f001 fb19 	bl	80069e0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	211a      	movs	r1, #26
 80053b4:	fb01 f303 	mul.w	r3, r1, r3
 80053b8:	4413      	add	r3, r2
 80053ba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	b25b      	sxtb	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	da15      	bge.n	80053f2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	211a      	movs	r1, #26
 80053cc:	fb01 f303 	mul.w	r3, r1, r3
 80053d0:	4413      	add	r3, r2
 80053d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80053d6:	781a      	ldrb	r2, [r3, #0]
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80053dc:	7bfb      	ldrb	r3, [r7, #15]
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	211a      	movs	r1, #26
 80053e2:	fb01 f303 	mul.w	r3, r1, r3
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80053ec:	881a      	ldrh	r2, [r3, #0]
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	785b      	ldrb	r3, [r3, #1]
 80053f6:	4619      	mov	r1, r3
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 ffa0 	bl	800633e <USBH_AllocPipe>
 80053fe:	4603      	mov	r3, r0
 8005400:	461a      	mov	r2, r3
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	7819      	ldrb	r1, [r3, #0]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	7858      	ldrb	r0, [r3, #1]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	8952      	ldrh	r2, [r2, #10]
 800541e:	9202      	str	r2, [sp, #8]
 8005420:	2203      	movs	r2, #3
 8005422:	9201      	str	r2, [sp, #4]
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	4623      	mov	r3, r4
 8005428:	4602      	mov	r2, r0
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 ff58 	bl	80062e0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	2200      	movs	r2, #0
 8005436:	4619      	mov	r1, r3
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f001 fa1b 	bl	8006874 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800543e:	2300      	movs	r3, #0
 8005440:	2200      	movs	r2, #0
 8005442:	210a      	movs	r1, #10
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 fbed 	bl	8005c24 <USBH_FindInterface>
 800544a:	4603      	mov	r3, r0
 800544c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800544e:	7bfb      	ldrb	r3, [r7, #15]
 8005450:	2bff      	cmp	r3, #255	; 0xff
 8005452:	d002      	beq.n	800545a <USBH_CDC_InterfaceInit+0x11a>
 8005454:	7bfb      	ldrb	r3, [r7, #15]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d901      	bls.n	800545e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800545a:	2302      	movs	r3, #2
 800545c:	e0c2      	b.n	80055e4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800545e:	7bfb      	ldrb	r3, [r7, #15]
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	211a      	movs	r1, #26
 8005464:	fb01 f303 	mul.w	r3, r1, r3
 8005468:	4413      	add	r3, r2
 800546a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	b25b      	sxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	da16      	bge.n	80054a4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005476:	7bfb      	ldrb	r3, [r7, #15]
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	211a      	movs	r1, #26
 800547c:	fb01 f303 	mul.w	r3, r1, r3
 8005480:	4413      	add	r3, r2
 8005482:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005486:	781a      	ldrb	r2, [r3, #0]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800548c:	7bfb      	ldrb	r3, [r7, #15]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	211a      	movs	r1, #26
 8005492:	fb01 f303 	mul.w	r3, r1, r3
 8005496:	4413      	add	r3, r2
 8005498:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800549c:	881a      	ldrh	r2, [r3, #0]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	835a      	strh	r2, [r3, #26]
 80054a2:	e015      	b.n	80054d0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	211a      	movs	r1, #26
 80054aa:	fb01 f303 	mul.w	r3, r1, r3
 80054ae:	4413      	add	r3, r2
 80054b0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80054b4:	781a      	ldrb	r2, [r3, #0]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80054ba:	7bfb      	ldrb	r3, [r7, #15]
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	211a      	movs	r1, #26
 80054c0:	fb01 f303 	mul.w	r3, r1, r3
 80054c4:	4413      	add	r3, r2
 80054c6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80054ca:	881a      	ldrh	r2, [r3, #0]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80054d0:	7bfb      	ldrb	r3, [r7, #15]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	211a      	movs	r1, #26
 80054d6:	fb01 f303 	mul.w	r3, r1, r3
 80054da:	4413      	add	r3, r2
 80054dc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	b25b      	sxtb	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	da16      	bge.n	8005516 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80054e8:	7bfb      	ldrb	r3, [r7, #15]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	211a      	movs	r1, #26
 80054ee:	fb01 f303 	mul.w	r3, r1, r3
 80054f2:	4413      	add	r3, r2
 80054f4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80054f8:	781a      	ldrb	r2, [r3, #0]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80054fe:	7bfb      	ldrb	r3, [r7, #15]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	211a      	movs	r1, #26
 8005504:	fb01 f303 	mul.w	r3, r1, r3
 8005508:	4413      	add	r3, r2
 800550a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800550e:	881a      	ldrh	r2, [r3, #0]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	835a      	strh	r2, [r3, #26]
 8005514:	e015      	b.n	8005542 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005516:	7bfb      	ldrb	r3, [r7, #15]
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	211a      	movs	r1, #26
 800551c:	fb01 f303 	mul.w	r3, r1, r3
 8005520:	4413      	add	r3, r2
 8005522:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005526:	781a      	ldrb	r2, [r3, #0]
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800552c:	7bfb      	ldrb	r3, [r7, #15]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	211a      	movs	r1, #26
 8005532:	fb01 f303 	mul.w	r3, r1, r3
 8005536:	4413      	add	r3, r2
 8005538:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800553c:	881a      	ldrh	r2, [r3, #0]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	7b9b      	ldrb	r3, [r3, #14]
 8005546:	4619      	mov	r1, r3
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 fef8 	bl	800633e <USBH_AllocPipe>
 800554e:	4603      	mov	r3, r0
 8005550:	461a      	mov	r2, r3
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	7bdb      	ldrb	r3, [r3, #15]
 800555a:	4619      	mov	r1, r3
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 feee 	bl	800633e <USBH_AllocPipe>
 8005562:	4603      	mov	r3, r0
 8005564:	461a      	mov	r2, r3
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	7b59      	ldrb	r1, [r3, #13]
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	7b98      	ldrb	r0, [r3, #14]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	8b12      	ldrh	r2, [r2, #24]
 8005582:	9202      	str	r2, [sp, #8]
 8005584:	2202      	movs	r2, #2
 8005586:	9201      	str	r2, [sp, #4]
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	4623      	mov	r3, r4
 800558c:	4602      	mov	r2, r0
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 fea6 	bl	80062e0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	7b19      	ldrb	r1, [r3, #12]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	7bd8      	ldrb	r0, [r3, #15]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	8b52      	ldrh	r2, [r2, #26]
 80055ac:	9202      	str	r2, [sp, #8]
 80055ae:	2202      	movs	r2, #2
 80055b0:	9201      	str	r2, [sp, #4]
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	4623      	mov	r3, r4
 80055b6:	4602      	mov	r2, r0
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f000 fe91 	bl	80062e0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	7b5b      	ldrb	r3, [r3, #13]
 80055ca:	2200      	movs	r2, #0
 80055cc:	4619      	mov	r1, r3
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f001 f950 	bl	8006874 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	7b1b      	ldrb	r3, [r3, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	4619      	mov	r1, r3
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f001 f949 	bl	8006874 <USBH_LL_SetToggle>

  return USBH_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd90      	pop	{r4, r7, pc}

080055ec <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	781b      	ldrb	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00e      	beq.n	8005624 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	4619      	mov	r1, r3
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 fe86 	bl	800631e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	4619      	mov	r1, r3
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 feb1 	bl	8006380 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	7b1b      	ldrb	r3, [r3, #12]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00e      	beq.n	800564a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	7b1b      	ldrb	r3, [r3, #12]
 8005630:	4619      	mov	r1, r3
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 fe73 	bl	800631e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	7b1b      	ldrb	r3, [r3, #12]
 800563c:	4619      	mov	r1, r3
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 fe9e 	bl	8006380 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	7b5b      	ldrb	r3, [r3, #13]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00e      	beq.n	8005670 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	7b5b      	ldrb	r3, [r3, #13]
 8005656:	4619      	mov	r1, r3
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f000 fe60 	bl	800631e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	7b5b      	ldrb	r3, [r3, #13]
 8005662:	4619      	mov	r1, r3
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 fe8b 	bl	8006380 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00b      	beq.n	8005694 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005682:	69db      	ldr	r3, [r3, #28]
 8005684:	4618      	mov	r0, r3
 8005686:	f001 f9a3 	bl	80069d0 <free>
    phost->pActiveClass->pData = 0U;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005690:	2200      	movs	r2, #0
 8005692:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b084      	sub	sp, #16
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	3340      	adds	r3, #64	; 0x40
 80056b4:	4619      	mov	r1, r3
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f8b1 	bl	800581e <GetLineCoding>
 80056bc:	4603      	mov	r3, r0
 80056be:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80056c0:	7afb      	ldrb	r3, [r7, #11]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d105      	bne.n	80056d2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80056cc:	2102      	movs	r1, #2
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80056d2:	7afb      	ldrb	r3, [r7, #11]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80056e4:	2301      	movs	r3, #1
 80056e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80056e8:	2300      	movs	r3, #0
 80056ea:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80056f2:	69db      	ldr	r3, [r3, #28]
 80056f4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80056fc:	2b04      	cmp	r3, #4
 80056fe:	d877      	bhi.n	80057f0 <USBH_CDC_Process+0x114>
 8005700:	a201      	add	r2, pc, #4	; (adr r2, 8005708 <USBH_CDC_Process+0x2c>)
 8005702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005706:	bf00      	nop
 8005708:	0800571d 	.word	0x0800571d
 800570c:	08005723 	.word	0x08005723
 8005710:	08005753 	.word	0x08005753
 8005714:	080057c7 	.word	0x080057c7
 8005718:	080057d5 	.word	0x080057d5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800571c:	2300      	movs	r3, #0
 800571e:	73fb      	strb	r3, [r7, #15]
      break;
 8005720:	e06d      	b.n	80057fe <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005726:	4619      	mov	r1, r3
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 f897 	bl	800585c <SetLineCoding>
 800572e:	4603      	mov	r3, r0
 8005730:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005732:	7bbb      	ldrb	r3, [r7, #14]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d104      	bne.n	8005742 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005740:	e058      	b.n	80057f4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005742:	7bbb      	ldrb	r3, [r7, #14]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d055      	beq.n	80057f4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2204      	movs	r2, #4
 800574c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005750:	e050      	b.n	80057f4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	3340      	adds	r3, #64	; 0x40
 8005756:	4619      	mov	r1, r3
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f860 	bl	800581e <GetLineCoding>
 800575e:	4603      	mov	r3, r0
 8005760:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005762:	7bbb      	ldrb	r3, [r7, #14]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d126      	bne.n	80057b6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800577a:	791b      	ldrb	r3, [r3, #4]
 800577c:	429a      	cmp	r2, r3
 800577e:	d13b      	bne.n	80057f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800578a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800578c:	429a      	cmp	r2, r3
 800578e:	d133      	bne.n	80057f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800579a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800579c:	429a      	cmp	r2, r3
 800579e:	d12b      	bne.n	80057f8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057a8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d124      	bne.n	80057f8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f95a 	bl	8005a68 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80057b4:	e020      	b.n	80057f8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80057b6:	7bbb      	ldrb	r3, [r7, #14]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d01d      	beq.n	80057f8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	2204      	movs	r2, #4
 80057c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80057c4:	e018      	b.n	80057f8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f867 	bl	800589a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f8dc 	bl	800598a <CDC_ProcessReception>
      break;
 80057d2:	e014      	b.n	80057fe <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80057d4:	2100      	movs	r1, #0
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fb0a 	bl	8005df0 <USBH_ClrFeature>
 80057dc:	4603      	mov	r3, r0
 80057de:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80057e0:	7bbb      	ldrb	r3, [r7, #14]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10a      	bne.n	80057fc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80057ee:	e005      	b.n	80057fc <USBH_CDC_Process+0x120>

    default:
      break;
 80057f0:	bf00      	nop
 80057f2:	e004      	b.n	80057fe <USBH_CDC_Process+0x122>
      break;
 80057f4:	bf00      	nop
 80057f6:	e002      	b.n	80057fe <USBH_CDC_Process+0x122>
      break;
 80057f8:	bf00      	nop
 80057fa:	e000      	b.n	80057fe <USBH_CDC_Process+0x122>
      break;
 80057fc:	bf00      	nop

  }

  return status;
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b082      	sub	sp, #8
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	22a1      	movs	r2, #161	; 0xa1
 800582c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2221      	movs	r2, #33	; 0x21
 8005832:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2207      	movs	r2, #7
 8005844:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2207      	movs	r2, #7
 800584a:	4619      	mov	r1, r3
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 faf3 	bl	8005e38 <USBH_CtlReq>
 8005852:	4603      	mov	r3, r0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2221      	movs	r2, #33	; 0x21
 800586a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2220      	movs	r2, #32
 8005870:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2207      	movs	r2, #7
 8005882:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	2207      	movs	r2, #7
 8005888:	4619      	mov	r1, r3
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 fad4 	bl	8005e38 <USBH_CtlReq>
 8005890:	4603      	mov	r3, r0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b086      	sub	sp, #24
 800589e:	af02      	add	r7, sp, #8
 80058a0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80058ac:	2300      	movs	r3, #0
 80058ae:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d002      	beq.n	80058c0 <CDC_ProcessTransmission+0x26>
 80058ba:	2b02      	cmp	r3, #2
 80058bc:	d025      	beq.n	800590a <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80058be:	e060      	b.n	8005982 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	8b12      	ldrh	r2, [r2, #24]
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d90c      	bls.n	80058e6 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	69d9      	ldr	r1, [r3, #28]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8b1a      	ldrh	r2, [r3, #24]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	7b58      	ldrb	r0, [r3, #13]
 80058d8:	2301      	movs	r3, #1
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	4603      	mov	r3, r0
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fcbb 	bl	800625a <USBH_BulkSendData>
 80058e4:	e00c      	b.n	8005900 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	7b58      	ldrb	r0, [r3, #13]
 80058f4:	2301      	movs	r3, #1
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	4603      	mov	r3, r0
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fcad 	bl	800625a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005908:	e03b      	b.n	8005982 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	7b5b      	ldrb	r3, [r3, #13]
 800590e:	4619      	mov	r1, r3
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 ff85 	bl	8006820 <USBH_LL_GetURBState>
 8005916:	4603      	mov	r3, r0
 8005918:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800591a:	7afb      	ldrb	r3, [r7, #11]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d128      	bne.n	8005972 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	8b12      	ldrh	r2, [r2, #24]
 8005928:	4293      	cmp	r3, r2
 800592a:	d90e      	bls.n	800594a <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	8b12      	ldrh	r2, [r2, #24]
 8005934:	1a9a      	subs	r2, r3, r2
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	69db      	ldr	r3, [r3, #28]
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	8b12      	ldrh	r2, [r2, #24]
 8005942:	441a      	add	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	61da      	str	r2, [r3, #28]
 8005948:	e002      	b.n	8005950 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	2b00      	cmp	r3, #0
 8005956:	d004      	beq.n	8005962 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005960:	e00e      	b.n	8005980 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f868 	bl	8005a40 <USBH_CDC_TransmitCallback>
      break;
 8005970:	e006      	b.n	8005980 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8005972:	7afb      	ldrb	r3, [r7, #11]
 8005974:	2b02      	cmp	r3, #2
 8005976:	d103      	bne.n	8005980 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005980:	bf00      	nop
  }
}
 8005982:	bf00      	nop
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800598a:	b580      	push	{r7, lr}
 800598c:	b086      	sub	sp, #24
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800599c:	2300      	movs	r3, #0
 800599e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80059a6:	2b03      	cmp	r3, #3
 80059a8:	d002      	beq.n	80059b0 <CDC_ProcessReception+0x26>
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	d00e      	beq.n	80059cc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80059ae:	e043      	b.n	8005a38 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	6a19      	ldr	r1, [r3, #32]
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	8b5a      	ldrh	r2, [r3, #26]
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	7b1b      	ldrb	r3, [r3, #12]
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fc71 	bl	80062a4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	2204      	movs	r2, #4
 80059c6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80059ca:	e035      	b.n	8005a38 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	7b1b      	ldrb	r3, [r3, #12]
 80059d0:	4619      	mov	r1, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 ff24 	bl	8006820 <USBH_LL_GetURBState>
 80059d8:	4603      	mov	r3, r0
 80059da:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80059dc:	7cfb      	ldrb	r3, [r7, #19]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d129      	bne.n	8005a36 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	7b1b      	ldrb	r3, [r3, #12]
 80059e6:	4619      	mov	r1, r3
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fe87 	bl	80066fc <USBH_LL_GetLastXferSize>
 80059ee:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d016      	beq.n	8005a28 <CDC_ProcessReception+0x9e>
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	8b5b      	ldrh	r3, [r3, #26]
 80059fe:	461a      	mov	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d910      	bls.n	8005a28 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	1ad2      	subs	r2, r2, r3
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	6a1a      	ldr	r2, [r3, #32]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	441a      	add	r2, r3
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	2203      	movs	r2, #3
 8005a22:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005a26:	e006      	b.n	8005a36 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f80f 	bl	8005a54 <USBH_CDC_ReceiveCallback>
      break;
 8005a36:	bf00      	nop
  }
}
 8005a38:	bf00      	nop
 8005a3a:	3718      	adds	r7, #24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	4613      	mov	r3, r2
 8005a88:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d101      	bne.n	8005a94 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005a90:	2302      	movs	r3, #2
 8005a92:	e029      	b.n	8005ae8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	79fa      	ldrb	r2, [r7, #7]
 8005a98:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 f81f 	bl	8005af0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 fd99 	bl	8006618 <USBH_LL_Init>

  return USBH_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005af8:	2300      	movs	r3, #0
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005afc:	2300      	movs	r3, #0
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	e009      	b.n	8005b16 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	33e0      	adds	r3, #224	; 0xe0
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	3301      	adds	r3, #1
 8005b14:	60fb      	str	r3, [r7, #12]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2b0e      	cmp	r3, #14
 8005b1a:	d9f2      	bls.n	8005b02 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	e009      	b.n	8005b36 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	3301      	adds	r3, #1
 8005b34:	60fb      	str	r3, [r7, #12]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b3c:	d3f1      	bcc.n	8005b22 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2240      	movs	r2, #64	; 0x40
 8005b62:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d016      	beq.n	8005bda <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10e      	bne.n	8005bd4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005bbc:	1c59      	adds	r1, r3, #1
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	33de      	adds	r3, #222	; 0xde
 8005bc8:	6839      	ldr	r1, [r7, #0]
 8005bca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	73fb      	strb	r3, [r7, #15]
 8005bd2:	e004      	b.n	8005bde <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	73fb      	strb	r3, [r7, #15]
 8005bd8:	e001      	b.n	8005bde <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005bda:	2302      	movs	r3, #2
 8005bdc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3714      	adds	r7, #20
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005c02:	78fa      	ldrb	r2, [r7, #3]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d204      	bcs.n	8005c12 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	78fa      	ldrb	r2, [r7, #3]
 8005c0c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005c10:	e001      	b.n	8005c16 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005c12:	2302      	movs	r3, #2
 8005c14:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b087      	sub	sp, #28
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	4608      	mov	r0, r1
 8005c2e:	4611      	mov	r1, r2
 8005c30:	461a      	mov	r2, r3
 8005c32:	4603      	mov	r3, r0
 8005c34:	70fb      	strb	r3, [r7, #3]
 8005c36:	460b      	mov	r3, r1
 8005c38:	70bb      	strb	r3, [r7, #2]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005c42:	2300      	movs	r3, #0
 8005c44:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005c4c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005c4e:	e025      	b.n	8005c9c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005c50:	7dfb      	ldrb	r3, [r7, #23]
 8005c52:	221a      	movs	r2, #26
 8005c54:	fb02 f303 	mul.w	r3, r2, r3
 8005c58:	3308      	adds	r3, #8
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	3302      	adds	r3, #2
 8005c60:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	795b      	ldrb	r3, [r3, #5]
 8005c66:	78fa      	ldrb	r2, [r7, #3]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d002      	beq.n	8005c72 <USBH_FindInterface+0x4e>
 8005c6c:	78fb      	ldrb	r3, [r7, #3]
 8005c6e:	2bff      	cmp	r3, #255	; 0xff
 8005c70:	d111      	bne.n	8005c96 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005c76:	78ba      	ldrb	r2, [r7, #2]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d002      	beq.n	8005c82 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005c7c:	78bb      	ldrb	r3, [r7, #2]
 8005c7e:	2bff      	cmp	r3, #255	; 0xff
 8005c80:	d109      	bne.n	8005c96 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005c86:	787a      	ldrb	r2, [r7, #1]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d002      	beq.n	8005c92 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005c8c:	787b      	ldrb	r3, [r7, #1]
 8005c8e:	2bff      	cmp	r3, #255	; 0xff
 8005c90:	d101      	bne.n	8005c96 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005c92:	7dfb      	ldrb	r3, [r7, #23]
 8005c94:	e006      	b.n	8005ca4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005c9c:	7dfb      	ldrb	r3, [r7, #23]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d9d6      	bls.n	8005c50 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005ca2:	23ff      	movs	r3, #255	; 0xff
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	371c      	adds	r7, #28
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 fce9 	bl	8006690 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8005cbe:	2101      	movs	r1, #1
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 fdc0 	bl	8006846 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b082      	sub	sp, #8
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005cfc:	1c5a      	adds	r2, r3, #1
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f804 	bl	8005d12 <USBH_HandleSof>
}
 8005d0a:	bf00      	nop
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b082      	sub	sp, #8
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b0b      	cmp	r3, #11
 8005d22:	d10a      	bne.n	8005d3a <USBH_HandleSof+0x28>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d005      	beq.n	8005d3a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	4798      	blx	r3
  }
}
 8005d3a:	bf00      	nop
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8005d52:	bf00      	nop
}
 8005d54:	370c      	adds	r7, #12
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr

08005d5e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b083      	sub	sp, #12
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8005d6e:	bf00      	nop
}
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b083      	sub	sp, #12
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 fc7c 	bl	80066c6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	791b      	ldrb	r3, [r3, #4]
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 fad3 	bl	8006380 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	795b      	ldrb	r3, [r3, #5]
 8005dde:	4619      	mov	r1, r3
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 facd 	bl	8006380 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	789b      	ldrb	r3, [r3, #2]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d10f      	bne.n	8005e24 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8005e16:	78fb      	ldrb	r3, [r7, #3]
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8005e24:	2200      	movs	r2, #0
 8005e26:	2100      	movs	r1, #0
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 f805 	bl	8005e38 <USBH_CtlReq>
 8005e2e:	4603      	mov	r3, r0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	4613      	mov	r3, r2
 8005e44:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8005e46:	2301      	movs	r3, #1
 8005e48:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	789b      	ldrb	r3, [r3, #2]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d002      	beq.n	8005e58 <USBH_CtlReq+0x20>
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d00f      	beq.n	8005e76 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8005e56:	e027      	b.n	8005ea8 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	88fa      	ldrh	r2, [r7, #6]
 8005e62:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2201      	movs	r2, #1
 8005e68:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2202      	movs	r2, #2
 8005e6e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8005e70:	2301      	movs	r3, #1
 8005e72:	75fb      	strb	r3, [r7, #23]
      break;
 8005e74:	e018      	b.n	8005ea8 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 f81c 	bl	8005eb4 <USBH_HandleControl>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8005e80:	7dfb      	ldrb	r3, [r7, #23]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <USBH_CtlReq+0x54>
 8005e86:	7dfb      	ldrb	r3, [r7, #23]
 8005e88:	2b03      	cmp	r3, #3
 8005e8a:	d106      	bne.n	8005e9a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	761a      	strb	r2, [r3, #24]
      break;
 8005e98:	e005      	b.n	8005ea6 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8005e9a:	7dfb      	ldrb	r3, [r7, #23]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d102      	bne.n	8005ea6 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	709a      	strb	r2, [r3, #2]
      break;
 8005ea6:	bf00      	nop
  }
  return status;
 8005ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3718      	adds	r7, #24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
	...

08005eb4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af02      	add	r7, sp, #8
 8005eba:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	7e1b      	ldrb	r3, [r3, #24]
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	2b0a      	cmp	r3, #10
 8005ecc:	f200 8158 	bhi.w	8006180 <USBH_HandleControl+0x2cc>
 8005ed0:	a201      	add	r2, pc, #4	; (adr r2, 8005ed8 <USBH_HandleControl+0x24>)
 8005ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed6:	bf00      	nop
 8005ed8:	08005f05 	.word	0x08005f05
 8005edc:	08005f1f 	.word	0x08005f1f
 8005ee0:	08005f89 	.word	0x08005f89
 8005ee4:	08005faf 	.word	0x08005faf
 8005ee8:	08005fe7 	.word	0x08005fe7
 8005eec:	08006013 	.word	0x08006013
 8005ef0:	08006065 	.word	0x08006065
 8005ef4:	08006087 	.word	0x08006087
 8005ef8:	080060c3 	.word	0x080060c3
 8005efc:	080060eb 	.word	0x080060eb
 8005f00:	08006129 	.word	0x08006129
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f103 0110 	add.w	r1, r3, #16
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	795b      	ldrb	r3, [r3, #5]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f945 	bl	80061a0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2202      	movs	r2, #2
 8005f1a:	761a      	strb	r2, [r3, #24]
      break;
 8005f1c:	e13b      	b.n	8006196 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	795b      	ldrb	r3, [r3, #5]
 8005f22:	4619      	mov	r1, r3
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 fc7b 	bl	8006820 <USBH_LL_GetURBState>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8005f2e:	7bbb      	ldrb	r3, [r7, #14]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d11e      	bne.n	8005f72 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	7c1b      	ldrb	r3, [r3, #16]
 8005f38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f3c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	8adb      	ldrh	r3, [r3, #22]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8005f46:	7b7b      	ldrb	r3, [r7, #13]
 8005f48:	2b80      	cmp	r3, #128	; 0x80
 8005f4a:	d103      	bne.n	8005f54 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2203      	movs	r2, #3
 8005f50:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005f52:	e117      	b.n	8006184 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2205      	movs	r2, #5
 8005f58:	761a      	strb	r2, [r3, #24]
      break;
 8005f5a:	e113      	b.n	8006184 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8005f5c:	7b7b      	ldrb	r3, [r7, #13]
 8005f5e:	2b80      	cmp	r3, #128	; 0x80
 8005f60:	d103      	bne.n	8005f6a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2209      	movs	r2, #9
 8005f66:	761a      	strb	r2, [r3, #24]
      break;
 8005f68:	e10c      	b.n	8006184 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2207      	movs	r2, #7
 8005f6e:	761a      	strb	r2, [r3, #24]
      break;
 8005f70:	e108      	b.n	8006184 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8005f72:	7bbb      	ldrb	r3, [r7, #14]
 8005f74:	2b04      	cmp	r3, #4
 8005f76:	d003      	beq.n	8005f80 <USBH_HandleControl+0xcc>
 8005f78:	7bbb      	ldrb	r3, [r7, #14]
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	f040 8102 	bne.w	8006184 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	220b      	movs	r2, #11
 8005f84:	761a      	strb	r2, [r3, #24]
      break;
 8005f86:	e0fd      	b.n	8006184 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6899      	ldr	r1, [r3, #8]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	899a      	ldrh	r2, [r3, #12]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	791b      	ldrb	r3, [r3, #4]
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f93c 	bl	800621e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2204      	movs	r2, #4
 8005faa:	761a      	strb	r2, [r3, #24]
      break;
 8005fac:	e0f3      	b.n	8006196 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	791b      	ldrb	r3, [r3, #4]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fc33 	bl	8006820 <USBH_LL_GetURBState>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8005fbe:	7bbb      	ldrb	r3, [r7, #14]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d102      	bne.n	8005fca <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2209      	movs	r2, #9
 8005fc8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8005fca:	7bbb      	ldrb	r3, [r7, #14]
 8005fcc:	2b05      	cmp	r3, #5
 8005fce:	d102      	bne.n	8005fd6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005fd4:	e0d8      	b.n	8006188 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8005fd6:	7bbb      	ldrb	r3, [r7, #14]
 8005fd8:	2b04      	cmp	r3, #4
 8005fda:	f040 80d5 	bne.w	8006188 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	220b      	movs	r2, #11
 8005fe2:	761a      	strb	r2, [r3, #24]
      break;
 8005fe4:	e0d0      	b.n	8006188 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6899      	ldr	r1, [r3, #8]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	899a      	ldrh	r2, [r3, #12]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	7958      	ldrb	r0, [r3, #5]
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 f8eb 	bl	80061d4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006004:	b29a      	uxth	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2206      	movs	r2, #6
 800600e:	761a      	strb	r2, [r3, #24]
      break;
 8006010:	e0c1      	b.n	8006196 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	795b      	ldrb	r3, [r3, #5]
 8006016:	4619      	mov	r1, r3
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 fc01 	bl	8006820 <USBH_LL_GetURBState>
 800601e:	4603      	mov	r3, r0
 8006020:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006022:	7bbb      	ldrb	r3, [r7, #14]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d103      	bne.n	8006030 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2207      	movs	r2, #7
 800602c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800602e:	e0ad      	b.n	800618c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8006030:	7bbb      	ldrb	r3, [r7, #14]
 8006032:	2b05      	cmp	r3, #5
 8006034:	d105      	bne.n	8006042 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	220c      	movs	r2, #12
 800603a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800603c:	2303      	movs	r3, #3
 800603e:	73fb      	strb	r3, [r7, #15]
      break;
 8006040:	e0a4      	b.n	800618c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006042:	7bbb      	ldrb	r3, [r7, #14]
 8006044:	2b02      	cmp	r3, #2
 8006046:	d103      	bne.n	8006050 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2205      	movs	r2, #5
 800604c:	761a      	strb	r2, [r3, #24]
      break;
 800604e:	e09d      	b.n	800618c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8006050:	7bbb      	ldrb	r3, [r7, #14]
 8006052:	2b04      	cmp	r3, #4
 8006054:	f040 809a 	bne.w	800618c <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	220b      	movs	r2, #11
 800605c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800605e:	2302      	movs	r3, #2
 8006060:	73fb      	strb	r3, [r7, #15]
      break;
 8006062:	e093      	b.n	800618c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	791b      	ldrb	r3, [r3, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	2100      	movs	r1, #0
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f8d6 	bl	800621e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006078:	b29a      	uxth	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2208      	movs	r2, #8
 8006082:	761a      	strb	r2, [r3, #24]

      break;
 8006084:	e087      	b.n	8006196 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	791b      	ldrb	r3, [r3, #4]
 800608a:	4619      	mov	r1, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fbc7 	bl	8006820 <USBH_LL_GetURBState>
 8006092:	4603      	mov	r3, r0
 8006094:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006096:	7bbb      	ldrb	r3, [r7, #14]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d105      	bne.n	80060a8 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	220d      	movs	r2, #13
 80060a0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80060a6:	e073      	b.n	8006190 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 80060a8:	7bbb      	ldrb	r3, [r7, #14]
 80060aa:	2b04      	cmp	r3, #4
 80060ac:	d103      	bne.n	80060b6 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	220b      	movs	r2, #11
 80060b2:	761a      	strb	r2, [r3, #24]
      break;
 80060b4:	e06c      	b.n	8006190 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 80060b6:	7bbb      	ldrb	r3, [r7, #14]
 80060b8:	2b05      	cmp	r3, #5
 80060ba:	d169      	bne.n	8006190 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 80060bc:	2303      	movs	r3, #3
 80060be:	73fb      	strb	r3, [r7, #15]
      break;
 80060c0:	e066      	b.n	8006190 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	795a      	ldrb	r2, [r3, #5]
 80060c6:	2301      	movs	r3, #1
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	4613      	mov	r3, r2
 80060cc:	2200      	movs	r2, #0
 80060ce:	2100      	movs	r1, #0
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f87f 	bl	80061d4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80060dc:	b29a      	uxth	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	220a      	movs	r2, #10
 80060e6:	761a      	strb	r2, [r3, #24]
      break;
 80060e8:	e055      	b.n	8006196 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	795b      	ldrb	r3, [r3, #5]
 80060ee:	4619      	mov	r1, r3
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fb95 	bl	8006820 <USBH_LL_GetURBState>
 80060f6:	4603      	mov	r3, r0
 80060f8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80060fa:	7bbb      	ldrb	r3, [r7, #14]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d105      	bne.n	800610c <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8006100:	2300      	movs	r3, #0
 8006102:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	220d      	movs	r2, #13
 8006108:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800610a:	e043      	b.n	8006194 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800610c:	7bbb      	ldrb	r3, [r7, #14]
 800610e:	2b02      	cmp	r3, #2
 8006110:	d103      	bne.n	800611a <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2209      	movs	r2, #9
 8006116:	761a      	strb	r2, [r3, #24]
      break;
 8006118:	e03c      	b.n	8006194 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800611a:	7bbb      	ldrb	r3, [r7, #14]
 800611c:	2b04      	cmp	r3, #4
 800611e:	d139      	bne.n	8006194 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	220b      	movs	r2, #11
 8006124:	761a      	strb	r2, [r3, #24]
      break;
 8006126:	e035      	b.n	8006194 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	7e5b      	ldrb	r3, [r3, #25]
 800612c:	3301      	adds	r3, #1
 800612e:	b2da      	uxtb	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	765a      	strb	r2, [r3, #25]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	7e5b      	ldrb	r3, [r3, #25]
 8006138:	2b02      	cmp	r3, #2
 800613a:	d806      	bhi.n	800614a <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006148:	e025      	b.n	8006196 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006150:	2106      	movs	r1, #6
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	795b      	ldrb	r3, [r3, #5]
 8006160:	4619      	mov	r1, r3
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f90c 	bl	8006380 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	791b      	ldrb	r3, [r3, #4]
 800616c:	4619      	mov	r1, r3
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f906 	bl	8006380 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800617a:	2302      	movs	r3, #2
 800617c:	73fb      	strb	r3, [r7, #15]
      break;
 800617e:	e00a      	b.n	8006196 <USBH_HandleControl+0x2e2>

    default:
      break;
 8006180:	bf00      	nop
 8006182:	e008      	b.n	8006196 <USBH_HandleControl+0x2e2>
      break;
 8006184:	bf00      	nop
 8006186:	e006      	b.n	8006196 <USBH_HandleControl+0x2e2>
      break;
 8006188:	bf00      	nop
 800618a:	e004      	b.n	8006196 <USBH_HandleControl+0x2e2>
      break;
 800618c:	bf00      	nop
 800618e:	e002      	b.n	8006196 <USBH_HandleControl+0x2e2>
      break;
 8006190:	bf00      	nop
 8006192:	e000      	b.n	8006196 <USBH_HandleControl+0x2e2>
      break;
 8006194:	bf00      	nop
  }

  return status;
 8006196:	7bfb      	ldrb	r3, [r7, #15]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b088      	sub	sp, #32
 80061a4:	af04      	add	r7, sp, #16
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	4613      	mov	r3, r2
 80061ac:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80061ae:	79f9      	ldrb	r1, [r7, #7]
 80061b0:	2300      	movs	r3, #0
 80061b2:	9303      	str	r3, [sp, #12]
 80061b4:	2308      	movs	r3, #8
 80061b6:	9302      	str	r3, [sp, #8]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	9301      	str	r3, [sp, #4]
 80061bc:	2300      	movs	r3, #0
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	2300      	movs	r3, #0
 80061c2:	2200      	movs	r2, #0
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 fafa 	bl	80067be <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b088      	sub	sp, #32
 80061d8:	af04      	add	r7, sp, #16
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	4611      	mov	r1, r2
 80061e0:	461a      	mov	r2, r3
 80061e2:	460b      	mov	r3, r1
 80061e4:	80fb      	strh	r3, [r7, #6]
 80061e6:	4613      	mov	r3, r2
 80061e8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d001      	beq.n	80061f8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80061f4:	2300      	movs	r3, #0
 80061f6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80061f8:	7979      	ldrb	r1, [r7, #5]
 80061fa:	7e3b      	ldrb	r3, [r7, #24]
 80061fc:	9303      	str	r3, [sp, #12]
 80061fe:	88fb      	ldrh	r3, [r7, #6]
 8006200:	9302      	str	r3, [sp, #8]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	9301      	str	r3, [sp, #4]
 8006206:	2301      	movs	r3, #1
 8006208:	9300      	str	r3, [sp, #0]
 800620a:	2300      	movs	r3, #0
 800620c:	2200      	movs	r2, #0
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f000 fad5 	bl	80067be <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b088      	sub	sp, #32
 8006222:	af04      	add	r7, sp, #16
 8006224:	60f8      	str	r0, [r7, #12]
 8006226:	60b9      	str	r1, [r7, #8]
 8006228:	4611      	mov	r1, r2
 800622a:	461a      	mov	r2, r3
 800622c:	460b      	mov	r3, r1
 800622e:	80fb      	strh	r3, [r7, #6]
 8006230:	4613      	mov	r3, r2
 8006232:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006234:	7979      	ldrb	r1, [r7, #5]
 8006236:	2300      	movs	r3, #0
 8006238:	9303      	str	r3, [sp, #12]
 800623a:	88fb      	ldrh	r3, [r7, #6]
 800623c:	9302      	str	r3, [sp, #8]
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	9301      	str	r3, [sp, #4]
 8006242:	2301      	movs	r3, #1
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	2300      	movs	r3, #0
 8006248:	2201      	movs	r2, #1
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f000 fab7 	bl	80067be <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8006250:	2300      	movs	r3, #0

}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b088      	sub	sp, #32
 800625e:	af04      	add	r7, sp, #16
 8006260:	60f8      	str	r0, [r7, #12]
 8006262:	60b9      	str	r1, [r7, #8]
 8006264:	4611      	mov	r1, r2
 8006266:	461a      	mov	r2, r3
 8006268:	460b      	mov	r3, r1
 800626a:	80fb      	strh	r3, [r7, #6]
 800626c:	4613      	mov	r3, r2
 800626e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006276:	2b00      	cmp	r3, #0
 8006278:	d001      	beq.n	800627e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800627a:	2300      	movs	r3, #0
 800627c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800627e:	7979      	ldrb	r1, [r7, #5]
 8006280:	7e3b      	ldrb	r3, [r7, #24]
 8006282:	9303      	str	r3, [sp, #12]
 8006284:	88fb      	ldrh	r3, [r7, #6]
 8006286:	9302      	str	r3, [sp, #8]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	9301      	str	r3, [sp, #4]
 800628c:	2301      	movs	r3, #1
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	2302      	movs	r3, #2
 8006292:	2200      	movs	r2, #0
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f000 fa92 	bl	80067be <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b088      	sub	sp, #32
 80062a8:	af04      	add	r7, sp, #16
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	4611      	mov	r1, r2
 80062b0:	461a      	mov	r2, r3
 80062b2:	460b      	mov	r3, r1
 80062b4:	80fb      	strh	r3, [r7, #6]
 80062b6:	4613      	mov	r3, r2
 80062b8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80062ba:	7979      	ldrb	r1, [r7, #5]
 80062bc:	2300      	movs	r3, #0
 80062be:	9303      	str	r3, [sp, #12]
 80062c0:	88fb      	ldrh	r3, [r7, #6]
 80062c2:	9302      	str	r3, [sp, #8]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	9301      	str	r3, [sp, #4]
 80062c8:	2301      	movs	r3, #1
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	2302      	movs	r3, #2
 80062ce:	2201      	movs	r2, #1
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f000 fa74 	bl	80067be <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af04      	add	r7, sp, #16
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	4608      	mov	r0, r1
 80062ea:	4611      	mov	r1, r2
 80062ec:	461a      	mov	r2, r3
 80062ee:	4603      	mov	r3, r0
 80062f0:	70fb      	strb	r3, [r7, #3]
 80062f2:	460b      	mov	r3, r1
 80062f4:	70bb      	strb	r3, [r7, #2]
 80062f6:	4613      	mov	r3, r2
 80062f8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80062fa:	7878      	ldrb	r0, [r7, #1]
 80062fc:	78ba      	ldrb	r2, [r7, #2]
 80062fe:	78f9      	ldrb	r1, [r7, #3]
 8006300:	8b3b      	ldrh	r3, [r7, #24]
 8006302:	9302      	str	r3, [sp, #8]
 8006304:	7d3b      	ldrb	r3, [r7, #20]
 8006306:	9301      	str	r3, [sp, #4]
 8006308:	7c3b      	ldrb	r3, [r7, #16]
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	4603      	mov	r3, r0
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 fa07 	bl	8006722 <USBH_LL_OpenPipe>

  return USBH_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b082      	sub	sp, #8
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	460b      	mov	r3, r1
 8006328:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800632a:	78fb      	ldrb	r3, [r7, #3]
 800632c:	4619      	mov	r1, r3
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fa26 	bl	8006780 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	460b      	mov	r3, r1
 8006348:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f836 	bl	80063bc <USBH_GetFreePipe>
 8006350:	4603      	mov	r3, r0
 8006352:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006354:	89fb      	ldrh	r3, [r7, #14]
 8006356:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800635a:	4293      	cmp	r3, r2
 800635c:	d00a      	beq.n	8006374 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800635e:	78fa      	ldrb	r2, [r7, #3]
 8006360:	89fb      	ldrh	r3, [r7, #14]
 8006362:	f003 030f 	and.w	r3, r3, #15
 8006366:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800636a:	6879      	ldr	r1, [r7, #4]
 800636c:	33e0      	adds	r3, #224	; 0xe0
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	440b      	add	r3, r1
 8006372:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006374:	89fb      	ldrh	r3, [r7, #14]
 8006376:	b2db      	uxtb	r3, r3
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	460b      	mov	r3, r1
 800638a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800638c:	78fb      	ldrb	r3, [r7, #3]
 800638e:	2b0a      	cmp	r3, #10
 8006390:	d80d      	bhi.n	80063ae <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006392:	78fb      	ldrb	r3, [r7, #3]
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	33e0      	adds	r3, #224	; 0xe0
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	78fb      	ldrb	r3, [r7, #3]
 80063a0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80063a4:	6879      	ldr	r1, [r7, #4]
 80063a6:	33e0      	adds	r3, #224	; 0xe0
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	440b      	add	r3, r1
 80063ac:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80063c8:	2300      	movs	r3, #0
 80063ca:	73fb      	strb	r3, [r7, #15]
 80063cc:	e00f      	b.n	80063ee <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	33e0      	adds	r3, #224	; 0xe0
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d102      	bne.n	80063e8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80063e2:	7bfb      	ldrb	r3, [r7, #15]
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	e007      	b.n	80063f8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
 80063ea:	3301      	adds	r3, #1
 80063ec:	73fb      	strb	r3, [r7, #15]
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
 80063f0:	2b0a      	cmp	r3, #10
 80063f2:	d9ec      	bls.n	80063ce <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80063f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006408:	2201      	movs	r2, #1
 800640a:	490e      	ldr	r1, [pc, #56]	; (8006444 <MX_USB_HOST_Init+0x40>)
 800640c:	480e      	ldr	r0, [pc, #56]	; (8006448 <MX_USB_HOST_Init+0x44>)
 800640e:	f7ff fb35 	bl	8005a7c <USBH_Init>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d001      	beq.n	800641c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006418:	f7fa fa9e 	bl	8000958 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800641c:	490b      	ldr	r1, [pc, #44]	; (800644c <MX_USB_HOST_Init+0x48>)
 800641e:	480a      	ldr	r0, [pc, #40]	; (8006448 <MX_USB_HOST_Init+0x44>)
 8006420:	f7ff fbba 	bl	8005b98 <USBH_RegisterClass>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d001      	beq.n	800642e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800642a:	f7fa fa95 	bl	8000958 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800642e:	4806      	ldr	r0, [pc, #24]	; (8006448 <MX_USB_HOST_Init+0x44>)
 8006430:	f7ff fc3e 	bl	8005cb0 <USBH_Start>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d001      	beq.n	800643e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800643a:	f7fa fa8d 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800643e:	bf00      	nop
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	08006451 	.word	0x08006451
 8006448:	200001b8 	.word	0x200001b8
 800644c:	2000000c 	.word	0x2000000c

08006450 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	460b      	mov	r3, r1
 800645a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800645c:	78fb      	ldrb	r3, [r7, #3]
 800645e:	3b01      	subs	r3, #1
 8006460:	2b04      	cmp	r3, #4
 8006462:	d819      	bhi.n	8006498 <USBH_UserProcess+0x48>
 8006464:	a201      	add	r2, pc, #4	; (adr r2, 800646c <USBH_UserProcess+0x1c>)
 8006466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646a:	bf00      	nop
 800646c:	08006499 	.word	0x08006499
 8006470:	08006489 	.word	0x08006489
 8006474:	08006499 	.word	0x08006499
 8006478:	08006491 	.word	0x08006491
 800647c:	08006481 	.word	0x08006481
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006480:	4b09      	ldr	r3, [pc, #36]	; (80064a8 <USBH_UserProcess+0x58>)
 8006482:	2203      	movs	r2, #3
 8006484:	701a      	strb	r2, [r3, #0]
  break;
 8006486:	e008      	b.n	800649a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006488:	4b07      	ldr	r3, [pc, #28]	; (80064a8 <USBH_UserProcess+0x58>)
 800648a:	2202      	movs	r2, #2
 800648c:	701a      	strb	r2, [r3, #0]
  break;
 800648e:	e004      	b.n	800649a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006490:	4b05      	ldr	r3, [pc, #20]	; (80064a8 <USBH_UserProcess+0x58>)
 8006492:	2201      	movs	r2, #1
 8006494:	701a      	strb	r2, [r3, #0]
  break;
 8006496:	e000      	b.n	800649a <USBH_UserProcess+0x4a>

  default:
  break;
 8006498:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800649a:	bf00      	nop
 800649c:	370c      	adds	r7, #12
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	200000b4 	.word	0x200000b4

080064ac <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b08a      	sub	sp, #40	; 0x28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064b4:	f107 0314 	add.w	r3, r7, #20
 80064b8:	2200      	movs	r2, #0
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	605a      	str	r2, [r3, #4]
 80064be:	609a      	str	r2, [r3, #8]
 80064c0:	60da      	str	r2, [r3, #12]
 80064c2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064cc:	d147      	bne.n	800655e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064ce:	2300      	movs	r3, #0
 80064d0:	613b      	str	r3, [r7, #16]
 80064d2:	4b25      	ldr	r3, [pc, #148]	; (8006568 <HAL_HCD_MspInit+0xbc>)
 80064d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d6:	4a24      	ldr	r2, [pc, #144]	; (8006568 <HAL_HCD_MspInit+0xbc>)
 80064d8:	f043 0301 	orr.w	r3, r3, #1
 80064dc:	6313      	str	r3, [r2, #48]	; 0x30
 80064de:	4b22      	ldr	r3, [pc, #136]	; (8006568 <HAL_HCD_MspInit+0xbc>)
 80064e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	613b      	str	r3, [r7, #16]
 80064e8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80064ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80064f0:	2300      	movs	r3, #0
 80064f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064f4:	2300      	movs	r3, #0
 80064f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80064f8:	f107 0314 	add.w	r3, r7, #20
 80064fc:	4619      	mov	r1, r3
 80064fe:	481b      	ldr	r0, [pc, #108]	; (800656c <HAL_HCD_MspInit+0xc0>)
 8006500:	f7fa fda6 	bl	8001050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006504:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800650a:	2302      	movs	r3, #2
 800650c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800650e:	2300      	movs	r3, #0
 8006510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006512:	2300      	movs	r3, #0
 8006514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006516:	230a      	movs	r3, #10
 8006518:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800651a:	f107 0314 	add.w	r3, r7, #20
 800651e:	4619      	mov	r1, r3
 8006520:	4812      	ldr	r0, [pc, #72]	; (800656c <HAL_HCD_MspInit+0xc0>)
 8006522:	f7fa fd95 	bl	8001050 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006526:	4b10      	ldr	r3, [pc, #64]	; (8006568 <HAL_HCD_MspInit+0xbc>)
 8006528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800652a:	4a0f      	ldr	r2, [pc, #60]	; (8006568 <HAL_HCD_MspInit+0xbc>)
 800652c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006530:	6353      	str	r3, [r2, #52]	; 0x34
 8006532:	2300      	movs	r3, #0
 8006534:	60fb      	str	r3, [r7, #12]
 8006536:	4b0c      	ldr	r3, [pc, #48]	; (8006568 <HAL_HCD_MspInit+0xbc>)
 8006538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800653a:	4a0b      	ldr	r2, [pc, #44]	; (8006568 <HAL_HCD_MspInit+0xbc>)
 800653c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006540:	6453      	str	r3, [r2, #68]	; 0x44
 8006542:	4b09      	ldr	r3, [pc, #36]	; (8006568 <HAL_HCD_MspInit+0xbc>)
 8006544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800654a:	60fb      	str	r3, [r7, #12]
 800654c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800654e:	2200      	movs	r2, #0
 8006550:	2100      	movs	r1, #0
 8006552:	2043      	movs	r0, #67	; 0x43
 8006554:	f7fa fd45 	bl	8000fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006558:	2043      	movs	r0, #67	; 0x43
 800655a:	f7fa fd5e 	bl	800101a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800655e:	bf00      	nop
 8006560:	3728      	adds	r7, #40	; 0x28
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	40023800 	.word	0x40023800
 800656c:	40020000 	.word	0x40020000

08006570 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800657e:	4618      	mov	r0, r3
 8006580:	f7ff fbb5 	bl	8005cee <USBH_LL_IncTimer>
}
 8006584:	bf00      	nop
 8006586:	3708      	adds	r7, #8
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800659a:	4618      	mov	r0, r3
 800659c:	f7ff fbed 	bl	8005d7a <USBH_LL_Connect>
}
 80065a0:	bf00      	nop
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7ff fbf6 	bl	8005da8 <USBH_LL_Disconnect>
}
 80065bc:	bf00      	nop
 80065be:	3708      	adds	r7, #8
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	460b      	mov	r3, r1
 80065ce:	70fb      	strb	r3, [r7, #3]
 80065d0:	4613      	mov	r3, r2
 80065d2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7ff fba7 	bl	8005d42 <USBH_LL_PortEnabled>
}
 80065f4:	bf00      	nop
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800660a:	4618      	mov	r0, r3
 800660c:	f7ff fba7 	bl	8005d5e <USBH_LL_PortDisabled>
}
 8006610:	bf00      	nop
 8006612:	3708      	adds	r7, #8
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006626:	2b01      	cmp	r3, #1
 8006628:	d12a      	bne.n	8006680 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800662a:	4a18      	ldr	r2, [pc, #96]	; (800668c <USBH_LL_Init+0x74>)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a15      	ldr	r2, [pc, #84]	; (800668c <USBH_LL_Init+0x74>)
 8006636:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800663a:	4b14      	ldr	r3, [pc, #80]	; (800668c <USBH_LL_Init+0x74>)
 800663c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006640:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006642:	4b12      	ldr	r3, [pc, #72]	; (800668c <USBH_LL_Init+0x74>)
 8006644:	2208      	movs	r2, #8
 8006646:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006648:	4b10      	ldr	r3, [pc, #64]	; (800668c <USBH_LL_Init+0x74>)
 800664a:	2201      	movs	r2, #1
 800664c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800664e:	4b0f      	ldr	r3, [pc, #60]	; (800668c <USBH_LL_Init+0x74>)
 8006650:	2200      	movs	r2, #0
 8006652:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006654:	4b0d      	ldr	r3, [pc, #52]	; (800668c <USBH_LL_Init+0x74>)
 8006656:	2202      	movs	r2, #2
 8006658:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800665a:	4b0c      	ldr	r3, [pc, #48]	; (800668c <USBH_LL_Init+0x74>)
 800665c:	2200      	movs	r2, #0
 800665e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006660:	480a      	ldr	r0, [pc, #40]	; (800668c <USBH_LL_Init+0x74>)
 8006662:	f7fa fec3 	bl	80013ec <HAL_HCD_Init>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d001      	beq.n	8006670 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800666c:	f7fa f974 	bl	8000958 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006670:	4806      	ldr	r0, [pc, #24]	; (800668c <USBH_LL_Init+0x74>)
 8006672:	f7fb fab9 	bl	8001be8 <HAL_HCD_GetCurrentFrame>
 8006676:	4603      	mov	r3, r0
 8006678:	4619      	mov	r1, r3
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7ff fb28 	bl	8005cd0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3708      	adds	r7, #8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	20000590 	.word	0x20000590

08006690 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006698:	2300      	movs	r3, #0
 800669a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7fb fa34 	bl	8001b14 <HAL_HCD_Start>
 80066ac:	4603      	mov	r3, r0
 80066ae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 f912 	bl	80068dc <USBH_Get_USB_Status>
 80066b8:	4603      	mov	r3, r0
 80066ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b084      	sub	sp, #16
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066ce:	2300      	movs	r3, #0
 80066d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80066d2:	2300      	movs	r3, #0
 80066d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fb fa3c 	bl	8001b5a <HAL_HCD_Stop>
 80066e2:	4603      	mov	r3, r0
 80066e4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80066e6:	7bfb      	ldrb	r3, [r7, #15]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 f8f7 	bl	80068dc <USBH_Get_USB_Status>
 80066ee:	4603      	mov	r3, r0
 80066f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	460b      	mov	r3, r1
 8006706:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800670e:	78fa      	ldrb	r2, [r7, #3]
 8006710:	4611      	mov	r1, r2
 8006712:	4618      	mov	r0, r3
 8006714:	f7fb fa53 	bl	8001bbe <HAL_HCD_HC_GetXferCount>
 8006718:	4603      	mov	r3, r0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006722:	b590      	push	{r4, r7, lr}
 8006724:	b089      	sub	sp, #36	; 0x24
 8006726:	af04      	add	r7, sp, #16
 8006728:	6078      	str	r0, [r7, #4]
 800672a:	4608      	mov	r0, r1
 800672c:	4611      	mov	r1, r2
 800672e:	461a      	mov	r2, r3
 8006730:	4603      	mov	r3, r0
 8006732:	70fb      	strb	r3, [r7, #3]
 8006734:	460b      	mov	r3, r1
 8006736:	70bb      	strb	r3, [r7, #2]
 8006738:	4613      	mov	r3, r2
 800673a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800673c:	2300      	movs	r3, #0
 800673e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006740:	2300      	movs	r3, #0
 8006742:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800674a:	787c      	ldrb	r4, [r7, #1]
 800674c:	78ba      	ldrb	r2, [r7, #2]
 800674e:	78f9      	ldrb	r1, [r7, #3]
 8006750:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006752:	9302      	str	r3, [sp, #8]
 8006754:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006758:	9301      	str	r3, [sp, #4]
 800675a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	4623      	mov	r3, r4
 8006762:	f7fa fea5 	bl	80014b0 <HAL_HCD_HC_Init>
 8006766:	4603      	mov	r3, r0
 8006768:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800676a:	7bfb      	ldrb	r3, [r7, #15]
 800676c:	4618      	mov	r0, r3
 800676e:	f000 f8b5 	bl	80068dc <USBH_Get_USB_Status>
 8006772:	4603      	mov	r3, r0
 8006774:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006776:	7bbb      	ldrb	r3, [r7, #14]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3714      	adds	r7, #20
 800677c:	46bd      	mov	sp, r7
 800677e:	bd90      	pop	{r4, r7, pc}

08006780 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	460b      	mov	r3, r1
 800678a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800678c:	2300      	movs	r3, #0
 800678e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006790:	2300      	movs	r3, #0
 8006792:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800679a:	78fa      	ldrb	r2, [r7, #3]
 800679c:	4611      	mov	r1, r2
 800679e:	4618      	mov	r0, r3
 80067a0:	f7fa ff1e 	bl	80015e0 <HAL_HCD_HC_Halt>
 80067a4:	4603      	mov	r3, r0
 80067a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f000 f896 	bl	80068dc <USBH_Get_USB_Status>
 80067b0:	4603      	mov	r3, r0
 80067b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80067b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80067be:	b590      	push	{r4, r7, lr}
 80067c0:	b089      	sub	sp, #36	; 0x24
 80067c2:	af04      	add	r7, sp, #16
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	4608      	mov	r0, r1
 80067c8:	4611      	mov	r1, r2
 80067ca:	461a      	mov	r2, r3
 80067cc:	4603      	mov	r3, r0
 80067ce:	70fb      	strb	r3, [r7, #3]
 80067d0:	460b      	mov	r3, r1
 80067d2:	70bb      	strb	r3, [r7, #2]
 80067d4:	4613      	mov	r3, r2
 80067d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067d8:	2300      	movs	r3, #0
 80067da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80067dc:	2300      	movs	r3, #0
 80067de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80067e6:	787c      	ldrb	r4, [r7, #1]
 80067e8:	78ba      	ldrb	r2, [r7, #2]
 80067ea:	78f9      	ldrb	r1, [r7, #3]
 80067ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80067f0:	9303      	str	r3, [sp, #12]
 80067f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80067f4:	9302      	str	r3, [sp, #8]
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	9301      	str	r3, [sp, #4]
 80067fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	4623      	mov	r3, r4
 8006802:	f7fa ff11 	bl	8001628 <HAL_HCD_HC_SubmitRequest>
 8006806:	4603      	mov	r3, r0
 8006808:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800680a:	7bfb      	ldrb	r3, [r7, #15]
 800680c:	4618      	mov	r0, r3
 800680e:	f000 f865 	bl	80068dc <USBH_Get_USB_Status>
 8006812:	4603      	mov	r3, r0
 8006814:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006816:	7bbb      	ldrb	r3, [r7, #14]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	bd90      	pop	{r4, r7, pc}

08006820 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	460b      	mov	r3, r1
 800682a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006832:	78fa      	ldrb	r2, [r7, #3]
 8006834:	4611      	mov	r1, r2
 8006836:	4618      	mov	r0, r3
 8006838:	f7fb f9ac 	bl	8001b94 <HAL_HCD_HC_GetURBState>
 800683c:	4603      	mov	r3, r0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b082      	sub	sp, #8
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
 800684e:	460b      	mov	r3, r1
 8006850:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006858:	2b01      	cmp	r3, #1
 800685a:	d103      	bne.n	8006864 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800685c:	78fb      	ldrb	r3, [r7, #3]
 800685e:	4618      	mov	r0, r3
 8006860:	f000 f868 	bl	8006934 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8006864:	20c8      	movs	r0, #200	; 0xc8
 8006866:	f7fa fabf 	bl	8000de8 <HAL_Delay>
  return USBH_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	460b      	mov	r3, r1
 800687e:	70fb      	strb	r3, [r7, #3]
 8006880:	4613      	mov	r3, r2
 8006882:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800688a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800688c:	78fa      	ldrb	r2, [r7, #3]
 800688e:	68f9      	ldr	r1, [r7, #12]
 8006890:	4613      	mov	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	00db      	lsls	r3, r3, #3
 8006898:	440b      	add	r3, r1
 800689a:	333b      	adds	r3, #59	; 0x3b
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00a      	beq.n	80068b8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80068a2:	78fa      	ldrb	r2, [r7, #3]
 80068a4:	68f9      	ldr	r1, [r7, #12]
 80068a6:	4613      	mov	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4413      	add	r3, r2
 80068ac:	00db      	lsls	r3, r3, #3
 80068ae:	440b      	add	r3, r1
 80068b0:	3350      	adds	r3, #80	; 0x50
 80068b2:	78ba      	ldrb	r2, [r7, #2]
 80068b4:	701a      	strb	r2, [r3, #0]
 80068b6:	e009      	b.n	80068cc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80068b8:	78fa      	ldrb	r2, [r7, #3]
 80068ba:	68f9      	ldr	r1, [r7, #12]
 80068bc:	4613      	mov	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	440b      	add	r3, r1
 80068c6:	3351      	adds	r3, #81	; 0x51
 80068c8:	78ba      	ldrb	r2, [r7, #2]
 80068ca:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
	...

080068dc <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	4603      	mov	r3, r0
 80068e4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80068ea:	79fb      	ldrb	r3, [r7, #7]
 80068ec:	2b03      	cmp	r3, #3
 80068ee:	d817      	bhi.n	8006920 <USBH_Get_USB_Status+0x44>
 80068f0:	a201      	add	r2, pc, #4	; (adr r2, 80068f8 <USBH_Get_USB_Status+0x1c>)
 80068f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f6:	bf00      	nop
 80068f8:	08006909 	.word	0x08006909
 80068fc:	0800690f 	.word	0x0800690f
 8006900:	08006915 	.word	0x08006915
 8006904:	0800691b 	.word	0x0800691b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006908:	2300      	movs	r3, #0
 800690a:	73fb      	strb	r3, [r7, #15]
    break;
 800690c:	e00b      	b.n	8006926 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800690e:	2302      	movs	r3, #2
 8006910:	73fb      	strb	r3, [r7, #15]
    break;
 8006912:	e008      	b.n	8006926 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006914:	2301      	movs	r3, #1
 8006916:	73fb      	strb	r3, [r7, #15]
    break;
 8006918:	e005      	b.n	8006926 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800691a:	2302      	movs	r3, #2
 800691c:	73fb      	strb	r3, [r7, #15]
    break;
 800691e:	e002      	b.n	8006926 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006920:	2302      	movs	r3, #2
 8006922:	73fb      	strb	r3, [r7, #15]
    break;
 8006924:	bf00      	nop
  }
  return usb_status;
 8006926:	7bfb      	ldrb	r3, [r7, #15]
}
 8006928:	4618      	mov	r0, r3
 800692a:	3714      	adds	r7, #20
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	4603      	mov	r3, r0
 800693c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800693e:	79fb      	ldrb	r3, [r7, #7]
 8006940:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8006942:	79fb      	ldrb	r3, [r7, #7]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d102      	bne.n	800694e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8006948:	2301      	movs	r3, #1
 800694a:	73fb      	strb	r3, [r7, #15]
 800694c:	e001      	b.n	8006952 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800694e:	2300      	movs	r3, #0
 8006950:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8006952:	7bfb      	ldrb	r3, [r7, #15]
 8006954:	461a      	mov	r2, r3
 8006956:	2101      	movs	r1, #1
 8006958:	4803      	ldr	r0, [pc, #12]	; (8006968 <MX_DriverVbusFS+0x34>)
 800695a:	f7fa fd13 	bl	8001384 <HAL_GPIO_WritePin>
}
 800695e:	bf00      	nop
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	40020800 	.word	0x40020800

0800696c <__errno>:
 800696c:	4b01      	ldr	r3, [pc, #4]	; (8006974 <__errno+0x8>)
 800696e:	6818      	ldr	r0, [r3, #0]
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	2000002c 	.word	0x2000002c

08006978 <__libc_init_array>:
 8006978:	b570      	push	{r4, r5, r6, lr}
 800697a:	4e0d      	ldr	r6, [pc, #52]	; (80069b0 <__libc_init_array+0x38>)
 800697c:	4c0d      	ldr	r4, [pc, #52]	; (80069b4 <__libc_init_array+0x3c>)
 800697e:	1ba4      	subs	r4, r4, r6
 8006980:	10a4      	asrs	r4, r4, #2
 8006982:	2500      	movs	r5, #0
 8006984:	42a5      	cmp	r5, r4
 8006986:	d109      	bne.n	800699c <__libc_init_array+0x24>
 8006988:	4e0b      	ldr	r6, [pc, #44]	; (80069b8 <__libc_init_array+0x40>)
 800698a:	4c0c      	ldr	r4, [pc, #48]	; (80069bc <__libc_init_array+0x44>)
 800698c:	f000 f8ea 	bl	8006b64 <_init>
 8006990:	1ba4      	subs	r4, r4, r6
 8006992:	10a4      	asrs	r4, r4, #2
 8006994:	2500      	movs	r5, #0
 8006996:	42a5      	cmp	r5, r4
 8006998:	d105      	bne.n	80069a6 <__libc_init_array+0x2e>
 800699a:	bd70      	pop	{r4, r5, r6, pc}
 800699c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069a0:	4798      	blx	r3
 80069a2:	3501      	adds	r5, #1
 80069a4:	e7ee      	b.n	8006984 <__libc_init_array+0xc>
 80069a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80069aa:	4798      	blx	r3
 80069ac:	3501      	adds	r5, #1
 80069ae:	e7f2      	b.n	8006996 <__libc_init_array+0x1e>
 80069b0:	08006ba0 	.word	0x08006ba0
 80069b4:	08006ba0 	.word	0x08006ba0
 80069b8:	08006ba0 	.word	0x08006ba0
 80069bc:	08006ba4 	.word	0x08006ba4

080069c0 <malloc>:
 80069c0:	4b02      	ldr	r3, [pc, #8]	; (80069cc <malloc+0xc>)
 80069c2:	4601      	mov	r1, r0
 80069c4:	6818      	ldr	r0, [r3, #0]
 80069c6:	f000 b861 	b.w	8006a8c <_malloc_r>
 80069ca:	bf00      	nop
 80069cc:	2000002c 	.word	0x2000002c

080069d0 <free>:
 80069d0:	4b02      	ldr	r3, [pc, #8]	; (80069dc <free+0xc>)
 80069d2:	4601      	mov	r1, r0
 80069d4:	6818      	ldr	r0, [r3, #0]
 80069d6:	f000 b80b 	b.w	80069f0 <_free_r>
 80069da:	bf00      	nop
 80069dc:	2000002c 	.word	0x2000002c

080069e0 <memset>:
 80069e0:	4402      	add	r2, r0
 80069e2:	4603      	mov	r3, r0
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d100      	bne.n	80069ea <memset+0xa>
 80069e8:	4770      	bx	lr
 80069ea:	f803 1b01 	strb.w	r1, [r3], #1
 80069ee:	e7f9      	b.n	80069e4 <memset+0x4>

080069f0 <_free_r>:
 80069f0:	b538      	push	{r3, r4, r5, lr}
 80069f2:	4605      	mov	r5, r0
 80069f4:	2900      	cmp	r1, #0
 80069f6:	d045      	beq.n	8006a84 <_free_r+0x94>
 80069f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069fc:	1f0c      	subs	r4, r1, #4
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	bfb8      	it	lt
 8006a02:	18e4      	addlt	r4, r4, r3
 8006a04:	f000 f8ac 	bl	8006b60 <__malloc_lock>
 8006a08:	4a1f      	ldr	r2, [pc, #124]	; (8006a88 <_free_r+0x98>)
 8006a0a:	6813      	ldr	r3, [r2, #0]
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	b933      	cbnz	r3, 8006a1e <_free_r+0x2e>
 8006a10:	6063      	str	r3, [r4, #4]
 8006a12:	6014      	str	r4, [r2, #0]
 8006a14:	4628      	mov	r0, r5
 8006a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a1a:	f000 b8a2 	b.w	8006b62 <__malloc_unlock>
 8006a1e:	42a3      	cmp	r3, r4
 8006a20:	d90c      	bls.n	8006a3c <_free_r+0x4c>
 8006a22:	6821      	ldr	r1, [r4, #0]
 8006a24:	1862      	adds	r2, r4, r1
 8006a26:	4293      	cmp	r3, r2
 8006a28:	bf04      	itt	eq
 8006a2a:	681a      	ldreq	r2, [r3, #0]
 8006a2c:	685b      	ldreq	r3, [r3, #4]
 8006a2e:	6063      	str	r3, [r4, #4]
 8006a30:	bf04      	itt	eq
 8006a32:	1852      	addeq	r2, r2, r1
 8006a34:	6022      	streq	r2, [r4, #0]
 8006a36:	6004      	str	r4, [r0, #0]
 8006a38:	e7ec      	b.n	8006a14 <_free_r+0x24>
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	b10a      	cbz	r2, 8006a44 <_free_r+0x54>
 8006a40:	42a2      	cmp	r2, r4
 8006a42:	d9fa      	bls.n	8006a3a <_free_r+0x4a>
 8006a44:	6819      	ldr	r1, [r3, #0]
 8006a46:	1858      	adds	r0, r3, r1
 8006a48:	42a0      	cmp	r0, r4
 8006a4a:	d10b      	bne.n	8006a64 <_free_r+0x74>
 8006a4c:	6820      	ldr	r0, [r4, #0]
 8006a4e:	4401      	add	r1, r0
 8006a50:	1858      	adds	r0, r3, r1
 8006a52:	4282      	cmp	r2, r0
 8006a54:	6019      	str	r1, [r3, #0]
 8006a56:	d1dd      	bne.n	8006a14 <_free_r+0x24>
 8006a58:	6810      	ldr	r0, [r2, #0]
 8006a5a:	6852      	ldr	r2, [r2, #4]
 8006a5c:	605a      	str	r2, [r3, #4]
 8006a5e:	4401      	add	r1, r0
 8006a60:	6019      	str	r1, [r3, #0]
 8006a62:	e7d7      	b.n	8006a14 <_free_r+0x24>
 8006a64:	d902      	bls.n	8006a6c <_free_r+0x7c>
 8006a66:	230c      	movs	r3, #12
 8006a68:	602b      	str	r3, [r5, #0]
 8006a6a:	e7d3      	b.n	8006a14 <_free_r+0x24>
 8006a6c:	6820      	ldr	r0, [r4, #0]
 8006a6e:	1821      	adds	r1, r4, r0
 8006a70:	428a      	cmp	r2, r1
 8006a72:	bf04      	itt	eq
 8006a74:	6811      	ldreq	r1, [r2, #0]
 8006a76:	6852      	ldreq	r2, [r2, #4]
 8006a78:	6062      	str	r2, [r4, #4]
 8006a7a:	bf04      	itt	eq
 8006a7c:	1809      	addeq	r1, r1, r0
 8006a7e:	6021      	streq	r1, [r4, #0]
 8006a80:	605c      	str	r4, [r3, #4]
 8006a82:	e7c7      	b.n	8006a14 <_free_r+0x24>
 8006a84:	bd38      	pop	{r3, r4, r5, pc}
 8006a86:	bf00      	nop
 8006a88:	200000b8 	.word	0x200000b8

08006a8c <_malloc_r>:
 8006a8c:	b570      	push	{r4, r5, r6, lr}
 8006a8e:	1ccd      	adds	r5, r1, #3
 8006a90:	f025 0503 	bic.w	r5, r5, #3
 8006a94:	3508      	adds	r5, #8
 8006a96:	2d0c      	cmp	r5, #12
 8006a98:	bf38      	it	cc
 8006a9a:	250c      	movcc	r5, #12
 8006a9c:	2d00      	cmp	r5, #0
 8006a9e:	4606      	mov	r6, r0
 8006aa0:	db01      	blt.n	8006aa6 <_malloc_r+0x1a>
 8006aa2:	42a9      	cmp	r1, r5
 8006aa4:	d903      	bls.n	8006aae <_malloc_r+0x22>
 8006aa6:	230c      	movs	r3, #12
 8006aa8:	6033      	str	r3, [r6, #0]
 8006aaa:	2000      	movs	r0, #0
 8006aac:	bd70      	pop	{r4, r5, r6, pc}
 8006aae:	f000 f857 	bl	8006b60 <__malloc_lock>
 8006ab2:	4a21      	ldr	r2, [pc, #132]	; (8006b38 <_malloc_r+0xac>)
 8006ab4:	6814      	ldr	r4, [r2, #0]
 8006ab6:	4621      	mov	r1, r4
 8006ab8:	b991      	cbnz	r1, 8006ae0 <_malloc_r+0x54>
 8006aba:	4c20      	ldr	r4, [pc, #128]	; (8006b3c <_malloc_r+0xb0>)
 8006abc:	6823      	ldr	r3, [r4, #0]
 8006abe:	b91b      	cbnz	r3, 8006ac8 <_malloc_r+0x3c>
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	f000 f83d 	bl	8006b40 <_sbrk_r>
 8006ac6:	6020      	str	r0, [r4, #0]
 8006ac8:	4629      	mov	r1, r5
 8006aca:	4630      	mov	r0, r6
 8006acc:	f000 f838 	bl	8006b40 <_sbrk_r>
 8006ad0:	1c43      	adds	r3, r0, #1
 8006ad2:	d124      	bne.n	8006b1e <_malloc_r+0x92>
 8006ad4:	230c      	movs	r3, #12
 8006ad6:	6033      	str	r3, [r6, #0]
 8006ad8:	4630      	mov	r0, r6
 8006ada:	f000 f842 	bl	8006b62 <__malloc_unlock>
 8006ade:	e7e4      	b.n	8006aaa <_malloc_r+0x1e>
 8006ae0:	680b      	ldr	r3, [r1, #0]
 8006ae2:	1b5b      	subs	r3, r3, r5
 8006ae4:	d418      	bmi.n	8006b18 <_malloc_r+0x8c>
 8006ae6:	2b0b      	cmp	r3, #11
 8006ae8:	d90f      	bls.n	8006b0a <_malloc_r+0x7e>
 8006aea:	600b      	str	r3, [r1, #0]
 8006aec:	50cd      	str	r5, [r1, r3]
 8006aee:	18cc      	adds	r4, r1, r3
 8006af0:	4630      	mov	r0, r6
 8006af2:	f000 f836 	bl	8006b62 <__malloc_unlock>
 8006af6:	f104 000b 	add.w	r0, r4, #11
 8006afa:	1d23      	adds	r3, r4, #4
 8006afc:	f020 0007 	bic.w	r0, r0, #7
 8006b00:	1ac3      	subs	r3, r0, r3
 8006b02:	d0d3      	beq.n	8006aac <_malloc_r+0x20>
 8006b04:	425a      	negs	r2, r3
 8006b06:	50e2      	str	r2, [r4, r3]
 8006b08:	e7d0      	b.n	8006aac <_malloc_r+0x20>
 8006b0a:	428c      	cmp	r4, r1
 8006b0c:	684b      	ldr	r3, [r1, #4]
 8006b0e:	bf16      	itet	ne
 8006b10:	6063      	strne	r3, [r4, #4]
 8006b12:	6013      	streq	r3, [r2, #0]
 8006b14:	460c      	movne	r4, r1
 8006b16:	e7eb      	b.n	8006af0 <_malloc_r+0x64>
 8006b18:	460c      	mov	r4, r1
 8006b1a:	6849      	ldr	r1, [r1, #4]
 8006b1c:	e7cc      	b.n	8006ab8 <_malloc_r+0x2c>
 8006b1e:	1cc4      	adds	r4, r0, #3
 8006b20:	f024 0403 	bic.w	r4, r4, #3
 8006b24:	42a0      	cmp	r0, r4
 8006b26:	d005      	beq.n	8006b34 <_malloc_r+0xa8>
 8006b28:	1a21      	subs	r1, r4, r0
 8006b2a:	4630      	mov	r0, r6
 8006b2c:	f000 f808 	bl	8006b40 <_sbrk_r>
 8006b30:	3001      	adds	r0, #1
 8006b32:	d0cf      	beq.n	8006ad4 <_malloc_r+0x48>
 8006b34:	6025      	str	r5, [r4, #0]
 8006b36:	e7db      	b.n	8006af0 <_malloc_r+0x64>
 8006b38:	200000b8 	.word	0x200000b8
 8006b3c:	200000bc 	.word	0x200000bc

08006b40 <_sbrk_r>:
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	4c06      	ldr	r4, [pc, #24]	; (8006b5c <_sbrk_r+0x1c>)
 8006b44:	2300      	movs	r3, #0
 8006b46:	4605      	mov	r5, r0
 8006b48:	4608      	mov	r0, r1
 8006b4a:	6023      	str	r3, [r4, #0]
 8006b4c:	f7fa f864 	bl	8000c18 <_sbrk>
 8006b50:	1c43      	adds	r3, r0, #1
 8006b52:	d102      	bne.n	8006b5a <_sbrk_r+0x1a>
 8006b54:	6823      	ldr	r3, [r4, #0]
 8006b56:	b103      	cbz	r3, 8006b5a <_sbrk_r+0x1a>
 8006b58:	602b      	str	r3, [r5, #0]
 8006b5a:	bd38      	pop	{r3, r4, r5, pc}
 8006b5c:	20000854 	.word	0x20000854

08006b60 <__malloc_lock>:
 8006b60:	4770      	bx	lr

08006b62 <__malloc_unlock>:
 8006b62:	4770      	bx	lr

08006b64 <_init>:
 8006b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b66:	bf00      	nop
 8006b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b6a:	bc08      	pop	{r3}
 8006b6c:	469e      	mov	lr, r3
 8006b6e:	4770      	bx	lr

08006b70 <_fini>:
 8006b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b72:	bf00      	nop
 8006b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b76:	bc08      	pop	{r3}
 8006b78:	469e      	mov	lr, r3
 8006b7a:	4770      	bx	lr
